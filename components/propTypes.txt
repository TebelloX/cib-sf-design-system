/Users/vu/forks/design-system-react/components/global-header/help.jsx:15:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `triggerButton`: Assistive text for the GlobalHeaderHelp trigger button. The default is `Help and Training`.\n	 */\n	assistiveText: PropTypes.shape({\n		triggerButton: PropTypes.string,\n	}),\n	/**\n	 * A `Popover` component. The props from this popover will be merged and override any default props. The `children` prop will be ignored.\n	 */\n	popover: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/data-table/row-actions.jsx:31:propTypes = {\n		/**\n		 * Description of the menu for screenreaders.\n		 */\n		assistiveText: PropTypes.object,\n		/**\n		 * Class names to be added to the actions menu.\n		 */\n		className: PropTypes.string,\n		/**\n		 * HTML ID to be added to the actions menu.\n		 */\n		id: PropTypes.string,\n		/**\n		 * `DataTable` row item\n		 */\n		item: PropTypes.object,\n		/**\n		 * Disable hint styling which changes the color of the dropdown svg on hover over.\n		 */\n		noHint: PropTypes.bool,\n		/**\n		 * Triggered when an item is selected.\n		 */\n		onAction: PropTypes.func,\n		/**\n		 * `Dropdown` options. See `Dropdown`.\n		 */\n		options: PropTypes.array,\n		/**\n		 * A [Dropdown](http://react.lightningdesignsystem.com/components/dropdown-menus/) component. The props from this drop will be merged and override any default props.\n		 * **Note:** onAction will not be overridden, both `DropDown`'s onSelect(dropDownActionOption) and onAction(rowItem, dropdownActionOption) will be called with appropriate parameters\n		 */\n		dropdown: PropTypes.node,\n	}
/Users/vu/forks/design-system-react/components/data-table/highlight-cell.jsx:29:propTypes = {\n	/**\n	 * The contents of the cell. Equivalent to `props.item[props.property]`\n	 */\n	children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * The string of text (or Regular Expression) to highlight.\n	 */\n	search: PropTypes.any,\n}
/Users/vu/forks/design-system-react/components/global-header/dropdown.jsx:57:propTypes = {\n	/**\n	 * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n	 */\n	align: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * Extra classnames to apply to the dropdown menu.\n	 */\n	className: PropTypes.string,\n	/**\n	 * CSS classes to be added to `li` element.\n	 */\n	buttonClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Name of the icon. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon names.\n	 */\n	iconName: PropTypes.string,\n	/**\n	 * For icon variants, please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#icon">Lightning Design System Icons</a>.\n	 */\n	iconVariant: PropTypes.oneOf([\n		'bare',\n		'container',\n		'border',\n		'border-filled',\n		'more',\n		'global-header',\n	]),\n	/**\n	 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Adds custom styling such as inverse fill and special sizing/spacing\n	 */\n	globalAction: PropTypes.bool,\n	/**\n	 * Positions dropdown menu with a nubbin--that is the arrow notch. The placement options correspond to the placement of the nubbin. This is implemeted with CSS classes and is best used with a `Button` with "icon container" styling. Dropdown menus will still be contained to the closest scrolling parent.\n	 */\n	nubbinPosition: PropTypes.oneOf([\n		'top left',\n		'top',\n		'top right',\n		'bottom left',\n		'bottom',\n		'bottom right',\n	]),\n	/**\n	 *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n	 */\n	offset: PropTypes.string,\n	/**\n	 * Triggered when an item in the menu is clicked.\n	 */\n	onSelect: PropTypes.func,\n	/**\n	 * An array of menu item.\n	 */\n	options: PropTypes.array.isRequired,\n}
/Users/vu/forks/design-system-react/components/button-stateful/index.jsx:29:propTypes = {\n	/**\n	 * Specifies the current state of the button. If set, the button will act as a ['controlled' component](https://facebook.github.io/react/docs/forms.html#controlled-components).\n	 */\n	active: PropTypes.bool,\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. This should also include the state of the button. If the button has an icon and a visible label, you can omit the <code>icon</code> prop and use the <code>label</code> prop.\n	 */\n	assistiveText: PropTypes.shape({\n		icon: PropTypes.string,\n	}),\n	/**\n	 * Disables the button and adds disabled styling.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Icon associated with the stateful button. Accepts an `Icon` component\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Triggered when focus is removed.\n	 */\n	onBlur: PropTypes.func,\n	/**\n	 * Triggered when the button is clicked.\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Triggered when component is focused.\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * Triggered when a key is pressed down\n	 */\n	onKeyDown: PropTypes.func,\n	/**\n	 * Triggered when a key is pressed and released\n	 */\n	onKeyPress: PropTypes.func,\n	/**\n	 * Triggered when a key is released\n	 */\n	onKeyUp: PropTypes.func,\n	/**\n	 * Triggered when a mouse button is pressed down\n	 */\n	onMouseDown: PropTypes.func,\n	/**\n	 * Triggered when a mouse arrow hovers\n	 */\n	onMouseEnter: PropTypes.func,\n	/**\n	 * If true, button scales to 100% width on small form factors.\n	 */\n	responsive: PropTypes.bool,\n	/**\n	 * Initial label and icon (optional) of button.\n	 */\n	stateOne: PropTypes.object,\n	/**\n	 * Selected label and icon (optional) of button.\n	 */\n	stateTwo: PropTypes.object,\n	/**\n	 * Deselect label and icon (optional) of button.\n	 */\n	stateThree: PropTypes.object,\n	/**\n	 * Write "-1" if you don't want the user to tab to the button.\n	 */\n	tabIndex: PropTypes.string,\n	/**\n	 * Different types of buttons\n	 */\n	variant: PropTypes.oneOf([\n		'base',\n		'neutral',\n		'brand',\n		'destructive',\n		'icon',\n		'icon-filled',\n	]),\n}
/Users/vu/forks/design-system-react/components/progress-indicator/private/step.jsx:21:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `completedStep`: Label for a completed step. The default is `Completed Step`\n	 * * `disabledStep`: Label for disabled step. The default is `Disabled Step`\n	 * * `errorStep`: Label for a step with an error. The default is `Error Step`\n	 * * `percentage`: Label for Progress Bar. The default is `Progress: [this.props.value]%`. You will need to calculate the percentage yourself if changing this string.\n	 * * `step`: Label for a step. It will be typically followed by the number of the step such as "Step 1".\n	 */\n	assistiveText: PropTypes.shape({\n		completedStep: PropTypes.string,\n		disabledStep: PropTypes.string,\n		percentage: PropTypes.string,\n		step: PropTypes.string,\n	}),\n	/**\n	 * Id for Steps, ranging in [0, steps.length).\n	 */\n	id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n	/**\n	 * Index of step. Used for id's if no step ID exists\n	 */\n	index: PropTypes.number,\n	/**\n	 * Determines if the step has been completed\n	 */\n\n	isCompleted: PropTypes.bool,\n	/**\n	 * Determines if the step has been disabled\n	 */\n	isDisabled: PropTypes.bool,\n	/**\n	 * Determines if the step contains an error\n	 */\n	isError: PropTypes.bool,\n	/**\n	 * Determines if the step is currently selected (active)\n	 */\n	isSelected: PropTypes.bool,\n	/**\n	 * Label of tooltip attached to the step if applicable.\n	 */\n	label: PropTypes.node,\n	/**\n	 * Triggered when click on individual steps. By default, it receives an event and returns all info passed to that step.\n	 * users are able to re-define it by passing a function as a prop\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Triggered when focus on individual steps. By default, it receives an event and returns all info passed to that step.\n	 * users are able to re-define it by passing a function as a prop\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * Step object. This is passed into event callbacks.\n	 */\n	step: PropTypes.object,\n	/**\n	 * Determines if the tooltip attached to step is always open.\n	 * This is mainly for dev test purpose.\n	 * Usually the tooltip should only show when hover.\n	 */\n	tooltipIsOpen: PropTypes.bool,\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default if `variant` is `modal`) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - (default if `variant` is `base`) The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	tooltipPosition: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n}
/Users/vu/forks/design-system-react/components/data-table/cell.jsx:62:propTypes = {\n	/**\n	 * The contents of the cell. This can be simple text or DOM nodes. Equivalent to `props.item[props.property]`\n	 */\n	children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * Class names to be added to the cell.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Use this if you are creating an advanced table (selectable, sortable, or resizable rows)\n	 */\n	fixedLayout: PropTypes.bool,\n	/**\n	 * The item from the items which represents this row.\n	 */\n	item: PropTypes.object,\n	/**\n	 * The primary column for a row. This is almost always the first column.\n	 */\n	primaryColumn: PropTypes.bool,\n	/**\n	 * The property of this item to display.\n	 */\n	property: PropTypes.string,\n	/**\n	 * Shows on hover. Useful for truncated cells.\n	 */\n	title: PropTypes.string,\n	/**\n	 * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n	 */\n	width: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/icon-settings/index.jsx:55:propTypes = {\n	/**\n	 * Path to the root icon folder\n	 * example: `/assets/icons`\n	 */\n	iconPath: PropTypes.string,\n	/**\n	 * Function to allow developers to return a custom icon path--for instance, on the same page with a local anchor (`#down`). This is helpful for when there are Cross-Origin Resource Sharing (CORS) issues with SVGs that are located on another domain such as a CDN. `({category, name}) => { return \`#${name}\` }`\n	 */\n	onRequestIconPath: PropTypes.func,\n	/**\n	 * Path to the action sprite\n	 * example: '@salesforce-ux/design-system/assets/icons/action-sprite/svg/symbols.svg';\n	 */\n	actionSprite: PropTypes.string,\n	/**\n	 * Path to the custom sprite\n	 * example: '@salesforce-ux/design-system/assets/icons/custom-sprite/svg/symbols.svg';\n	 */\n	customSprite: PropTypes.string,\n	/**\n	 * Path to the doctype sprite\n	 * example: '@salesforce-ux/design-system/assets/icons/doctype-sprite/svg/symbols.svg';\n	 */\n	doctypeSprite: PropTypes.string,\n	/**\n	 * Path to the standard sprite\n	 * example: '@salesforce-ux/design-system/assets/icons/standard-sprite/svg/symbols.svg';\n	 */\n	standardSprite: PropTypes.string,\n	/**\n	 * Path to the utility sprite\n	 * example: '@salesforce-ux/design-system/assets/icons/utility-sprite/svg/symbols.svg';\n	 */\n	utilitySprite: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/illustration/index.jsx:104:propTypes = {\n	/**\n	 * CSS classes that are applied to the SVG. _Tested with Mocha testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * A heading text. It is required if illustration is present. _Tested with snapshot testing._ _Tested with Mocha testing._\n	 */\n	heading: PropTypes.string,\n	/**\n	 * A custom SVG object to use instead of the supplied SLDS illustrations, look in `design-system-react/icons` for examples and syntax. _Tested with snapshot testing._ _Tested with Mocha testing._\n	 */\n	illustration: PropTypes.object,\n	/**\n	 * Indicates whether the illustration SVGs are from the design-system-react repo. If yes, set to true.\n	 */\n	internalIllustration: PropTypes.bool.isRequired,\n	/**\n	 * A message body below the heading to further communicate the state of the component. _Tested with snapshot testing._ _Tested with Mocha testing._\n	 */\n	messageBody: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * Name of the illustration. Visit <a href='https://lightningdesignsystem.com/components/illustration/'>Lightning Design System Illustration</a> to reference illustration names. _Tested with snapshot testing._ _Tested with Mocha testing._\n	 */\n	name: PropTypes.string,\n	/**\n	 * Path to the illustration SVG image. _Tested with snapshot testing._\n	 */\n	path: PropTypes.string,\n	/**\n	 * Size of the illustration. _Tested with snapshot testing._ _Tested with Mocha testing._\n	 */\n	size: PropTypes.oneOf(['small', 'large']),\n	/**\n	 * Custom styles to be passed to the illustration SVG. _Tested with Mocha testing._\n	 */\n	style: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/accordion/index.jsx:15:propTypes = {\n	/**\n	 * CSS class names to be added to the accordion component. _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for accordion component. _Tested with snapshot testing._\n	 */\n	id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n	/**\n	 * The panel content for the Accordion component. Accordion panels should be added as <AccordionPanel />. Event handler for the accordion panels should be added to `<AccordionPanel />`. Optional `panelContentActions` component may be passed as prop. _Tested with Mocha framework and snapshot testing._\n	 *\n	 * Example:\n	 * ```\n	 * <SLDSAccordion>\n	 *   <SLDSAccordionpanel />\n	 *   <SLDSAccordionpanel />\n	 *   <SLDSAccordionpanel />\n	 * </SLDSAccordion>\n	 * ```\n	 */\n	children: PropTypes.node.isRequired,\n}
/Users/vu/forks/design-system-react/components/welcome-mat/tile.jsx:20:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `completeIcon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the complete icon means.\n	 */\n	assistiveText: PropTypes.shape({\n		completedIcon: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Title for the tile component.\n	 */\n	title: PropTypes.string,\n	/**\n	 * Description for the tile component.\n	 */\n	description: PropTypes.string,\n	/**\n	 * Href for the tile link\n	 */\n	href: PropTypes.string,\n	/**\n	 * Icon for the tile\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Whether the tile is completed\n	 */\n	isComplete: PropTypes.bool,\n	/**\n	 * Variant of the Welcome Mat Tile\n	 */\n	variant: PropTypes.oneOf([\n		'steps',\n		'info-only',\n		'splash',\n		'trailhead-connected',\n	]),\n}
/Users/vu/forks/design-system-react/components/expression/group.jsx:21:propTypes = {\n	/**\n	 *  **Assistive text for accessibility.**\n	 * * `label`: For users of assistive technology, assistive text for the expression group's label.\n	 * * `addCondition`: For users of assistive technology, assistive text for the Add Condition button's icon.\n	 * * `addGroup`: For users of assistive technology, assistive text for the Add Group button's icon.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n		addCondition: PropTypes.string,\n		addGroup: PropTypes.string,\n	}),\n	/**\n	 * HTML id for ExpressionGroup component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * `ExpressionGroup` children, accepts `ExpressionCondition`. (Also accepts sub-`ExpressionGroup` if `isRoot`)\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to the element with class `.slds-expression__group`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Callbacks for various expression group events such as trigger change, add condition etc\n	 */\n	events: PropTypes.shape({\n		onChangeTrigger: PropTypes.func,\n		onChangeCustomLogicValue: PropTypes.func,\n		onAddCondition: PropTypes.func,\n		onAddGroup: PropTypes.func,\n	}),\n	/**\n	 * If set to true, the component will focus on the first focusable input upon mounting. This is useful for accessibility when adding new groups.\n	 */\n	focusOnMount: PropTypes.bool,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `addCondition`: Label for the Add Condition Button. Defaults to "Add Condition"\n	 * * `addGroup`: Label for the Add Group Button. Defaults to "Add Group"\n	 * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to "Custom Logic"\n	 * * `label`: Label for the expression group, to indicate condition connectors based on the parent's trigger-type chosen. Defaults to ""\n	 * * `takeAction`: Label for the `triggerType` selector. Defaults to "Take Action When"\n	 * * `triggerAll`: Label for the `all` value within the trigger selector\n	 * * `triggerAlways`: Label for the `always` value within the trigger selector\n	 * * `triggerAny`: Label for the `any` value within the trigger selector\n	 * * `triggerCustom`: Label for the `custom` value within the trigger selector\n	 * * `triggerFormula`: Label for the `formula` value within the trigger selector\n	 */\n	labels: PropTypes.shape({\n		addCondition: PropTypes.string,\n		addGroup: PropTypes.string,\n		customLogic: PropTypes.string,\n		label: PropTypes.string,\n		takeAction: PropTypes.string,\n		triggerAll: PropTypes.string,\n		triggerAlways: PropTypes.string,\n		triggerAny: PropTypes.string,\n		triggerCustom: PropTypes.string,\n		triggerFormula: PropTypes.string,\n	}),\n	/**\n	 * Whether the group is at root level\n	 */\n	isRoot: PropTypes.bool,\n	/**\n	 * Trigger type for the Group\n	 */\n	triggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n	/**\n	 * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n	 */\n	customLogicValue: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/time-picker/index.jsx:65:propTypes = {\n		/**\n		 * If true, constrains the menu to the scroll parent. See `Dropdown`.\n		 */\n		constrainToScrollParent: PropTypes.bool,\n		/**\n		 * Disables the input and prevents editing the contents.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * Time formatting function\n		 */\n		formatter: PropTypes.func,\n		/**\n		 * Sets the dialog width to the width of the target. Menus attached to `input` typically follow this UX pattern.\n		 */\n		inheritTargetWidth: PropTypes.bool,\n		/**\n		 * This label appears above the input.\n		 */\n		label: PropTypes.string,\n		/**\n		 * Custom element that overrides the default Menu Item component.\n		 */\n		listItemRenderer: PropTypes.func,\n		/**\n		 * Please select one of the following:\n		 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n		 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n		 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n		 */\n		menuPosition: PropTypes.oneOf([\n			'absolute',\n			'overflowBoundaryElement',\n			'relative',\n		]),\n		/**\n		 * Receives the props `(dateValue, stringValue)`\n		 */\n		onDateChange: PropTypes.func,\n		/**\n		 * Parsing date string into Date\n		 */\n		parser: PropTypes.func,\n		/**\n		 * Text that will appear in an empty input.\n		 */\n		placeholder: PropTypes.string,\n		/**\n		 * If true, adds asterisk next to input label to indicate it is a required field.\n		 */\n		required: PropTypes.bool,\n		/**\n		 * Frequency of options\n		 */\n		stepInMinutes: PropTypes.number,\n		/**\n		 * Value for input that is parsed to create an internal state in the `date` format.\n		 */\n		strValue: PropTypes.string,\n		/**\n		 * Instance an internal state in the `date` format.\n		 */\n		value: PropTypes.instanceOf(Date),\n	}
/Users/vu/forks/design-system-react/components/welcome-mat/info-badge.jsx:19:propTypes = {\n	/**\n	 *  **Assistive text for accessibility.**\n	 * * `completed` : For users of assistive technology, assistive text for completed icon.\n	 */\n	assistiveText: PropTypes.shape({\n		completed: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Icon for the tile\n	 */\n	image: PropTypes.string,\n	/**\n	 * Whether the trail is completed\n	 */\n	isComplete: PropTypes.bool,\n	/**\n	 * Actions to be rendered on completion of the trail\n	 */\n	onCompleteRenderActions: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/alert/container.jsx:11:propTypes = {\n	/**\n	 * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Alert components\n	 */\n	children: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/utilities/highlighter/index.jsx:79:propTypes = {\n	/**\n	 * The full string to display.\n	 */\n	children: PropTypes.oneOfType([\n		PropTypes.string,\n		PropTypes.number,\n		PropTypes.bool,\n		PropTypes.node,\n	]),\n	className: PropTypes.string,\n	/**\n	 * The string of text (or Regular Expression) to highlight.\n	 */\n	search: PropTypes.any,\n}
/Users/vu/forks/design-system-react/components/input/search.jsx:81:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: Assistive text to search input\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * Adds a clear button to right side of the input\n	 */\n	clearable: PropTypes.bool,\n	/**\n	 * Triggers when the clear button is clicked\n	 */\n	onClear: PropTypes.func,\n	/**\n	 * This event fires when enter is pressed in the `input` or the search button is clicked.\n	 */\n	onSearch: PropTypes.func,\n	/**\n	 * Placeholder for the input\n	 */\n	placeholder: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/combobox/private/menu.jsx:14:propTypes = {\n	/*\n	 * Active descendant in menu\n	 */\n	activeOption: PropTypes.object,\n	/*\n	 * Index of active descendant in menu\n	 */\n	activeOptionIndex: PropTypes.number,\n	/**\n	 * CSS classes to be added to container `div` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes to be added to tag with `.slds-dropdown`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	classNameMenu: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes to be added to menu sub header `span` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	classNameMenuSubHeader: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Sets the dialog width to the width of one of the following:\n	 * `target`: (Menus attached to `input` typically follow this UX pattern),\n	 *  `menu`: Consider setting a menuMaxWidth if using this value. If not, width will be set to width of largest menu item.\n	 *  'none'\n	 */\n	inheritWidthOf: PropTypes.oneOf(['target', 'menu', 'none']),\n	/*\n	 * Id used for assistive technology\n	 */\n	inputId: PropTypes.string,\n	/**\n	 * Determines the height of the menu based on SLDS CSS classes.\n	 */\n	itemVisibleLength: PropTypes.oneOf([5, 7, 10]),\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `noOptionsFound`: Custom message that renders when no matches found. The default empty state is just text that says, 'No matches found.'.\n	 */\n	labels: PropTypes.shape({\n		noOptionsFound: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\n			.isRequired,\n	}),\n	/**\n	 * Accepts a custom menu item rendering function that becomes a custom component and is passed in the following props:\n	 * * `assistiveText`: Object, `assistiveText` prop that is passed into Combobox\n	 * * `option`: Object, option data for item being rendered that is passed into Combobox\n	 * * `selected`: Boolean, allows rendering of `assistiveText.optionSelectedInMenu` in Readonly Combobox\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	onRenderMenuItem: PropTypes.func,\n	/**\n	 * Accepts a ref function or object (React.createRef() or otherwise) to store the menu DOM reference once available\n	 */\n	menuRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n	/*\n	 * Sets a maximum width that the menu will be if `inheritWidthOf` is menu.\n	 */\n	maxWidth: PropTypes.string,\n	/*\n	 * Callback when option is selected with keyboard or mouse\n	 */\n	onSelect: PropTypes.func,\n	/*\n	 * Menu options\n	 */\n	options: PropTypes.array,\n	/*\n	 * Callback to remove active descendent\n	 */\n	resetActiveOption: PropTypes.func,\n	/*\n	 * Selected options\n	 */\n	selection: PropTypes.array,\n	/*\n	 * Adds loading spinner below the options\n	 */\n	hasMenuSpinner: PropTypes.bool,\n	/*\n	 * Object for creating Add item below the options\n	 */\n	optionsAddItem: PropTypes.arrayOf(\n		PropTypes.shape({\n			id: PropTypes.string,\n			icon: PropTypes.node,\n			label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n		})\n	),\n	/*\n	 * Object for creating Search item on top of the options\n	 */\n	optionsSearchEntity: PropTypes.arrayOf(\n		PropTypes.shape({\n			id: PropTypes.string,\n			icon: PropTypes.node,\n			label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n		})\n	),\n	/**\n	 * Accepts a tooltip that is displayed when hovering on disabled menu items.\n	 */\n	tooltipMenuItemDisabled: PropTypes.element,\n	/**\n	 * Changes styles of the menu option\n	 */\n	variant: PropTypes.oneOf(['icon-title-subtitle', 'checkbox']),\n	isSelected: PropTypes.func,\n	assistiveText: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/expression/index.jsx:17:propTypes = {\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * `Expression` children, accepts `ExpressionCondition` & `ExpressionGroup`\n	 */\n	children: PropTypes.node,\n	/**\n	 * Callbacks for various expression events such as trigger change, add group etc\n	 */\n	events: PropTypes.shape({\n		onChangeTrigger: PropTypes.func,\n		onAddGroup: PropTypes.func,\n		onAddCondition: PropTypes.func,\n		onChangeCustomLogicValue: PropTypes.func,\n	}),\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `addCondition`: Label for the Add Condition Button. Defaults to "Add Condition"\n	 * * `addGroup`: Label for the Add Group Button. Defaults to "Add Group"\n	 * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to "Custom Logic"\n	 * * `takeAction`: Label for the `triggerType` selector. Defaults to "Take Action When"\n	 * * `title` : Title for the Expression. Defaults to "Conditions"\n	 * * `triggerAll`: Label for the `all` value within the trigger selector\n	 * * `triggerAlways`: Label for the `always` value within the trigger selector\n	 * * `triggerAny`: Label for the `any` value within the trigger selector\n	 * * `triggerCustom`: Label for the `custom` value within the trigger selector\n	 * * `triggerFormula`: Label for the `formula` value within the trigger selector\n	 */\n	labels: PropTypes.shape({\n		addCondition: PropTypes.string,\n		addGroup: PropTypes.string,\n		customLogic: PropTypes.string,\n		takeAction: PropTypes.string,\n		title: PropTypes.string,\n		triggerAll: PropTypes.string,\n		triggerAlways: PropTypes.string,\n		triggerAny: PropTypes.string,\n		triggerCustom: PropTypes.string,\n		triggerFormula: PropTypes.string,\n	}),\n	/**\n	 * CSS classes to be added to the element with class `.slds-expression`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Sets the trigger type for the expression.\n	 */\n	triggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n	/**\n	 * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n	 */\n	customLogicValue: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/avatar/index.jsx:28:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `icon`: Assistive text for accessibility that labels the icon.\n	 */\n	assistiveText: PropTypes.shape({\n		icon: PropTypes.string,\n	}),\n	/**\n	 * Alt attribute to be applied to image (base case) element.\n	 */\n	imgAlt: PropTypes.string,\n	/**\n	 * Source attribute to be applied to image (base case) element.\n	 */\n	imgSrc: PropTypes.string,\n	/**\n	 * Initials attribute to optionally pass in initials directly in case of "initials" fallback case.\n	 */\n	initials: PropTypes.string,\n	/**\n	 * Avatar with initials that are dark text on light background\n	 */\n	inverse: PropTypes.bool,\n	/**\n	 * Label attibute to display inside "initials" fallback case. Will be passed as title prop in `abbr` element to provide more specificity.\n	 */\n	label: PropTypes.string,\n	/**\n	 * Avatar variants to apply relevant styling (circle: user, square: entity) and icon rendering if applicable.\n	 */\n	variant: PropTypes.oneOf(['entity', 'user']).isRequired,\n	/**\n	 * Size of the icon in "icon" fallback case.\n	 */\n	size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']).isRequired,\n	/**\n	 * Title attribute for the avatar container.\n	 */\n	title: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/alert/index.jsx:19:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `closeButton`: This is a visually hidden label for the close button.\n	 * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		closeButton: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	}),\n	/**\n	 * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 * _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Allows user to click a close button. Banners should be dismissible only if they communicate future impact to the system,\n	 * _Tested with snapshot testing._\n	 */\n	dismissible: PropTypes.bool,\n	/**\n	 * Icon of type `~/components/icon`. This icon will be cloned and additional props appended. The default icons are:\n	 * * info variant: `utility:info`\n	 * * error variant: `utility:error`\n	 * * offline variant: `utility:offline`\n	 * * warning variant: `utility:warning`\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	icon: PropTypes.node,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `heading`: text within heading tag\n	 * * `headingLink`: Text of link that triggers `onClickHeadingLink`. Inline links should pass a keyed array of React components into `labels.heading`.\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		heading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		headingLink: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	}),\n	/**\n	 * Triggered by link. _Tested with Mocha testing._\n	 */\n	onClickHeadingLink: PropTypes.func,\n	/**\n	 * Triggered by close button. This is a controlled component. _Tested with Mocha testing._\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 * Custom styles to be passed to the component. _Tested with Mocha testing._\n	 */\n	style: PropTypes.object,\n	/**\n	 * The type of alert. _Tested with snapshot testing._\n	 */\n	variant: PropTypes.oneOf(['error', 'info', 'offline', 'warning']).isRequired,\n}
/Users/vu/forks/design-system-react/components/files/index.jsx:18:propTypes = {\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Crop ratio for the file preview image\n	 */\n	crop: PropTypes.oneOf(['16-by-9', '4-by-3', '1-by-1']),\n	/**\n	 * Column class names to be added each file in the grid\n	 */\n	columnClassName: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/files/file.jsx:21:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 *  * download - description for the download button if present\n	 *  * image - description for the file image\n	 *  * link - description for the file link\n	 *  * loading - description for the loading spinner if present\n	 *  * moreActions - description for the more actions dropdown if present\n	 */\n	assistiveText: PropTypes.shape({\n		download: PropTypes.string,\n		image: PropTypes.string,\n		link: PropTypes.string,\n		loading: PropTypes.string,\n		moreActions: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Controls different cropping aspect ratios for the component\n	 */\n	crop: PropTypes.oneOf(['16-by-9', '4-by-3', '1-by-1']),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Action to be done on clicking download button; doesn't show download button if empty\n	 */\n	onClickDownload: PropTypes.func,\n	/**\n	 * Function that is called when image is clicked; can be used instead of href for more advanced event handling\n	 */\n	onClickImage: PropTypes.func,\n	/**\n	 * Dropdown for more actions button; doesn't show more actions button if empty\n	 */\n	moreActionsDropdown: PropTypes.node,\n	/**\n	 * Icon associated with the file. Accepts an Icon component\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Icon to be shown in top left corner of File component. Accepts an Icon component\n	 */\n	externalIcon: PropTypes.node,\n	/**\n	 * Link to thumbnail image\n	 */\n	image: PropTypes.string,\n	/**\n	 * Controls whether file preview is loading\n	 */\n	isLoading: PropTypes.bool,\n	/**\n	 * Href attribute for image\n	 */\n	href: PropTypes.string,\n	/**\n	 * Labels for the File Component\n	 * * image - title for the file. Required.\n	 */\n	labels: PropTypes.shape({\n		title: PropTypes.string.isRequired,\n	}),\n	/**\n	 *  Controls whether the file's title should be visible\n	 */\n	hasNoVisibleTitle: PropTypes.bool,\n}
/Users/vu/forks/design-system-react/components/popover/popover.jsx:94:propTypes = {\n		/**\n		 * Aligns the popover with the respective side of the trigger. That is `top` will place the `Popover` above the trigger.\n		 */\n		align: PropTypes.oneOf([\n			'top',\n			'top left',\n			'top right',\n			'right',\n			'right top',\n			'right bottom',\n			'bottom',\n			'bottom left',\n			'bottom right',\n			'left',\n			'left top',\n			'left bottom',\n		]),\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `closeButton`: This is a visually hidden label for the close button.\n		 */\n		assistiveText: PropTypes.shape({\n			closeButton: PropTypes.string,\n		}),\n		/**\n		 * HTML `id` of heading for popover. Only use if your header is within your popover body.\n		 */\n		ariaLabelledby: PropTypes.string,\n		/**\n		 * Multiple children of any kind are allowed, but the first child must serve as the trigger component. Many props will be passed into this trigger related to popover interactions. The trigger needs to be a clickable element, such as a `Button` or an anchor tag (`a`).\n		 */\n		children: PropTypes.node.isRequired,\n		/**\n		 * The contents of the popover. This should also accept arrays.\n		 */\n		body: PropTypes.oneOfType([PropTypes.node, PropTypes.array]).isRequired,\n		/**\n		 * CSS classes to be added to the popover footer. That is the element with `.slds-popover__body` on it.\n		 */\n		classNameBody: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * CSS classes to be added to the popover footer. That is the element with `.slds-popover__footer` on it.\n		 */\n		classNameFooter: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * This prop is passed onto the triggering `Button`. Prevent popover from opening. Also applies disabled styling to trigger button.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * A footer is an optional. Buttons are often placed here.\n		 */\n		footer: PropTypes.node,\n		/**\n		 * An object of CSS styles that are applied to the `slds-popover__footer` DOM element.\n		 */\n		footerStyle: PropTypes.object,\n		/**\n		 * Used with `walkthrough` variant to provide action buttons (ex: "Next" / "Skip" / etc) for a walkthrough popover footer. Accepts either a single node or array of nodes for multiple buttons.\n		 */\n		footerWalkthroughActions: PropTypes.oneOfType([\n			PropTypes.node,\n			PropTypes.arrayOf(PropTypes.node),\n		]),\n		/**\n		 * Determines if the popover has a close button or not. Default is `false`\n		 */\n		hasNoCloseButton: PropTypes.bool,\n		/**\n		 * Determines if the popover has a nubbin or not. Default is `false`\n		 */\n		hasNoNubbin: PropTypes.bool,\n		/**\n		 * Prevents the Popover from changing position based on the viewport/window. If set to true your popover can extend outside the viewport _and_ overflow outside of a scrolling parent. If this happens, you might want to consider making the popover contents scrollable to fit the menu on the screen. When enabled, `position` `absolute` is used.\n		 */\n		hasStaticAlignment: PropTypes.bool,\n		/**\n		 * Removes `display:inline-block` from the trigger button.\n		 */\n		hasNoTriggerStyles: PropTypes.bool,\n		/**\n		 * All popovers require a heading that labels the popover for assistive technology users. This text will be placed within a heading HTML tag, or in an h2 within the popover body if used with `variant="walkthrough-action"`. A heading is **highly recommended for accessibility reasons.** Please see `ariaLabelledby` prop.\n		 */\n		heading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		/**\n		 * Icon displayed in the `feature` variant\n		 */\n		icon: PropTypes.node,\n		/**\n		 * By default, a unique ID will be created at render to support keyboard navigation, ARIA roles, and connect the popover to the triggering button. This ID will be applied to the triggering element. `${id}-popover`, `${id}-dialog-heading`, `${id}-dialog-body` are also created.\n		 */\n		id: PropTypes.string,\n		/**\n		 * Forces the popover to be open or closed. See controlled/uncontrolled callback/prop pattern for more on suggested use [](https://github.com/salesforce-ux/design-system-react/blob/master/CONTRIBUTING.md#concepts-and-best-practices) You will want this if Popover is to be a controlled component.\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * This function is passed onto the triggering `Button`. Triggered when the trigger button is clicked. You will want this if Popover is to be a controlled component.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * This function is triggered when the dialog is closed. This occurs when the Dialog child component (that is the actual popover) is unmounted and removed from the DOM. This function returns `{event, { trigger, componentWillUnmount }`. Trigger can have the values `cancel`, `clickOutside`, or `newPopover`.\n		 */\n		onClose: PropTypes.func,\n		/**\n		 * Called when a key is pressed.\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Called when mouse clicks down on the trigger button.\n		 */\n		onMouseDown: PropTypes.func,\n		/**\n		 * This function is triggered when the Dialog child component (that is the actual popover) is mounted and added to the DOM. The parameters are `event, { portal: }`. `portal` can be used as a React tree root node.\n		 */\n		onOpen: PropTypes.func,\n		/**\n		 * This function is triggered when the user clicks outside the Popover or clicks the close button. You will want to define this if Popover is to be a controlled component. Most of the time you will want to set `isOpen` to `false` when this is triggered unless you need to validate something.\n		 */\n		onRequestClose: PropTypes.func,\n		/**\n		 * Callback that returns an element or React `ref` to align the Popover with. If the target element has not been rendered yet, the popover will use the triggering element as the attachment target instead. NOTE: `position="relative"` is not compatible with custom targets that are not the triggering element.\n		 */\n		onRequestTargetElement: PropTypes.func,\n		/**\n		 * Please select one of the following:\n		 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n		 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n		 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing. NOTE: this setting is not compatible with custom targets outside the trigger\n		 */\n		position: PropTypes.oneOf([\n			'absolute',\n			'overflowBoundaryElement',\n			'relative',\n		]),\n		/**\n		 * Used with `walkthrough` variant to provide the step text (ex: "Step 1 of 4") for a walkthrough popover footer. If used with `variant="walkthrough-action"`, it will be placed in the popover body.\n		 */\n		stepText: PropTypes.string,\n		/**\n		 * An object of CSS styles that are applied to the `slds-popover` DOM element.\n		 */\n		style: PropTypes.object,\n		/**\n		 * If `true`, adds a transparent overlay when the menu is open to handle outside clicks. Allows clicks on iframes to be captured, but also forces a double-click to interact with other elements. If a function is passed, custom overlay logic may be defined by the app.\n		 */\n		overlay: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n		/**\n		 * CSS classes to be added to wrapping trigger `div` around the button.\n		 */\n		triggerClassName: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Determines the type of the popover. `error` and `warning` allows the  content body to scroll. Default is `base` _Tested with snaphots._\n		 */\n		variant: PropTypes.oneOf([\n			'base',\n			'error',\n			'feature',\n			'walkthrough',\n			'walkthrough-action',\n			'warning',\n		]),\n	}
/Users/vu/forks/design-system-react/components/location-map/index.jsx:19:propTypes = {\n	/**\n	 * CSS class names to be added with `slds-map` class. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	classNameContainer: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 *  Accepts location object that will be shown if no location has been selected. Required\n	 *  * `id` : A unique identifier string for the location\n	 *  * `name` : Name of the location\n	 *  * `address` : Address of the location\n	 */\n	defaultLocation: PropTypes.shape({\n		id: PropTypes.string.isRequired,\n		name: PropTypes.string.isRequired,\n		address: PropTypes.string.isRequired,\n	}).isRequired,\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 *  Labels\n	 *  * `title` - Title for the LocationMap component.\n	 */\n	labels: PropTypes.shape({\n		title: PropTypes.string,\n	}),\n	/**\n	 * Array of locations objects for the LocationMap component.**\n	 * Each location object can contain:\n	 *  * `id` : A unique identifier string for the location\n	 *  * `name` : Name of the location\n	 *  * `address` : Address of the location\n	 */\n	locations: PropTypes.arrayOf(\n		PropTypes.shape({\n			id: PropTypes.string.isRequired,\n			name: PropTypes.string.isRequired,\n			address: PropTypes.string.isRequired,\n		})\n	).isRequired,\n	/**\n	 * Callback function triggered when a location is selected\n	 */\n	onClickLocation: PropTypes.func,\n	/**\n	 * Accepts a Google Map API Key that will be used for showing the map\n	 */\n	googleAPIKey: PropTypes.string.isRequired,\n	/**\n	 *  Accepts location object that will be shown when selected\n	 *  * `id` : A unique identifier string for the location\n	 *  * `name` : Name of the location\n	 *  * `address` : Address of the location\n	 */\n	selection: PropTypes.shape({\n		id: PropTypes.string.isRequired,\n		name: PropTypes.string.isRequired,\n		address: PropTypes.string.isRequired,\n	}),\n}
/Users/vu/forks/design-system-react/components/files/private/file-actions.jsx:69:propTypes = {\n	/**\n	 *  Action to be done on clicking download button; doesnt show download button if empty\n	 */\n	onClickDownload: PropTypes.func,\n	/**\n	 *  Dropdown for More Actions; doesn't show More actions button if empty\n	 */\n	moreActionsDropdown: PropTypes.node,\n	/**\n	 *  Labels for the file component\n	 */\n	hasNoVisibleTitle: PropTypes.bool,\n}
/Users/vu/forks/design-system-react/components/utilities/pill/index.jsx:18:propTypes = {\n	/**\n	 * Pill is the actively focused pill within a pill container. This will request focus on the DOM node.\n	 */\n	active: PropTypes.bool,\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `pressDeleteOrBackspace`: Informs user of keyboard keys to press in order to remove a pill\n	 */\n	assistiveText: PropTypes.shape({\n		remove: PropTypes.string,\n	}),\n	/**\n	 * SLDSAvatar component to show on the left of the pill.\n	 * _Tested with Mocha framework._\n	 */\n	avatar: PropTypes.element,\n	/**\n	 * Applies the bare style to the component.\n	 * _Tested with Mocha framework._\n	 */\n	bare: PropTypes.bool,\n	/*\n	 * Pills are often used for selection of a type of entity such as days in a daypicker. This prop allows you to pass in data that will be passed back to the event handler.\n	 */\n	eventData: PropTypes.object,\n	/*\n	 * Callbacks for various pill events such as click, focus, etc\n	 */\n	events: PropTypes.shape({\n		onClick: PropTypes.func,\n		onFocus: PropTypes.func,\n		onRequestFocus: PropTypes.func.isRequired,\n		onRequestFocusOnNextPill: PropTypes.func.isRequired,\n		onRequestFocusOnPreviousPill: PropTypes.func.isRequired,\n		onRequestRemove: PropTypes.func.isRequired,\n	}),\n	/**\n	 * Applies the error style to the component.\n	 * _Tested with Mocha framework._\n	 */\n	hasError: PropTypes.bool,\n	/*\n	 * The icon next to the pill label.\n	 */\n	icon: PropTypes.element,\n	/*\n	 * Pill Label\n	 */\n	labels: PropTypes.shape({\n		label: PropTypes.string.isRequired,\n		removeTitle: PropTypes.string,\n	}),\n	/*\n	 * If true and is active pill in listbox, will trigger `events.onRequestFocus`\n	 */\n	requestFocus: PropTypes.bool,\n	/*\n	 * Pill Title\n	 */\n	title: PropTypes.string,\n	/*\n	 * Allows the user to tab to the node\n	 */\n	tabIndex: PropTypes.number,\n}
/Users/vu/forks/design-system-react/components/files/private/file-figure.jsx:60:propTypes = {\n	assistiveText: PropTypes.shape({\n		image: PropTypes.string,\n	}),\n	/**\n	 *  Whether the file figure is loading\n	 */\n	isLoading: PropTypes.bool,\n	/**\n	 *  Image/Figure for the file\n	 */\n	image: PropTypes.string,\n	/**\n	 *  Labels for the file figure component\n	 */\n	labels: PropTypes.shape({\n		title: PropTypes.string.isRequired,\n	}),\n}
/Users/vu/forks/design-system-react/components/input/index.jsx:59:propTypes = {\n		/**\n		 * The aria-activedescendant attribute contains the ID of the currently active child object that is part of a composite widget within the Document Object Model. It makes do with the overhead of having all or more than one child focusable. As the name specifies, it helps in managing the current active child of the composite widget.\n		 */\n		'aria-activedescendant': PropTypes.string,\n		/**\n		 * Indicates if the suggestions in a composite widget are values that complete the current textbox input.\n		 */\n		'aria-autocomplete': PropTypes.string,\n		/**\n		 * An HTML ID that is shared with ARIA-supported devices with the\n		 * `aria-controls` attribute in order to relate the input with\n		 * another region of the page. An example would be a select box\n		 * that shows or hides a panel.\n		 */\n		'aria-controls': PropTypes.string,\n		/**\n		 * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.\n		 */\n		'aria-describedby': PropTypes.string,\n		/**\n		 * Use the `aria-expanded` state to indicate whether regions of the content are collapsible, and to expose whether a region is currently expanded or collapsed.\n		 */\n		'aria-expanded': PropTypes.bool,\n		/**\n		 * Indicates that the element has a popup context menu or sub-level menu.\n		 */\n		'aria-haspopup': PropTypes.bool,\n		/**\n		 * The aria-labelledby attribute contains the element IDs of labels in objects such as input elements, widgets, and groups. The attribute establishes relationships between objects and their labels. Assistive technology, such as screen readers, use this attribute to catalog the objects in a document so that users can navigate between them. Without an element ID, the assistive technology cannot catalog the object.\n		 */\n		'aria-labelledby': PropTypes.string,\n		/**\n		 * An HTML ID that is shared with ARIA-supported devices with the\n		 * `aria-controls` attribute in order to relate the input with\n		 * another region of the page. An example would be a search field\n		 * that shows search results.\n		 */\n		'aria-owns': PropTypes.string,\n		/**\n		 * The `aria-required` attribute is used to indicate that user input is required on an element before a form can be submitted.\n		 */\n		'aria-required': PropTypes.bool,\n		/**\n		 * **Assistive text for accessibility**\n		 * * `label`: Visually hidden label but read out loud by screen readers.\n		 * * `spinner`: Text for loading spinner icon.\n		 */\n		assistiveText: PropTypes.shape({\n			label: PropTypes.string,\n			spinner: PropTypes.string,\n		}),\n		/**\n		 * Disabled brower's autocomplete when "off" is used.\n		 */\n		autoComplete: PropTypes.string,\n		/**\n		 * Elements are added after the `input`.\n		 */\n		children: PropTypes.node,\n		/**\n		 * Class names to be added to the outer container of the input.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * This is the initial value of an uncontrolled form element and\n		 * is present only to provide compatibility with hybrid framework\n		 * applications that are not entirely React. It should only be used\n		 * in an application without centralized state (Redux, Flux).\n		 * "Controlled components" with centralized state is highly recommended.\n		 * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n		 */\n		defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n		/**\n		 * Disables the input and prevents editing the contents.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * Message to display when the input is in an error state. When this is present, also visually highlights the component as in error.\n		 */\n		errorText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		/**\n		 * A [Tooltip](https://react.lightningdesignsystem.com/components/tooltips/) component that is displayed next to the label.\n		 */\n		fieldLevelHelpTooltip: PropTypes.node,\n		/**\n		 * Displays text or node to the left of the input. This follows the fixed text input UX pattern.\n		 */\n		fixedTextLeft: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		/**\n		 * Displays text or node to the right of the input. This follows the fixed text input UX pattern.\n		 */\n		fixedTextRight: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		/**\n		 * If true, loading spinner appears inside input on right hand side.\n		 */\n		hasSpinner: PropTypes.bool,\n		/**\n		 * Left aligned icon, must be instace of `design-system-react/components/icon/input-icon`\n		 */\n		iconLeft: PropTypes.node,\n		/**\n		 * Right aligned icon, must be instace of `design-system-react/components/icon/input-icon`\n		 */\n		iconRight: PropTypes.node,\n		/**\n		 * Every input must have a unique ID in order to support keyboard navigation and ARIA support.\n		 */\n		id: PropTypes.string,\n		/**\n		 * Displays help text under the input.\n		 */\n		inlineHelpText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		/**\n		 * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />\n		 */\n		inputRef: PropTypes.func,\n		/**\n		 * Displays the value of the input statically. This follows the static input UX pattern.\n		 */\n		isStatic: PropTypes.bool,\n		/**\n		 * This label appears above the input.\n		 */\n		label: PropTypes.string,\n		/**\n		 * Triggered when focus is removed.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * This callback fires when the input changes. Passes in `event, { value }`.\n		 */\n		onChange: PropTypes.func,\n		/**\n		 * This event fires when the input is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Triggered when component is focused.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Similar to `onchange`. Triggered when an element gets user input.\n		 */\n		onInput: PropTypes.func,\n		/**\n		 * Triggered when a submittable `<input>` element is invalid.\n		 */\n		onInvalid: PropTypes.func,\n		/**\n		 * Triggered when a key is pressed down\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Triggered when a key is pressed and released\n		 */\n		onKeyPress: PropTypes.func,\n		/**\n		 * Triggered when a key is released\n		 */\n		onKeyUp: PropTypes.func,\n		/**\n		 * Triggered after some text has been selected in an element.\n		 */\n		onSelect: PropTypes.func,\n		/**\n		 * Fires when a form is submitted.\n		 */\n		onSubmit: PropTypes.func,\n		/**\n		 * Text that will appear in an empty input.\n		 */\n		placeholder: PropTypes.string,\n		/**\n		 * Sets the minimum number of characters that an `<input>` can accept.\n		 */\n		minLength: PropTypes.string,\n		/**\n		 * Specifies minimum accepted value for a counter input\n		 */\n		minValue: PropTypes.number,\n		/**\n		 * Sets the maximum number of characters that an `<input>` can accept.\n		 */\n		maxLength: PropTypes.string,\n		/**\n		 * Specifies maximum accepted value for a counter input\n		 */\n		maxValue: PropTypes.number,\n		/**\n		 * Name of the submitted form parameter.\n		 */\n		name: PropTypes.string,\n		/**\n		 * Displays the value of the input as read-only. This is used in the inline edit UX pattern.\n		 */\n		readOnly: PropTypes.bool,\n		/**\n		 * Highlights the input as a required field (does not perform any validation).\n		 */\n		required: PropTypes.bool,\n		/**\n		 * ARIA role\n		 */\n		role: PropTypes.string,\n		/**\n		 * Determines the step size upon increment or decrement. Can be set to decimal values.\n		 */\n		step: PropTypes.number,\n		/**\n		 * styles to be added to input\n		 */\n		styleInput: PropTypes.object,\n		/**\n		 * Custom styles to be passed to the component container\n		 */\n		styleContainer: PropTypes.object,\n		/**\n		 * The `<Input>` element includes support for all HTML5 types.\n		 */\n		type: PropTypes.oneOf([\n			'text',\n			'password',\n			'datetime',\n			'datetime-local',\n			'date',\n			'month',\n			'time',\n			'week',\n			'number',\n			'email',\n			'url',\n			'search',\n			'tel',\n			'color',\n		]),\n		/**\n		 * The input is a controlled component, and will always display this value.\n		 */\n		value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n		/**\n		 * Which UX pattern of input? The default is `base` while other option is `counter`\n		 */\n		variant: PropTypes.oneOf(['base', COUNTER]),\n	}
/Users/vu/forks/design-system-react/components/utilities/menu-list/item-label.jsx:27:propTypes = {\n	data: PropTypes.object,\n	icon: PropTypes.node,\n	index: PropTypes.number,\n	inverted: PropTypes.bool,\n	isSelected: PropTypes.bool,\n	label: PropTypes.string,\n	value: PropTypes.any,\n}
/Users/vu/forks/design-system-react/components/files/more-files.jsx:18:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 *  * count - description for the more files count\n	 *  * image - description for the image\n	 *  * link - description for the more files link\n	 */\n	assistiveText: PropTypes.shape({\n		count: PropTypes.string,\n		image: PropTypes.string,\n		link: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Controls different cropping aspect ratios for the component\n	 */\n	crop: PropTypes.oneOf(['16-by-9', '4-by-3', '1-by-1']),\n	/**\n	 * Link to thumbnail image\n	 */\n	image: PropTypes.string,\n	/**\n	 * Controls the number of additional files that is displayed\n	 */\n	count: PropTypes.string,\n	/**\n	 * Href attribute for image\n	 */\n	href: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/utilities/menu-list/item.jsx:36:propTypes = {\n		'aria-disabled': PropTypes.bool,\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		checkmark: PropTypes.bool,\n		data: PropTypes.object,\n		divider: PropTypes.oneOf(['top', 'bottom']),\n		href: PropTypes.string,\n		id: PropTypes.string.isRequired,\n		index: PropTypes.number.isRequired,\n		inverted: PropTypes.bool,\n		isSelected: PropTypes.bool,\n		label: PropTypes.string,\n		labelRenderer: PropTypes.func,\n		leftIcon: PropTypes.shape({\n			category: PropTypes.string,\n			name: PropTypes.string,\n		}),\n		onSelect: PropTypes.func.isRequired,\n		rightIcon: PropTypes.shape({\n			category: PropTypes.string,\n			name: PropTypes.string,\n		}),\n		tooltipContent: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		tooltipTemplate: PropTypes.node,\n		type: PropTypes.string,\n		value: PropTypes.any,\n	}
/Users/vu/forks/design-system-react/components/app-launcher/tile.jsx:26:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * * `dragIconText`: Text that describes the purpose of the drag handle icon.\n	 */\n	assistiveText: PropTypes.shape({\n		dragIconText: PropTypes.string,\n	}),\n	/**\n	 * Class names to be added to the tile.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * The description of the app. Not visible on small tiles.\n	 */\n	description: PropTypes.string,\n	/**\n	 * Heading for app description. NOTE: this prop is DEPRECATED and use should be avoided\n	 */\n	descriptionHeading: PropTypes.string,\n	/**\n	 * The `href` attribute of the tile. Please pass in bookmarkable URLs from your routing library. If the `onClick` callback is specified this URL will be prevented from changing the browser's location.\n	 */\n	href: PropTypes.string,\n	/**\n	 * Background color to be used on the icon. Only applied if iconNode is undefined\n	 */\n	iconBackgroundColor: PropTypes.string,\n	/**\n	 * Icon node for app tile. Takes priority over `iconText`\n	 */\n	iconNode: PropTypes.node,\n	/**\n	 * Text to be used as an icon. Only renders if iconNode is undefined\n	 */\n	iconText: PropTypes.string,\n	/**\n	 * Open the More Tooltip\n	 */\n	isOpenTooltip: PropTypes.bool,\n	/**\n	 * The localized text for the "More information" tooltip.\n	 */\n	moreLabel: PropTypes.string,\n	/**\n	 * Function that will be executed when clicking on a tile\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Text used to highlight content in app tiles\n	 */\n	search: PropTypes.string,\n	/**\n	 * App name for the tile's title.\n	 */\n	title: PropTypes.string.isRequired,\n\n	// Future feature: add Highlighter to Truncate text (https://github.com/ShinyChang/React-Text-Truncate/issues/32)\n}
/Users/vu/forks/design-system-react/components/app-launcher/expandable-section.jsx:40:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * * `toggleSection`: Label for the icon that expands / collapses the section\n		 */\n		assistiveText: PropTypes.shape({\n			toggleSection: PropTypes.string,\n		}),\n		/**\n		 * Contents of the section\n		 */\n		children: PropTypes.node,\n		/**\n		 * Class names to be added to the `slds-section` classed node\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Unique identifier for the expandable section. The id is automatically generated if not provided\n		 */\n		id: PropTypes.string,\n		/**\n		 * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * Specifies whether the section can be expanded or collapsed. Defaults to `false`\n		 */\n		nonCollapsible: PropTypes.bool,\n		/**\n		 * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.\n		 */\n		onToggleOpen: PropTypes.func,\n		/**\n		 * The title for the section\n		 */\n		title: PropTypes.string.isRequired,\n	}
/Users/vu/forks/design-system-react/components/utilities/menu-list/index.jsx:28:propTypes = {\n		/**\n		 * Determines whether or not to show a checkmark for selected items.\n		 */\n		checkmark: PropTypes.bool,\n		/**\n		 * CSS classes to be added to `<ul />`.\n		 */\n		className: PropTypes.string,\n		/**\n		 * Used internally to determine the id that will be used for list items.\n		 */\n		getListItemId: PropTypes.func,\n		/**\n		 * Used internally to pass references to the individual menu items back up for focusing / scrolling.\n		 */\n		itemRefs: PropTypes.func,\n		/**\n		 * If provided, this function will be used to render the contents of each menu item.\n		 */\n		itemRenderer: PropTypes.func,\n		/**\n		 * Sets the height of the list based on the numeber of items.\n		 */\n		length: PropTypes.oneOf([null, '5', '7', '10', 5, 7, 10]),\n		/**\n		 * Triggered when a list item is selected (via mouse or keyboard).\n		 */\n		onSelect: PropTypes.func,\n		/**\n		 * An array of items to render in the list.\n		 */\n		options: PropTypes.array,\n		/**\n		 * The index of the currently selected item in the list.\n		 */\n		selectedIndex: PropTypes.number,\n		/**\n		 * Accepts a `Tooltip` component to be used as the template for menu item tooltips that appear via the `tooltipContent` options object attribute\n		 */\n		tooltipMenuItem: PropTypes.node,\n		/**\n		 * The id of the element which triggered this list (in a menu context).\n		 */\n		triggerId: PropTypes.string,\n	}
/Users/vu/forks/design-system-react/components/input/private/inner-input.jsx:17:propTypes = {\n	'aria-activedescendant': PropTypes.string,\n	'aria-autocomplete': PropTypes.string,\n	/**\n	 * An HTML ID that is shared with ARIA-supported devices with the\n	 * `aria-controls` attribute in order to relate the input with\n	 * another region of the page. An example would be a select box\n	 * that shows or hides a panel.\n	 */\n	'aria-controls': PropTypes.string,\n	'aria-describedby': PropTypes.string,\n	'aria-expanded': PropTypes.bool,\n	'aria-haspopup': PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n	'aria-labelledby': PropTypes.string,\n	/**\n	 * An HTML ID that is shared with ARIA-supported devices with the\n	 * `aria-controls` attribute in order to relate the input with\n	 * another region of the page. An example would be a search field\n	 * that shows search results.\n	 */\n	'aria-owns': PropTypes.string,\n	'aria-required': PropTypes.bool,\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `spinner`: Assistive text on the spinner.\n	 */\n	assistiveText: PropTypes.shape({\n		spinner: PropTypes.string,\n	}),\n	/**\n	 * Disabled brower's autocomplete when "off" is used.\n	 */\n	autoComplete: PropTypes.string,\n	/**\n	 * Class names to be added to the `input` element.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Class names to be added to the outer container `div` of the input.\n	 */\n	containerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Props to be added to the outer container `div` of the input (excluding `containerClassName`).\n	 */\n	containerProps: PropTypes.object,\n	/**\n	 * Disables the input and prevents editing the contents.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Displays text or node to the left of the input. This follows the fixed text input UX pattern.\n	 */\n	fixedTextLeft: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * Displays text or node to the right of the input. This follows the fixed text input UX pattern.\n	 */\n	fixedTextRight: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * If true, loading spinner appears inside input on right hand side.\n	 */\n	hasSpinner: PropTypes.bool,\n	/**\n	 * Left aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n	 */\n	iconLeft: PropTypes.node,\n	/**\n	 * Right aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n	 */\n	iconRight: PropTypes.node,\n	/**\n	 * Every input must have a unique ID in order to support keyboard navigation and ARIA support.\n	 */\n	id: PropTypes.string.isRequired,\n	/**\n	 * Displays help text under the input.\n	 */\n	inlineHelpText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />\n	 */\n	inputRef: PropTypes.func,\n	/**\n	 * Displays the value of the input statically. This follows the static input UX pattern.\n	 */\n	isStatic: PropTypes.bool,\n	/**\n	 * This label appears above the input.\n	 */\n	label: PropTypes.string,\n	onBlur: PropTypes.func,\n	/**\n	 * This callback fires when the input changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * This event fires when the input is clicked.\n	 */\n	onClick: PropTypes.func,\n	onFocus: PropTypes.func,\n	onInput: PropTypes.func,\n	onInvalid: PropTypes.func,\n	onKeyDown: PropTypes.func,\n	onKeyPress: PropTypes.func,\n	onKeyUp: PropTypes.func,\n	onSelect: PropTypes.func,\n	onSubmit: PropTypes.func,\n	/**\n	 * Text that will appear in an empty input.\n	 */\n	placeholder: PropTypes.string,\n	minLength: PropTypes.string,\n	/**\n	 * Specifies minimum accepted value for an input of type "number"\n	 */\n	minValue: PropTypes.number,\n	maxLength: PropTypes.string,\n	/**\n	 * Specifies maximum accepted value for an input of type "number"\n	 */\n	maxValue: PropTypes.number,\n	/**\n	 * Name of the submitted form parameter.\n	 */\n	name: PropTypes.string,\n	/**\n	 * Specifies `readOnly` for `input` node.\n	 */\n	readOnly: PropTypes.bool,\n	/**\n	 * Highlights the input as a required field (does not perform any validation).\n	 */\n	required: PropTypes.bool,\n	/**\n	 * `role` to be added to `input` node\n	 */\n	role: PropTypes.string,\n	/**\n	 * Determines the step size upon increment or decrement. Can be set to decimal values.\n	 */\n	step: PropTypes.number,\n	/**\n	 * Style object to be added to `input` node\n	 */\n	style: PropTypes.object,\n	/**\n	 * Specifies `tabIndex` for `input` node\n	 */\n	tabIndex: PropTypes.string,\n	/**\n	 * The `<Input>` element includes support for all HTML5 types.\n	 */\n	type: PropTypes.oneOf([\n		'text',\n		'password',\n		'datetime',\n		'datetime-local',\n		'date',\n		'month',\n		'time',\n		'week',\n		'number',\n		'email',\n		'url',\n		'search',\n		'tel',\n		'color',\n	]),\n	/**\n	 * The input is a controlled component, and will always display this value.\n	 */\n	value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n	/**\n	 * Which UX pattern of input? The default is `base` while other option is `counter`\n	 */\n	variant: PropTypes.oneOf(['base', COUNTER]),\n	/**\n	 * This is the initial value of an uncontrolled form element and is present only to provide\n	 * compatibility with hybrid framework applications that are not entirely React. It should only\n	 * be used in an application without centralized state (Redux, Flux). "Controlled components"\n	 * with centralized state is highly recommended.\n	 * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n	 */\n	defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}
/Users/vu/forks/design-system-react/components/combobox/combobox.jsx:46:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n	 * * `loading`: Text added to loading spinner.\n	 * * `optionSelectedInMenu`: Added before selected menu items in Read-only variants (Picklists). The default is `Current Selection:`.\n	 * * `popoverLabel`: Used by popover variant, assistive text for the Popover aria-label.\n	 * * `removeSingleSelectedOption`: Used by inline-listbox, single-select variant to remove the selected item (pill). This is a button with focus. The default is `Remove selected option`.\n	 * * `removePill`: Used by multiple selection Comboboxes to remove a selected item (pill). Focus is on the pill. This is not a button. The default  is `, Press delete or backspace to remove`.\n	 * * `selectedListboxLabel`: This is a label for the selected listbox. The grouping of pills for multiple selection Comboboxes. The default is `Selected Options:`.\n	 * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n		loadingMenuItems: PropTypes.string,\n		optionSelectedInMenu: PropTypes.string,\n		popoverLabel: PropTypes.string,\n		removeSingleSelectedOption: PropTypes.string,\n		removePill: PropTypes.string,\n		selectedListboxLabel: PropTypes.string,\n	}),\n	/**\n	 * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them.\n	 * This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need. _Tested with snapshot testing._\n	 */\n	'aria-describedby': PropTypes.string,\n	/**\n	 * CSS classes to be added to tag with `.slds-combobox`. Uses `classNames` [API](https://github.com/JedWatson/classnames). _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes to be added to top level tag with `.slds-form-element` and not on `.slds-combobox_container`. Uses `classNames` [API](https://github.com/JedWatson/classnames). _Tested with snapshot testing._\n	 */\n	classNameContainer: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes to be added to tag with `.slds-dropdown`. Uses `classNames` [API](https://github.com/JedWatson/classnames). Autocomplete/bass variant menu height should not scroll and should be determined by number items which should be no more than 10. _Tested with snapshot testing._\n	 */\n	classNameMenu: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes to be added to tag with `.slds-dropdown__header`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	classNameMenuSubHeader: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Event Callbacks\n	 * * `onBlur`: Called when `input` removes focus.\n	 * * `onChange`: Called when keyboard events occur within `input`\n	 * * `onClose`: Triggered when the menu has closed.\n	 * * `onFocus`: Called when `input` receives focus.\n	 * * `onOpen`: Triggered when the menu has opened.\n	 * * `onRequestClose`: Function called when the menu would like to hide. Please use with `isOpen`.\n	 * * `onRequestOpen`:  Function called when the menu would like to show. Please use with `isOpen`.\n	 * * `onRequestRemoveSelectedOption`: Function called when a single selection option is to be removed.\n	 * * `onSelect`: Function called when a menu item is selected. This includes header and footer items.\n	 * * `onSubmit`: Function called when user presses enter or submits the `input`\n	 * _Tested with Mocha testing._\n	 */\n	events: PropTypes.shape({\n		onBlur: PropTypes.func,\n		onChange: PropTypes.func,\n		onClose: PropTypes.func,\n		onFocus: PropTypes.func,\n		onOpen: PropTypes.func,\n		onRequestClose: PropTypes.func,\n		onRequestOpen: PropTypes.func,\n		onRequestRemoveSelectedOption: PropTypes.func,\n		onSelect: PropTypes.func,\n		onSubmit: PropTypes.func,\n	}),\n	/**\n	 * Message to display when the input is in an error state. When this is present, also visually highlights the component as in error. _Tested with snapshot testing._\n	 */\n	errorText: PropTypes.string,\n	/**\n	 * A [Tooltip](https://react.lightningdesignsystem.com/components/tooltips/) component that is displayed next to the `labels.label`. The props from the component will be merged and override any default props.\n	 */\n	fieldLevelHelpTooltip: PropTypes.node,\n	/**\n	 * If true, loading spinner appears inside input on right hand side.\n	 */\n	hasInputSpinner: PropTypes.bool,\n	/**\n	 * Add loading spinner below the options\n	 */\n	hasMenuSpinner: PropTypes.bool,\n	/**\n	 * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n	 */\n	hasStaticAlignment: PropTypes.bool,\n	/**\n	 * HTML id for component. _Tested with snapshot testing._\n	 */\n	id: PropTypes.string,\n	/**\n	 * An [Input](https://react.lightningdesignsystem.com/components/inputs) component.\n	 * The props from this component will override any default props.\n	 */\n	input: PropTypes.node,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: This label appears above the input.\n	 * * `cancelButton`: This label is only used by the dialog variant for the cancel button in the footer of the dialog. The default is `Cancel`\n	 * * `doneButton`: This label is only used by the dialog variant for the done button in the footer of the dialog. The default is `Done`\n	 * * `multipleOptionsSelected`: This label is used by the readonly variant when multiple options are selected. The default is `${props.selection.length} options selected`. This will override the entire string.\n	 * * `noOptionsFound`: Custom message that renders when no matches found. The default empty state is just text that says, 'No matches found.'.\n	 * * `placeholder`: Input placeholder\n	 * * `placeholderReadOnly`: Placeholder for Picklist-like Combobox\n	 * * `removePillTitle`: Title on `X` icon\n	 * _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		multipleOptionsSelected: PropTypes.string,\n		noOptionsFound: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n		placeholder: PropTypes.string,\n		placeholderReadOnly: PropTypes.string,\n		removePillTitle: PropTypes.string,\n	}),\n	/**\n	 * Forces the dropdown to be open or closed. See controlled/uncontrolled callback/prop pattern for more on suggested use view [Concepts and Best Practices](https://github.com/salesforce-ux/design-system-react/blob/master/CONTRIBUTING.md#concepts-and-best-practices) _Tested with snapshot testing._\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * Sets the dialog width to the width of one of the following:\n	 * * `target`: Sets the dialog width to the width of the target. (Menus attached to `input` typically follow this UX pattern),\n	 * * `menu`: Consider setting a `menuMaxWidth` if using this value. If not, width will be set to width of largest menu item.\n	 * * `none`: Does not set a width on the dialog. _Tested with snapshot testing._\n	 */\n	inheritWidthOf: PropTypes.oneOf(['target', 'menu', 'none']),\n	/**\n	 * Accepts a custom menu item rendering function that becomes a custom component. It should return a React node. The checkmark is still rendered in readonly variants. This function is passed the following props:\n	 * * `assistiveText`: Object, `assistiveText` prop that is passed into Combobox\n	 * * `option`: Object, option data for item being rendered that is passed into Combobox\n	 * * `selected`: Boolean, allows rendering of `assistiveText.optionSelectedInMenu` in Readonly Combobox\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	onRenderMenuItem: PropTypes.func,\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	menuPosition: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n	/**\n	 * Sets a maximum width that the menu will be used if `inheritWidthOf` is set to `menu`. (Example: 500px) _Tested with snapshot testing._\n	 *\n	 */\n	menuMaxWidth: PropTypes.string,\n	/**\n	 * Allows multiple selections _Tested with mocha testing._\n	 */\n	multiple: PropTypes.bool,\n	/**\n	 * **Array of item objects in the dropdown menu.**\n	 * Each object can contain:\n	 * * `icon`: An `Icon` component. (not used in read-only variant)\n	 * * `id`: A unique identifier string.\n	 * * `label`: A primary string of text for a menu item or group separator.\n	 * * `subTitle`: A secondary string of text added for clarity. (optional)\n	 * * `type`: 'separator' is the only type currently used\n	 * * `disabled`: Set to true to disable this menu item.\n	 * * `tooltipContent`: Content that is displayed in tooltip when item is disabled\n	 * ```\n	 * {\n	 * 	id: '2',\n	 * 	label: 'Salesforce.com, Inc.',\n	 * 	subTitle: 'Account • San Francisco',\n	 * 	type: 'account',\n	 *  disabled: true,\n	 *  tooltipContent: "You don't have permission to select this item."\n	 * },\n	 * ```\n	 * Note: At the moment, Combobox does not support two consecutive separators. _Tested with snapshot testing._\n	 */\n	options: PropTypes.arrayOf(\n		PropTypes.PropTypes.shape({\n			id: PropTypes.string.isRequired,\n			icon: PropTypes.node,\n			label: PropTypes.string,\n			subTitle: PropTypes.string,\n			type: PropTypes.string,\n			disabled: PropTypes.boolean,\n			tooltipContent: PropTypes.node,\n		})\n	),\n	/**\n	 * Determines the height of the menu based on SLDS CSS classes. This is a `number`. The default for a `readonly` variant is `5`.\n	 */\n	menuItemVisibleLength: PropTypes.oneOf([5, 7, 10]),\n	/**\n	 * Limits auto-complete input submission to one of the provided options. _Tested with mocha testing._\n	 */\n	predefinedOptionsOnly: PropTypes.bool,\n	/**\n	 * A `Popover` component. The props from this popover will be merged and override any default props. This also allows a Combobox's Popover dialog to be a controlled component. _Tested with snapshot testing._\n	 */\n	popover: PropTypes.node,\n	/**\n	 * Applies label styling for a required form element. _Tested with snapshot testing._\n	 */\n	required: PropTypes.bool,\n	/**\n	 * Accepts an array of item objects. For single selection, pass in an array of one object. For item object keys, see `options` prop. _Tested with snapshot testing._\n	 */\n	selection: PropTypes.arrayOf(\n		PropTypes.PropTypes.shape({\n			id: PropTypes.string.isRequired,\n			icon: PropTypes.node,\n			label: PropTypes.string,\n			subTitle: PropTypes.string,\n			type: PropTypes.string,\n		})\n	).isRequired,\n	/**\n	 * This callback exposes the selected listbox reference / DOM node to parent components.\n	 */\n	selectedListboxRef: PropTypes.func,\n	/**\n	 * Disables the input and prevents editing the contents. This only applies for single readonly and inline-listbox variants.\n	 */\n	singleInputDisabled: PropTypes.bool,\n	/**\n	 * Accepts a tooltip that is displayed when hovering on disabled menu items.\n	 */\n	tooltipMenuItemDisabled: PropTypes.element,\n	/**\n	 * Value of input. _This is a controlled component,_ so you will need to control the input value by passing the `value` from `onChange` to a parent component or state manager, and then pass it back into the componet with this prop. Please see examples for more clarification. _Tested with snapshot testing._\n	 */\n	value: PropTypes.string,\n	/**\n	 * Changes styles of the input and menu. Currently `entity` is not supported.\n	 * The options are:\n	 * * `base`: An autocomplete Combobox also allows a user to select an option from a list, but that list can be affected by what the user types into the input of the Combobox. The SLDS website used to call the autocomplete Combobox its `base` variant.\n	 * * `inline-listbox`: An Entity Autocomplete Combobox or Lookup, is used to search for and select Salesforce Entities.\n	 * * `popover`: A dialog Combobox is best used when a listbox, tree, grid, or tree-grid is not the best solution. This variant allows custom content.\n	 * * `readonly`: A readonly text input that allows a user to select an option from a pre-defined list of options. It does not allow free form user input, nor does it allow the user to modify the selected value.\n	 *\n	 *  _Tested with snapshot testing._\n	 */\n	/**\n	 * Default value of input. Provide uncontroled behaviour\n	 */\n	defaultValue: PropTypes.string,\n	/**\n	 * **Array of item objects in the dropdown menu that is displayed below the list of `options`. `onSelect` fires when selected.**\n	 * Each object can contain:\n	 * * `id`: A unique identifier string.\n	 * * `icon`: An [Icon](/components/icons/) component to be displayed to the left of the menu item `label`.\n	 * * `label`: A primary string of text for a menu item or a function that receives `inputValue` as function parameter and returns text to be displayed in for a menu item.\n	 * ```\n	 * {\n	 * 	id: '1',\n	 * 	icon: (\n	 *  	<Icon\n	 * 			assistiveText={{ label: 'add' }}\n	 * 			category="utility"\n	 * 			size="x-small"\n	 * 			name="add"\n	 * 		/>\n	 * 	),\n	 * 	label: 'New Entity'\n	 * }\n	 * ```\n	 * _Tested with snapshot testing._\n	 */\n	optionsAddItem: PropTypes.arrayOf(\n		PropTypes.shape({\n			id: PropTypes.string,\n			icon: PropTypes.node,\n			label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n		})\n	),\n	/**\n	 * **Array of item objects in the dropdown menu that is displayed above the list of `options`. `onSelect` fires when selected. **\n	 * Each object can contain:\n	 * * `id`: A unique identifier string.\n	 * * `icon`: An [Icon](/components/icons/) component to be displayed to the left of the menu item `label`.\n	 * * `label`: A primary string of text for a menu item or a function that receives `inputValue` as function parameter and returns text to be displayed in for a menu item.\n	 * ```\n	 * {\n	 *	id: '1',\n	 *	icon: (\n	 *		<Icon\n	 *			assistiveText={{ label: 'Add in Accounts' }}\n	 *			size="x-small"\n	 *			category="utility"\n	 *			name="search"\n	 *		/>\n	 *	),\n	 *	label: (searchTerm) => {\n	 *		return `${searchTerm} in Accounts`;\n	 *	},\n	 * }\n	 * ```\n	 * _Tested with snapshot testing._\n	 */\n	optionsSearchEntity: PropTypes.arrayOf(\n		PropTypes.shape({\n			id: PropTypes.string,\n			icon: PropTypes.node,\n			label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n		})\n	),\n	/**\n	 * Node of type [Combobox](/components/comboboxes/) for creating grouped comboboxes.\n	 */\n	entityCombobox: PropTypes.node,\n	/**\n	 * Defines Combobox variant styling and functionality\n	 */\n	variant: PropTypes.oneOf(['base', 'inline-listbox', 'popover', 'readonly']),\n}
/Users/vu/forks/design-system-react/components/menu-dropdown/button-trigger.jsx:33:propTypes = {\n		/**\n		 * Import the module `design-system-react/dropdown/button-trigger` and render a grandchild of the element type `Button`. Any `props` specified on that `Button` will be assigned to the triggering button. Any `id` prop or event hanlders (`onBlur`, `onClick`, etc.) set on the button grandchild will be overwritten by `MenuDropdown` to allow functionality and accessibility.\n		 * ```\n		 * <Dropdown>\n		 *   <Trigger>\n		 *   <Button iconCategory="utility" iconName="settings" />\n		 *   </Trigger>\n		 * </Dropdown>\n		 * ```\n		 */\n		children: PropTypes.element,\n		/**\n		 * CSS classes to be added to triggering button.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button. This is provided by the `MenuDropdown`. Please use `MenuDropdown` to set.\n		 */\n		id: PropTypes.string,\n		/**\n		 * Informs the trigger on the open/close state of the dropdown menu\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * By Default the dropdown menu is inside a `Dialog` component.\n		 */\n		menu: PropTypes.node,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering button loses focus.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * This prop is passed onto the triggering `Button`. Triggered when the trigger button is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering button gains focus.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Called when a key pressed.\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Called when mouse clicks down on the trigger button.\n		 */\n		onMouseDown: PropTypes.func,\n		/**\n		 * Called when mouse hovers over the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n		 */\n		onMouseEnter: PropTypes.func,\n		/**\n		 * Called when mouse hover leaves the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n		 */\n		onMouseLeave: PropTypes.func,\n		/**\n		 * Determines if mouse hover or click opens the dropdown menu. The default of `click` is highly recommended to comply with accessibility standards. If you are planning on using hover, please pause a moment and reconsider.\n		 */\n		openOn: PropTypes.oneOf(['hover', 'click', 'hybrid']),\n		/**\n		 * The ref of the actual triggering button.\n		 */\n		triggerRef: PropTypes.func,\n		/**\n		 * CSS classes to be added to wrapping trigger `div` around the button.\n		 */\n		triggerClassName: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n	}
/Users/vu/forks/design-system-react/components/notification/index.jsx:13:propTypes = {\n	iconCategory: PropTypes.string,\n	/**\n	 * Custom classes applied to Notification element.\n	 */\n	className: PropTypes.string,\n	/**\n	 * Message for Notification.\n	 */\n	content: PropTypes.node.isRequired,\n	/**\n	 * If true, close button appears for users to dismiss Notification.\n	 */\n	dismissible: PropTypes.bool,\n	/**\n	 * If duration exists, the Notification will disappear after that amount of time.\n	 */\n	duration: PropTypes.number,\n	/**\n	 * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lighning Design System Icons</a> to reference icon names.\n	 */\n	iconName: PropTypes.string,\n	isOpen: PropTypes.bool.isRequired,\n	onDismiss: PropTypes.func,\n	/**\n	 * Styling for Notification background.\n	 */\n	texture: PropTypes.bool,\n	/**\n	 * Styling for Notification background color. Please reference <a href='http://www.lightningdesignsystem.com/components/utilities/themes/#color'>Lighning Design System Themes > Color</a>.\n	 */\n	theme: PropTypes.oneOf(['success', 'warning', 'error', 'offline']),\n	variant: PropTypes.oneOf(['alert', 'toast']).isRequired,\n}
/Users/vu/forks/design-system-react/components/app-launcher/section.jsx:50:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `collapseSection`: The assistive text for the section collapse icons.\n		 */\n\n		assistiveText: PropTypes.shape({\n			collapseSection: PropTypes.string,\n		}),\n		/**\n		 * The title for this section of apps\n		 */\n\n		title: PropTypes.string.isRequired,\n		/**\n		 * Allows the user to show/hide the section\n		 */\n\n		toggleable: PropTypes.bool,\n		/**\n		 * An array of applications to display\n		 */\n\n		children: PropTypes.node.isRequired,\n		/**\n		 * Controls the open/closed state of the section\n		 */\n\n		isOpen: PropTypes.bool,\n		/**\n		 * Callback for when section is toggled. Passes "isOpen" bool. Forces `toggleable` to true\n		 */\n\n		onToggleClick: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/time-picker/private/dropdown-trigger.jsx:32:propTypes = {\n		/**\n		 * Icon for right side of trigger\n		 */\n		iconRight: PropTypes.node,\n		/**\n		 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering input.\n		 */\n		id: PropTypes.string,\n		/**\n		 * This label appears above the input.\n		 */\n		label: PropTypes.string,\n		/**\n		 * The dropdown menu.\n		 */\n		menu: PropTypes.node,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering input loses focus.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * This prop is passed onto the triggering `Input`. Triggered when the trigger input is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering input gains focus.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Called when a key pressed.\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Called when mouse clicks down on the trigger input.\n		 */\n		onMouseDown: PropTypes.func,\n		/**\n		 * The ref of the actual triggering input.\n		 */\n		triggerRef: PropTypes.func,\n		/**\n		 * Date\n		 */\n		value: PropTypes.string,\n	}
/Users/vu/forks/design-system-react/components/utilities/dialog/index.jsx:57:propTypes = {\n		/**\n		 * Alignment of the dialog with respect to the target (assuming left-to-right language direction). For example,\n		 * a value of 'left bottom' indicates that the dialog will be rendered below and left-aligned with the target.\n		 * Note that setting the direction prop to "rtl" will flip the resulting dialog alignment.\n		 */\n		align: PropTypes.oneOf([\n			'top',\n			'top left',\n			'top right',\n			'right',\n			'right top',\n			'right bottom',\n			'bottom',\n			'bottom left',\n			'bottom right',\n			'left',\n			'left top',\n			'left bottom',\n		]),\n		/**\n		 * CSS classes to be added to the absolutely positioned element.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * CSS classes to be added to the wrapping `div` of the contents of the dialog.\n		 */\n		contentsClassName: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Contents of dialog\n		 */\n		children: PropTypes.node.isRequired,\n		/**\n		 * Closes dialog when tab key is pressed\n		 */\n		closeOnTabKey: PropTypes.bool,\n		/**\n		 * Props passed along to wrapping div. This allows one less wrapping `div` to be in the markup. dialog children are expected to be wrapper in a single `div`.\n		 */\n		containerProps: PropTypes.object,\n		/**\n		 * Establishes directional context for component. Defaults to left-to-right.\n		 */\n		direction: PropTypes.oneOf([DIRECTIONS.LTR, DIRECTIONS.RTL]),\n		/**\n		 * Will show the nubbin pointing from the dialog to the reference element. Positioning and offsets will be handled.\n		 */\n		hasNubbin: PropTypes.bool,\n		/**\n		 * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements.\n		 */\n		hasStaticAlignment: PropTypes.bool,\n		/**\n		 * Sets the dialog width to the width of either 'target' (Menus attached to `input` typically follow this UX pattern), 'menu' or 'none.\n		 */\n		inheritWidthOf: PropTypes.oneOf(['target', 'menu', 'none']),\n		/**\n		 * DEPRECATED - do not add checkProp deprecation message at this level. It is handled at higher level components.\n		 * TODO - to be removed.\n		 * Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px). SHOULD BE OBJECT -----------\n		 */\n		offset: PropTypes.string,\n		/**\n		 * Called when dialog closes and unmounts.\n		 */\n		onClose: PropTypes.func,\n		/**\n		 * Called when a key pressed.\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Called when mouse hovers over the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n		 */\n		onMouseEnter: PropTypes.func,\n		/**\n		 * Called when mouse hover leaves the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n		 */\n		onMouseLeave: PropTypes.func,\n		/**\n		 * Called when dialog opens (that is mounts). The parameters are `undefined, { portal: this.portal }`.\n		 */\n		onOpen: PropTypes.func,\n		/**\n		 * React component to be aligned with. Function should return a DOM `ref` from the parent component.\n		 */\n		onRequestTargetElement: PropTypes.func.isRequired,\n		/**\n		 * Triggered when an item in the menu is clicked.\n		 */\n		outsideClickIgnoreClass: PropTypes.string,\n		/**\n		 * If a dialog is `positione="overflowBoundaryElement"`, it will be rendered in a portal or separate render tree. This `portalMount` callback will be triggered instead of the the default `ReactDOM.unstable_renderSubtreeIntoContainer` and the function will mount the portal itself. Consider the following code that bypasses the internal mount and uses an Enzyme wrapper to mount the React root tree to the DOM.\n		 *\n		 * ```\n		 * <Popover\n		 *   isOpen\n		 *   portalMount={({ instance, reactElement, domContainerNode }) => {\n		 *     portalWrapper = Enzyme.mount(reactElement, { attachTo: domContainerNode });\n		 *   }}\n		 *   onOpen={() => {\n		 *     expect(portalWrapper.find(`#my-heading`)).to.exist;\n		 *     done();\n		 *   }}\n		 *   />\n		 * ```\n		 */\n		portalMount: PropTypes.func,\n		/**\n		 * Please select one of the following:\n		 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n		 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n		 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n		 */\n		position: PropTypes.oneOf([\n			'absolute',\n			'overflowBoundaryElement',\n			'relative',\n		]).isRequired,\n		/**\n		 * An object of CSS styles that are applied to the immediate parent `div` of the contents. Use this instead of margin props.\n		 */\n		style: PropTypes.object,\n\n		/**\n		 * Sets which focus UX pattern to follow. For instance, popovers trap focus and must be exited to regain focus. Dropdowns and Tooltips never have focus.\n		 */\n		variant: PropTypes.oneOf(['dropdown', 'popover', 'tooltip']),\n	}
/Users/vu/forks/design-system-react/components/media-object/index.jsx:33:propTypes = {\n		/**\n		 * Often the body may need to be truncated for correct layout. This is only applicable if using the component within a flexbox container.\n		 */\n		canTruncate: PropTypes.bool,\n		/**\n		 * Class names to be added to the component's HTML tag with `slds-media` class.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * The body is often text such as a heading or paragraph.\n		 */\n		body: PropTypes.node,\n		/**\n		 * The figure is the optional visualization of the text within the body.\n		 */\n		figure: PropTypes.node,\n		/**\n		 * Vertically centers the body with the middle of the figure.\n		 */\n		verticalCenter: PropTypes.bool,\n	}
/Users/vu/forks/design-system-react/components/app-launcher/index.jsx:63:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `trigger`: This is a visually hidden label for the app launcher icon.\n		 */\n		assistiveText: PropTypes.shape({\n			trigger: PropTypes.string,\n		}),\n		/**\n		 * Boolean indicating if the appElement should be hidden.\n		 */\n		ariaHideApp: PropTypes.bool,\n		/**\n		 * One or more `<AppLauncherExpandableSection />`s, each containing one or more `<AppLauncherTile />`s or `<AppLauncherLink />`s\n		 */\n		children: PropTypes.node.isRequired,\n		/**\n		 * The app launcher id. If not provided, one will be generated for accessibility\n		 */\n		id: PropTypes.string,\n		/**\n		 * Control the open/close state of the App Launcher\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * CSS classes to be added to App Launcher Modal.\n		 */\n		modalClassName: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Button that exists in the upper right hand corner of the App Launcher modal\n		 */\n		modalHeaderButton: PropTypes.node,\n		/**\n		 * Allows longer application names without truncating them.\n		 */\n		noTruncate: PropTypes.bool,\n		/**\n		 * Callback when the App Launcher Modal is closed\n		 */\n		onClose: PropTypes.func,\n		/**\n		 * Search bar for the Modal's header. Will typically be an instance of `design-system-react/input/search`\n		 */\n		search: PropTypes.node,\n		/**\n		 * Set the App Launcher's title text (for localization)\n		 */\n		title: PropTypes.string,\n		/**\n		 * This is typically the name of the cloud or application\n		 */\n		triggerName: PropTypes.node,\n		/**\n		 * Callback when the App Launcher icon is clicked\n		 */\n		triggerOnClick: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/panel/index.jsx:48:propTypes = {\n	/**\n	 * The contents of the panel\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to `slds-panel`.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * The type of panel\n	 */\n	variant: PropTypes.oneOf(['filters']),\n}
/Users/vu/forks/design-system-react/components/app-launcher/link.jsx:32:propTypes = {\n		/**\n		 * Contents of the link\n		 */\n		children: PropTypes.node,\n		/**\n		 * Classes to be applied to the link\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * The `href` attribute of the link. If the `onClick` callback is specified this URL will be prevented from changing the browser's location.\n		 */\n		href: PropTypes.string,\n		/**\n		 * Callback for when the link is clicked. Passes back event and data object with href prop. Prevents click from changing browser's location if set.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Text used to highlight content in link\n		 */\n		search: PropTypes.string,\n		/**\n		 * The title for the link. If not provided it will attempt to use child content if that content is a string.\n		 */\n		title: PropTypes.string,\n	}
/Users/vu/forks/design-system-react/components/welcome-mat/index.jsx:23:propTypes = {\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Whether the modal is open\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * **Weclome Mat labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `title`: Title for the Welcome Mat\n	 * * `description`: Label for the radio input\n	 * * `unitsCompletedAfter`: Label for the radio input\n	 */\n	labels: PropTypes.shape({\n		title: PropTypes.string,\n		description: PropTypes.string,\n		unitsCompletedAfter: PropTypes.string,\n	}),\n	/**\n	 *	Variant of the WelcomeMat\n	 */\n	variant: PropTypes.oneOf([\n		'steps',\n		'info-only',\n		'splash',\n		'trailhead-connected',\n	]),\n	/**\n	 * Link to learn more button\n	 */\n	onRenderInfoActions: PropTypes.func,\n	/**\n	 * Callback to fire when modal is dismissed\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 *  Accepts a single WelcomeMatInfoBadge component, to be used with the trailhead variant\n	 */\n	infoBadge: PropTypes.node,\n	/**\n	 *  Do not show again checkbox for info-only variant\n	 */\n	doNotShowAgainCheckbox: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/data-table/index.jsx:73:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `actionsHeader`: Text for heading of actions column\n		 * * `columnSort`: Text for sort action on table column header\n		 * * `columnSortedAscending`: Text announced once a column is sorted in ascending order\n		 * * `columnSortedDescending`: Text announced once a column is sorted in descending order\n		 * * `selectAllRows`: Text for select all checkbox within the table header\n		 * * `selectRow`: Text for select row. Default: "Select row 1"\n		 * * `selectRowGroup`: This is an input group label and is attached to each checkbox or radio. Default is "Choose a row to select"\n		 */\n		assistiveText: PropTypes.shape({\n			actionsHeader: PropTypes.string,\n			columnSort: PropTypes.string,\n			columnSortedAscending: PropTypes.string,\n			columnSortedDescending: PropTypes.string,\n			selectAllRows: PropTypes.string,\n			selectRow: PropTypes.string,\n			selectRowGroup: PropTypes.string,\n		}),\n		/**\n		 * Provide children of the type `<DataTableColumn />` to define the structure of the data being represented and children of the type `<DataTableRowActions />` to define a menu which will be rendered for each item in the grid. Use a _higher-order component_ to customize a data table cell that will override the default cell rendering. `CustomDataTableCell` must have the same `displayName` as `DataTableCell` or it will be ignored. If you want complete control of the HTML, including the wrapping `td`, you don't have to use `DataTableCell`.\n		 * ```\n		 * import DataTableCell from 'design-system-react/data-table/cell';\n		 * const CustomDataTableCell = ({ children, ...props }) => (\n		 *   <DataTableCell {...props} >\n		 *   <a href="javascript:void(0);">{children}</a>\n		 *   </DataTableCell>\n		 * );\n		 * CustomDataTableCell.displayName = DataTableCell.displayName;\n		 *\n		 * <DataTable>\n		 *   <DataTableColumn />\n		 *   <DataTableColumn>\n		 *   <DataTableCustomCell />\n		 *   </DataTableColumn>\n		 *   <DataTableRowActions />\n		 * </DataTable>\n		 * ```\n		 */\n		children: PropTypes.node,\n		/**\n		 * Class names to be added to the table.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * A variant which adds border to the vertical columns.\n		 */\n		columnBordered: PropTypes.bool,\n		/**\n		 * Use this to enable fixed headers and scrolling columns / rows. Appearance / behavior is consistent only if used in combination with `fixedLayout`. Since scrolling is enabled, columns are not truncated unless a width is set. Due to `overflow:hidden` elements, any dialog components will need a separate render tree (portal) such as with `menuPosition: overflowBoundaryElement` in order to break out of the container.\n		 */\n		fixedHeader: PropTypes.bool,\n		/**\n		 * Use this if you are creating an advanced table (selectable, sortable, or resizable rows). Columns widths will be truncate based on width and DOM ancestors. See `fixedHeader` to enable horizontal and vertical scrolling.\n		 */\n		fixedLayout: PropTypes.bool,\n		/**\n		 * A unique ID is needed in order to support keyboard navigation and ARIA support.\n		 */\n		id: PropTypes.string,\n		/**\n		 * The collection of items to render in the table. This is an array of objects with each object having keys that correspond with the  `property` prop of each `DataTableColumn`.\n		 *\n		 * Use the key `classNameRow` to add a custom class to the item's `<tr>` element.\n		 */\n		items: PropTypes.arrayOf(\n			PropTypes.shape({\n				id: PropTypes.string.isRequired,\n				classNameRow: PropTypes.string,\n			})\n		).isRequired,\n		/**\n		 * Makes DataTable joinable with PageHeader by adding appropriate classes/styling\n		 */\n		joined: PropTypes.bool,\n		/**\n		 * A variant which removes hover style on rows\n		 */\n		noRowHover: PropTypes.bool,\n		/**\n		 * By default this function resizes the display headers when fixedHeader is `true`, but this behavior can be overridden. Passes an event and a data object with properties `headerRefs`, an array of DOM nodes referencing the `thead th` elements and `scrollerRef`, a DOM node referencing `.slds-table_header-fixed_scroller`\n		 */\n		onFixedHeaderResize: PropTypes.func,\n		/**\n		 * This function fires when the selection of rows changes. This component passes in `event, { selection }` to the function. `selection` is an array of objects from the `items` prop.\n		 *\n		 * This used to be `onChange` which is deprecated now, so that the parameters can be consistent with other components. `onChange` passed in the selection first and the event wtihout a data object.\n		 */\n		onRowChange: PropTypes.func,\n		/**\n		 * This function fires when the table should be sorted.\n		 */\n		onSort: PropTypes.func,\n		/**\n		 * By default this function attaches/detaches listeners for window resize and tbody scrolling when fixedHeader is `true`, but this behavior can be overridden. Passes an event and a data object with an `attach` boolean property to determine whether listeners should be attached, a `resizeHandler` function property that can be called as-needed, and a `scrollerRef` DOM node property that serves as a reference to `.slds-table_header-fixed_scroller`\n		 */\n		onToggleFixedHeaderListeners: PropTypes.func,\n		/**\n		 * An array of objects of selected rows. See `items` prop for shape of objects.\n		 */\n		selection: PropTypes.array,\n		/**\n		 * Specifies a row selection UX pattern.\n		 * * `checkbox`: Multiple row selection.\n		 * * `radio`: _Required_ single row selection.\n		 * _This prop used to be a `boolean`, a `true` value will be considered `checkbox` for backwards compatibility._\n		 */\n		selectRows: PropTypes.oneOfType([\n			PropTypes.bool,\n			PropTypes.oneOf(['checkbox', 'radio']),\n		]),\n		/**\n		 * A variant which modifies table layout by stacking cells to accommodate smaller viewports. Should not be used at the same time as `stackedHorizontal`.\n		 */\n		stacked: PropTypes.bool,\n		/**\n		 * A variant which modifies table layout by displaying the header and row data side by side for smaller viewports. Should not be used at the same time as `stacked`.\n		 */\n		stackedHorizontal: PropTypes.bool,\n		/**\n		 * A variant which adds stripes to alternating rows.\n		 */\n		striped: PropTypes.bool,\n		/**\n		 * Custom styles to be passed to the table.\n		 * NOTE: for horizontal scrolling in `fixedHeader`-enabled DataTables, apply a `minWidth` style here. If the containing element width is less than the `minWidth` value, horizontal scrolling will occur\n		 */\n		style: PropTypes.object,\n		/**\n		 * Tables have horizontal borders by default. This removes them.\n		 */\n		unborderedRow: PropTypes.bool,\n		/**\n		 * A variant which removes horizontal padding. CSS class will be removed if `fixedLayout==true`.\n		 */\n		unbufferedCell: PropTypes.bool,\n	}
/Users/vu/forks/design-system-react/components/panel/filtering/group.jsx:111:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `closeButton`: Localized description of the close button for the panel for screen readers\n	 */\n	assistiveText: PropTypes.shape({\n		closeButton: PropTypes.string,\n	}),\n	/**\n	 * Localized description of the "Add Filter" button in the footer\n	 */\n	addFilterLabel: PropTypes.node,\n	/**\n	 * Label for button that cancels modified filters\n	 */\n	cancelLabel: PropTypes.string,\n	/**\n	 * Pass in `FilterList`'s of `Filters`:\n	 *\n	 * ```\n	 * <FilterGroup\n	 *   variant="panel"\n	 * >\n	 *   <FilterList>\n	 *   <Filter\n	 *     property="Show Me"\n	 *     predicate="All Wackamoles"\n	 *   >\n	 *   {popoverContents}\n	 *   </Filter>\n	 *   </FilterList>\n	 * </FilterGroup>\n	 * ```\n	 */\n	children: PropTypes.node,\n	/**\n	 * Label for the error message at the top of the panel.\n	 */\n	errorLabel: PropTypes.string,\n	/**\n	 * Allows for customization of footer. This will be added after any `FilterList`'s in the DOM. If using Panel Filter Group outside of a panel, do not set the variant to `panel` and header and footer will be removed.\n	 */\n	footer: PropTypes.node,\n	/**\n	 * Allows for customization of header. This will be added before any `FilterList`'s in the DOM. If using Panel Filter Group outside of a panel, do not set the variant to `panel` and header and footer will be removed.\n	 */\n	header: PropTypes.node,\n	/**\n	 * The heading within the header of the filtering panel\n	 */\n	heading: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * Shows confirmation heading. Please see `onRequestCancel` and `onRequestSave`.\n	 */\n	modified: PropTypes.bool,\n	/**\n	 * Callback triggered when "Add Filter" is clicked. Recieves an `event`.\n	 */\n	onClickAdd: PropTypes.func,\n	/**\n	 * Callback triggered when "Remove All" is clicked. Recieves an `event`.\n	 */\n	onClickRemoveAll: PropTypes.func,\n	/**\n	 * When the panel's cancel button is clicked in order to reset filter panel to previous state.\n	 */\n	onRequestCancel: PropTypes.func,\n	/**\n	 * When the panel's close button is clicked. Please place Panel within another element to control position and visibility.\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 * When the panel's save button is clicked in order to confirm filter panel state.\n	 */\n	onRequestSave: PropTypes.func,\n	/**\n	 * Localized description of the "Remove All" button in the footer\n	 */\n	removeAllLabel: PropTypes.node,\n	/**\n	 * Label for button that saves modified filters\n	 */\n	saveLabel: PropTypes.string,\n	/**\n	 * Adds in default Panel header and footer\n	 */\n	variant: PropTypes.oneOf(['panel']),\n}
/Users/vu/forks/design-system-react/components/panel/filtering/list-heading.jsx:47:propTypes = {\n	/**\n	 * Heading for following PanelFilterList\n	 */\n	heading: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * Displayed a heading for a locked list of filters\n	 */\n	isLocked: PropTypes.bool,\n	/**\n	 * Heading for a group of filters that are locked\n	 */\n	lockedHeading: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/utilities/dialog/portal.jsx:141:propTypes = {\n	/*\n	 * What tag to use for the portal, defaults to `div`.\n	 */\n	renderTag: PropTypes.string,\n	/*\n	 * What node the portal is rendered to, defaults to `document.body`.\n	 */\n	renderTo: PropTypes.any,\n	/*\n	 * React id prop.\n	 */\n	id: PropTypes.string,\n	/*\n	 * Accepts a _single_ element or component.\n	 */\n	children: PropTypes.node,\n	/*\n	 * ClassName added to .\n	 */\n	className: PropTypes.any,\n	/*\n	 * An object of styles that are applied to the portal.\n	 */\n	style: PropTypes.object,\n	/*\n	 * Triggers when Portal render tree mounts. Pass in an undefined event and `{ portal: [node] }``\n	 */\n	onMount: PropTypes.func,\n	/*\n	 * Triggers when the portal is mounted.\n	 */\n	onOpen: PropTypes.func,\n	/*\n	 * Triggers when Portal re-renders its tree.\n	 */\n	onUpdate: PropTypes.func,\n	/**\n	 * If a dialog is `positione="overflowBoundaryElement"`, it will be rendered in a portal or separate render tree. This `portalMount` callback will be triggered instead of the the default `ReactDOM.unstable_renderSubtreeIntoContainer` and the function will mount the portal itself. Consider the following code that bypasses the internal mount and uses an Enzyme wrapper to mount the React root tree to the DOM.\n	 *\n	 * ```\n	 * <Popover\n	 *   isOpen\n	 *   portalMount={({ instance, reactElement, domContainerNode }) => {\n	 *     portalWrapper = Enzyme.mount(reactElement, { attachTo: domContainerNode });\n	 *   }}\n	 *   onOpen={() => {\n	 *     expect(portalWrapper.find(`#my-heading`)).to.exist;\n	 *     done();\n	 *   }}\n	 * />\n	 * ```\n	 */\n	portalMount: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/panel/filtering/private/panel-footer.jsx:39:propTypes = {\n	/**\n	 * Localized description of the "Add Filter" button in the footer\n	 */\n	addFilterLabel: PropTypes.node.isRequired,\n	/**\n	 * Callback triggered when "Add Filter" is clicked. Recieves an `event`.\n	 */\n	onClickAdd: PropTypes.func.isRequired,\n	/**\n	 * Callback triggered when "Remove All" is clicked. Recieves an `event`.\n	 */\n	onClickRemoveAll: PropTypes.func.isRequired,\n	/**\n	 * Localized description of the "Remove All" button in the footer\n	 */\n	removeAllLabel: PropTypes.node.isRequired,\n}
/Users/vu/forks/design-system-react/components/popover/edit-dialog.jsx:28:propTypes = {\n		/**\n		 * Disables the edit dialog and prevents clicking it.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * By default, a unique ID will be created at render to support keyboard navigation, ARIA roles, and connect the popover to the triggering button. This ID will be applied to the triggering element. `${id}-popover`, `${id}-dialog-heading`, `${id}-dialog-body` are also created.\n		 */\n		id: PropTypes.string,\n		/**\n		 * Set to true when inputs within the popover are modified.\n		 */\n		isModified: PropTypes.bool,\n		/**\n		 * **Text labels for internationalization**\n		 * This object is merged with the default props object on every render.\n		 * * `cancel`: text for Cancel button\n		 * * `save`: text for Save button\n		 *\n		 * _Tested with snapshot testing._\n		 */\n		labels: PropTypes.shape({\n			cancel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n			save: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		}),\n		/**\n		 * This function is passed onto the cancel `Button`. Triggered when the trigger button is clicked.\n		 */\n		onCancel: PropTypes.func,\n		/**\n		 * This function is passed onto the save `Button`. Triggered when the trigger button is clicked.\n		 */\n		onSave: PropTypes.func,\n		/**\n		 * Popover of type `~/components/popover`. This popover will be cloned and additional props appended, if passed in.\n		 */\n		popover: PropTypes.node,\n	}
/Users/vu/forks/design-system-react/components/panel/filtering/private/panel-header.jsx:54:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `closeButton`: Localized description of the close button for the panel for screen readers\n	 */\n	assistiveText: PropTypes.shape({\n		closeButton: PropTypes.string,\n	}),\n	/**\n	 * Label for button that cancels modified filters\n	 */\n	cancelLabel: PropTypes.string,\n	/**\n	 * The heading of the filtering panel\n	 */\n	heading: PropTypes.node,\n	/**\n	 * Shows confirmation heading. Please see `onRequestCancel` and `onRequestSave`.\n	 */\n	modified: PropTypes.bool,\n	/**\n	 * When the panel's cancel button is clicked in order to reset filter panel to previous state.\n	 */\n	onRequestCancel: PropTypes.func,\n	/**\n	 * When the panel's close button is clicked. Please place Panel within another element to control position and visibility.\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 * When the panel's save button is clicked in order to confirm filter panel state.\n	 */\n	onRequestSave: PropTypes.func,\n	/**\n	 * Label for button that saves modified filters\n	 */\n	saveLabel: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/data-table/private/head.jsx:25:propTypes = {\n		assistiveText: PropTypes.shape({\n			actionsHeader: PropTypes.string,\n			columnSort: PropTypes.string,\n			columnSortedAscending: PropTypes.string,\n			columnSortedDescending: PropTypes.string,\n			selectAllRows: PropTypes.string,\n			selectRow: PropTypes.string,\n		}),\n		allSelected: PropTypes.bool,\n		headerRefs: PropTypes.func,\n		indeterminateSelected: PropTypes.bool,\n		canSelectRows: PropTypes.oneOfType([\n			PropTypes.bool,\n			PropTypes.oneOf(['checkbox', 'radio']),\n		]),\n		columns: PropTypes.arrayOf(\n			PropTypes.shape({\n				Cell: PropTypes.func,\n				props: PropTypes.object,\n			})\n		),\n		fixedHeader: PropTypes.bool,\n		id: PropTypes.string,\n		onToggleAll: PropTypes.func,\n		onSort: PropTypes.func,\n		showRowActions: PropTypes.bool,\n	}
/Users/vu/forks/design-system-react/components/utilities/label/index.jsx:9:propTypes = {\n	/*\n	 * Assistive Text to use instead of a visible label\n	 */\n	assistiveText: PropTypes.object,\n	/**\n	 * Class names to be added to the label\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/*\n	 * Id of the input associated with this label\n	 */\n	htmlFor: PropTypes.string,\n	/*\n	 * Input Label\n	 */\n	label: PropTypes.string,\n	/*\n	 * Applies label styling for a required form element\n	 */\n	required: PropTypes.bool,\n	/**\n	 * Changes markup of label.\n	 */\n	variant: PropTypes.oneOf(['base', 'static']),\n}
/Users/vu/forks/design-system-react/components/utilities/utility-icon/index.jsx:87:propTypes = {\n	assistiveText: PropTypes.object,\n	category: PropTypes.oneOf([\n		'action',\n		'custom',\n		'doctype',\n		'standard',\n		'utility',\n	]),\n	/**\n	 * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples\n	 */\n	icon: PropTypes.object,\n	/**\n	 * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n	 */\n	name: PropTypes.string,\n	/**\n	 * Path to the icon. This will override any global icon settings.\n	 */\n	path: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/dynamic-icon/index.jsx:15:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `label`: Used as a visually hidden label to describe the dynamic icon.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the icon.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Pauses the icon animation if the value is true.\n	 */\n	isPaused: PropTypes.bool,\n	/**\n	 * Disables icon animation if set to true\n	 */\n	isStatic: PropTypes.bool,\n	/**\n	 * Polarity values for the 'score' variant. Defaults to 'positive'\n	 */\n	scorePolarity: PropTypes.oneOf(['positive', 'negative']),\n	/**\n	 * Range of strength values for the 'strength' variant. Defaults to '0'.\n	 */\n	strengthLevel: PropTypes.oneOf([\n		'-3',\n		'-2',\n		'-1',\n		'0',\n		'1',\n		'2',\n		'3',\n		-3,\n		-2,\n		-1,\n		0,\n		1,\n		2,\n		3,\n	]),\n	/**\n	 * HTML title attribute.\n	 */\n	title: PropTypes.string.isRequired,\n	/**\n	 * Signals direction for the 'trend' variant. The default value 'neutral' points to the east.\n	 */\n	trendDirection: PropTypes.oneOf(['down', 'up', 'neutral']),\n	/**\n	 * Different types of dynamic icons. Possible variants:\n	 *\n	 * `ellie` - Displays a pulsing blue circle, which pulses and stops after one animation cycle.\n	 * `eq` - Displays an animated graph with three bars that rise and fall randomly.\n	 * `score` - Displays a green filled circle or a red unfilled circle.\n	 * `strength` - Displays three animated horizontal circles that are colored green or red.\n	 * `trend` - Displays animated arrows that point up, down, or straight.\n	 * `waffle` - Displays a 3x3 grid of dots that animates on hover.\n	 */\n	variant: PropTypes.oneOf([\n		'ellie',\n		'eq',\n		'score',\n		'strength',\n		'trend',\n		'typing',\n		'waffle',\n	]).isRequired,\n}
/Users/vu/forks/design-system-react/components/data-table/private/header-cell.jsx:37:propTypes = {\n		assistiveText: PropTypes.shape({\n			actionsHeader: PropTypes.string,\n			columnSort: PropTypes.string,\n			columnSortedAscending: PropTypes.string,\n			columnSortedDescending: PropTypes.string,\n			selectAllRows: PropTypes.string,\n			selectRow: PropTypes.string,\n		}),\n		cellRef: PropTypes.func,\n		fixedHeader: PropTypes.bool,\n		id: PropTypes.string.isRequired,\n		/**\n		 * Some columns, such as "date last viewed" or "date recently updated," should sort descending first, since that is what the user probably wants. How often does one want to see their oldest files first in a table? If sortable and the `DataTable`'s parent has not defined the sort order, then ascending (A at the top to Z at the bottom) is the default sort order on first click.\n		 */\n		isDefaultSortDescending: PropTypes.bool,\n		/**\n		 * Indicates if column is sorted.\n		 */\n		isSorted: PropTypes.bool,\n		/**\n		 * The column label.\n		 */\n		label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		/**\n		 * The function to execute on sort.\n		 */\n		onSort: PropTypes.func,\n		/**\n		 * The property which corresponds to this column.\n		 */\n		property: PropTypes.string,\n		/**\n		 * Whether or not the column is sortable.\n		 */\n		sortable: PropTypes.bool,\n		/**\n		 * The current sort direction.\n		 */\n		sortDirection: PropTypes.oneOf(['desc', 'asc']),\n		/**\n		 * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n		 */\n		width: PropTypes.string,\n	}
/Users/vu/forks/design-system-react/components/forms/private/label.jsx:9:propTypes = {\n	/*\n	 * Assistive Text to use instead of a visible label\n	 */\n	assistiveText: PropTypes.object,\n	/*\n	 * Id of the input associated with this label\n	 */\n	htmlFor: PropTypes.string,\n	/*\n	 * Input Label or inner node for formatting purposes\n	 */\n	label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/*\n	 * Applies label styling for a required form element\n	 */\n	required: PropTypes.bool,\n	/**\n	 * Changes markup of label.\n	 */\n	variant: PropTypes.oneOf(['base', 'static']),\n}
/Users/vu/forks/design-system-react/components/utilities/truncate/index.jsx:31:propTypes = {\n		containerClassName: PropTypes.string,\n		line: PropTypes.number,\n		prefix: PropTypes.string,\n		suffix: PropTypes.string,\n		text: PropTypes.string,\n		textTruncateChild: PropTypes.node,\n		truncateText: PropTypes.string,\n		wrapper: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/menu-dropdown/menu-dropdown.jsx:133:propTypes = {\n	/**\n	 * Aligns the menu center, right, or left respective to the trigger. This is not intended for use with `nubbinPosition`.\n	 */\n	align: PropTypes.oneOf(['center', 'left', 'right']),\n	/**\n	 * This prop is passed onto the triggering `Button`. Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. You can omit this prop if you are using the `label` prop.\n	 */\n	assistiveText: PropTypes.object,\n	/**\n	 * CSS classes to be added to triggering button.\n	 */\n	buttonClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * If true, button/icon is white. Meant for buttons or utility icons on dark backgrounds.\n	 */\n	buttonInverse: PropTypes.bool,\n	/**\n	 * This prop is passed onto the triggering `Button`. Determines variant of the Button component that triggers dropdown.\n	 */\n	buttonVariant: PropTypes.oneOf([\n		'base',\n		'neutral',\n		'brand',\n		'destructive',\n		'icon',\n	]),\n	/**\n	 * If true, renders checkmark icon on the selected Menu Item.\n	 */\n	checkmark: PropTypes.bool,\n	/**\n	 * If you need custom content _and_ a list, use a `<Popover>` instead.\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to dropdown menu.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * By default, these class names will be added to the absolutely-positioned `Dialog` component.\n	 */\n	containerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * This prop is passed onto the triggering `Button`. Prevent dropdown menu from opening. Also applies disabled styling to trigger button.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Prevents the dropdown from changing position based on the viewport/window. If set to true your dropdowns can extend outside the viewport _and_ overflow outside of a scrolling parent. If this happens, you might want to consider making the dropdowns contents scrollable to fit the menu on the screen. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n	 */\n	hasStaticAlignment: PropTypes.bool,\n	/**\n	 * This prop is passed onto the triggering `Button`. Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#hint">Lightning Design System Buttons > Hint</a>.\n	 */\n	hint: PropTypes.bool,\n	/**\n	 * Delay on menu closing in milliseconds.\n	 */\n	hoverCloseDelay: PropTypes.number,\n	/**\n	 * Name of the icon category. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon categories.\n	 */\n	iconCategory: requiredIf(\n		PropTypes.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']),\n		(props) => !!props.iconName\n	),\n	/**\n	 * Name of the icon. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon names.\n	 */\n	iconName: PropTypes.string,\n	/**\n	 * If omitted, icon position is centered.\n	 */\n	iconPosition: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * For icon variants, please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#icon">Lightning Design System Icons</a>.\n	 */\n	iconVariant: PropTypes.oneOf([\n		'bare',\n		'container',\n		'border',\n		'border-filled',\n		'small',\n		'more',\n	]),\n	/**\n	 * Determines the size of the icon.\n	 */\n	iconSize: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n	/**\n	 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Adds inverse class to the dropdown\n	 */\n	inverse: PropTypes.bool,\n	/**\n	 * Forces the dropdown to be open or closed. See controlled/uncontrolled callback/prop pattern for more on suggested use view [Concepts and Best Practices](https://github.com/salesforce-ux/design-system-react/blob/master/CONTRIBUTING.md#concepts-and-best-practices)\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * This prop is passed onto the triggering `Button`. Text within the trigger button.\n	 */\n	label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * Custom element that overrides the default Menu Item component.\n	 */\n	listItemRenderer: PropTypes.func,\n	/**\n	 * This prop is passed into the List for the menu. Pass null to make it the size of the content, or a string with an integer from here: https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height\n	 */\n	length: PropTypes.oneOf([null, '5', '7', '10', 5, 7, 10]),\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	menuPosition: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n	/**\n	 * Style applied to menu element (that is the `.slds-dropdown` element)\n	 */\n	menuStyle: PropTypes.object,\n	/**\n	 * Positions dropdown menu with a nubbin--that is the arrow notch. The placement options correspond to the placement of the nubbin. This is implemeted with CSS classes and is best used with a `Button` with "icon container" styling (`iconVariant="container"`). Use with `isInline` prop, since positioning is determined by CSS via absolute-relative positioning, and using an absolutely positioned menu will not position the menu correctly without manual offsets.\n	 */\n	nubbinPosition: PropTypes.oneOf([\n		'top left',\n		'top',\n		'top right',\n		'bottom left',\n		'bottom',\n		'bottom right',\n	]),\n	/**\n	 * Is only called when `openOn` is set to `hover` and when the triggering button loses focus.\n	 */\n	onBlur: PropTypes.func,\n	/**\n	 * This prop is passed onto the triggering `Button`. Triggered when the trigger button is clicked.\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Is only called when `openOn` is set to `hover` and when the triggering button gains focus.\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * Determines if mouse hover or click opens or closes the dropdown menu. The default of `click` opens the menu on click, touch, or keyboard navigation and is highly recommended to comply with accessibility standards. The other options are `hover` which opens when the mouse enters the focusable area, and `hybrid` which causes the menu to open on clicking of the trigger, but closes the menu when the mouse leaves the menu and trigger area. If you are planning on using `hover` or `hybrid`, please pause a moment and reconsider.\n	 */\n	openOn: PropTypes.oneOf(['hover', 'click', 'hybrid']),\n	/**\n	 * Called when a key pressed.\n	 */\n	onKeyDown: PropTypes.func,\n	/**\n	 * Called when mouse clicks down on the trigger button.\n	 */\n	onMouseDown: PropTypes.func,\n	/**\n	 * Called when mouse hovers over the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n	 */\n	onMouseEnter: PropTypes.func,\n	/**\n	 * Called when mouse hover leaves the trigger button. This is only called if `this.props.openOn` is set to `hover`.\n	 */\n	onMouseLeave: PropTypes.func,\n	/**\n	 * Triggered when an item in the menu is clicked.\n	 */\n	onSelect: PropTypes.func,\n	/**\n	 * Triggered when the dropdown is opened.\n	 */\n	onOpen: PropTypes.func,\n	/**\n	 * Triggered when the dropdown is closed.\n	 */\n	onClose: PropTypes.func,\n	/**\n	 * An array of menu item objects. `className` and `id` object keys are applied to the `li` DOM node. `divider` key can have a value of `top` or `bottom`. `rightIcon` and `leftIcon` are not actually `Icon` components, but prop objects that get passed to an `Icon` component. The `href` key will be added to the `a` and its default click event will be prevented. Here is a sample:\n	 * ```\n	 * [{\n	 *   className: 'custom-li-class',\n	 *     divider: 'bottom',\n	 *     label: 'A Header',\n	 *     type: 'header'\n	 *  }, {\n	 *     href: 'http://sfdc.co/',\n	 *     id: 'custom-li-id',\n	 *     label: 'Has a value',\n	 *   leftIcon: {\n	 *    name: 'settings',\n	 *    category: 'utility'\n	 *   },\n	 *   rightIcon: {\n	 *    name: 'settings',\n	 *    category: 'utility'\n	 *   },\n	 *     type: 'item',\n	 *     value: 'B0'\n	 *  }, {\n	 *   tooltipContent: 'Displays a tooltip when hovered over with this content. The `tooltipMenuItem` prop must be set for this to work.',\n	 *   type: 'divider'\n	 * }]\n	 * ```\n	 */\n	options: PropTypes.array,\n	/**\n	 * An object of CSS styles that are applied to the triggering button.\n	 */\n	style: PropTypes.object,\n	/**\n	 * Write <code>"-1"</code> if you don't want the user to tab to the button.\n	 */\n	tabIndex: PropTypes.string,\n	/**\n	 * If `true`, adds a transparent overlay when the menu is open to handle outside clicks. Allows clicks on iframes to be captured, but also forces a double-click to interact with other elements. If a function is passed, custom overlay logic may be defined by the app.\n	 */\n	overlay: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n	/**\n	 * Current selected menu item.\n	 */\n	value: PropTypes.oneOfType([\n		PropTypes.number,\n		PropTypes.string,\n		PropTypes.array,\n	]),\n	/**\n	 * This prop is passed onto the triggering `Button`. It creates a tooltip with the content of the `node` provided.\n	 */\n	tooltip: PropTypes.node,\n	/**\n	 * Accepts a `Tooltip` component to be used as the template for menu item tooltips that appear via the `tooltipContent` options object attribute. Must be present for `tooltipContent` to work\n	 */\n	tooltipMenuItem: PropTypes.node,\n	/**\n	 * CSS classes to be added to wrapping trigger `div` around the button.\n	 */\n	triggerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Whether this dropdown supports multi select.\n	 */\n	multiple: PropTypes.bool,\n	/**\n	 *  To adjust the width of the menu dropdown\n	 */\n	width: PropTypes.oneOf([\n		'xx-small',\n		'x-small',\n		'small',\n		'medium',\n		'bottom',\n		'large',\n	]),\n}
/Users/vu/forks/design-system-react/components/data-table/private/row.jsx:34:propTypes = {\n		assistiveText: PropTypes.shape({\n			actionsHeader: PropTypes.string,\n			columnSort: PropTypes.string,\n			columnSortedAscending: PropTypes.string,\n			columnSortedDescending: PropTypes.string,\n			selectAllRows: PropTypes.string,\n			selectRow: PropTypes.string,\n		}),\n		canSelectRows: PropTypes.oneOfType([\n			PropTypes.bool,\n			PropTypes.oneOf(['checkbox', 'radio']),\n		]),\n		className: PropTypes.string,\n		columns: PropTypes.arrayOf(\n			PropTypes.shape({\n				Cell: PropTypes.func,\n				props: PropTypes.object,\n			})\n		),\n		/**\n		 * Use this if you are creating an advanced table (selectable, sortable, or resizable rows)\n		 */\n		fixedLayout: PropTypes.bool,\n		id: PropTypes.string.isRequired,\n		item: PropTypes.object.isRequired,\n		onToggle: PropTypes.func,\n		rowActions: PropTypes.element,\n		selection: PropTypes.array,\n		tableId: PropTypes.string,\n	}
/Users/vu/forks/design-system-react/components/radio-button-group/index.jsx:14:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `label`: This label appears in the legend.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * Children are expected to be Radio components.\n	 */\n	children: PropTypes.node.isRequired,\n	/**\n	 * Custom CSS classes added to `slds-radio_button-group` node.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `error`: Message to display when any of Checkboxes are in an error state.\n	 * * `label`: This label appears above the button group.\n	 */\n	labels: PropTypes.shape({\n		error: PropTypes.string,\n		label: PropTypes.string,\n	}),\n	/**\n	 * This event fires when the radio selection changes.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * Disable all radio inputs.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Adds an indicator that this field is required.\n	 */\n	required: PropTypes.bool,\n	/**\n	 * The name of this radio group.\n	 */\n	name: PropTypes.string,\n	/**\n	 * The ID of the error message, for linking to radio inputs with aria-describedby.\n	 */\n	errorId: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/radio/index.jsx:20:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * The ID of an element that describes this radio input. Often used for error messages.\n	 */\n	'aria-describedby': PropTypes.string,\n	/**\n	 * The aria-labelledby attribute establishes relationships between objects and their label(s), and its value should be one or more element IDs, which refer to elements that have the text needed for labeling. List multiple element IDs in a space delimited fashion.\n	 */\n	'aria-labelledby': PropTypes.string,\n	/**\n	 * This is a controlled component. This radio is checked according to this value.\n	 */\n	checked: PropTypes.bool,\n	/**\n	 * Class name to be passed to radio input wrapper ( `span` element)\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * This is the initial value of an uncontrolled form element and is present only to provide compatibility\n	 * with hybrid framework applications that are not entirely React. It should only be used in an application\n	 * without centralized state (Redux, Flux). "Controlled components" with centralized state is highly recommended.\n	 * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n	 */ defaultChecked: PropTypes.bool,\n	/**\n	 * Disable this radio input.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * A unique ID that is used to associating a label to the `input` element. This ID is added to the `input` element.\n	 */\n	id: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `heading`: Heading for the visual picker variant\n	 * * `label`: Label for the radio input\n	 */\n	labels: PropTypes.shape({\n		heading: PropTypes.string,\n		label: PropTypes.string,\n	}),\n	/**\n	 * The name of the radio input group.\n	 */\n	name: PropTypes.string,\n	/**\n	 * This event fires when the radio selection changes. Passes in `event, { checked }`.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * The value of this radio input.\n	 */\n	value: PropTypes.string,\n	/**\n	 * Variant of the Radio button. Base is the default and button-group makes the radio button look like a normal button (should be a child of <RadioButtonGroup>).\n	 */\n	variant: PropTypes.oneOf(['base', 'button-group', 'swatch', 'visual-picker']),\n	/**\n	 * Determines whether visual picker is coverable when selected (only for visual picker variant)\n	 */\n	coverable: PropTypes.bool,\n	/**\n	 * Determines whether the visual picker should be vertical or horizontal (only for visual picker variant)\n	 */\n	vertical: PropTypes.bool,\n	/**\n	 * Allows icon to shown if radio is not selected (only for non-coverable visual picker variant)\n	 */\n	onRenderVisualPicker: PropTypes.func,\n	/**\n	 * Allows icon to shown if radio is not selected (only for visual picker variant)\n	 */\n	onRenderVisualPickerSelected: PropTypes.func,\n	/**\n	 * Allows icon to shown if radio is not selected (only for visual picker variant)\n	 */\n	onRenderVisualPickerNotSelected: PropTypes.func,\n	/**\n	 * Shows description for radio option (only for visual picker variant)\n	 */\n	description: PropTypes.string,\n	/**\n	 * Allows icon to shown if radio is not selected (only for visual picker variant)\n	 */\n	size: PropTypes.oneOf(['medium', 'large']),\n	/**\n	 * Ref callback that will pass in the radio's `input` tag\n	 */\n	refs: PropTypes.shape({\n		input: PropTypes.func,\n	}),\n}
/Users/vu/forks/design-system-react/components/data-table/column.jsx:26:propTypes = {\n	/**\n	 * Use a _higher-order component_ to customize a data table cell that will override the default cell rendering. `CustomDataTableCell` must have the same `displayName` as `DataTableCell` or it will be ignored. If you want complete control of the HTML, including the wrapping `td`, you don't have to use `DataTableCell`.\n	 * ```\n	 * import DataTableCell from 'design-system-react/data-table/cell';\n	 * const CustomDataTableCell = ({ children, ...props }) => (\n	 *   <DataTableCell {...props} >\n	 *     <a href="javascript:void(0);">{children}</a>\n	 *   </DataTableCell>\n	 * );\n	 * CustomDataTableCell.displayName = DataTableCell.displayName;\n	 *\n	 * <DataTable>\n	 *   <DataTableColumn />\n	 *   <DataTableColumn>\n	 *     <DataTableCustomCell />\n	 *   </DataTableColumn>\n	 *   <DataTableRowActions />\n	 * </DataTable>\n	 * ```\n	 */\n	children: PropTypes.element,\n	/**\n	 * Some columns, such as "date last viewed" or "date recently updated," should sort descending first, since that is what the user probably wants. How often does one want to see their oldest files first in a table? If sortable and the `DataTable`'s parent has not defined the sort order, then ascending (A at the top to Z at the bottom) is the default sort order on first click.\n	 */\n	isDefaultSortDescending: PropTypes.bool,\n	/**\n	 * Selects this column as the currently sorted column.\n	 */\n	isSorted: PropTypes.bool,\n	/**\n	 * The column label. If a `string` is not passed in, no `title` attribute will be rendered.\n	 */\n	label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * The primary column for a row. This is almost always the first column.\n	 */\n	primaryColumn: PropTypes.bool,\n	/**\n	 * The property which corresponds to this column.\n	 */\n	property: PropTypes.string,\n	/**\n	 * Whether or not the column is sortable.\n	 */\n	sortable: PropTypes.bool,\n	/**\n	 * The current sort direction. If left out the component will track this internally. Required if `isSorted` is true.\n	 */\n	sortDirection: PropTypes.oneOf(['desc', 'asc']),\n	/**\n	 * Title used for truncation div within the cell.\n	 */\n	title: PropTypes.string,\n	/**\n	 * Adds truncate to cell node.\n	 */\n	truncate: PropTypes.bool,\n	/**\n	 * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n	 */\n	width: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/label.jsx:50:propTypes = {\n	/**\n	 * Class names to be added to the `span` element\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Determines position of separating bar.\n	 */\n	dividerPosition: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * Id string applied to first <span> inside of <li>\n	 */\n	id: PropTypes.string,\n	/**\n	 * Text to show\n	 */\n	label: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/pill-container/index.jsx:14:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `listboxLabel`: This is a label for the listbox. The default is `Selected Options:`.\n	 * * `removePill`: Used to remove a selected item (pill). Focus is on the pill. This is not a button. The default is `Press delete or backspace to remove`.\n	 */\n	assistiveText: PropTypes.shape({\n		listboxLabel: PropTypes.string,\n		removePill: PropTypes.string,\n	}),\n	/**\n	 * CSS classes to be added to the pill container\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for pill container\n	 */\n	id: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * * `removePillTitle`: Title on `X` icon\n	 */\n	labels: PropTypes.shape({\n		removePillTitle: PropTypes.string,\n	}),\n	/**\n	 * **Array of pill objects.**\n	 * Each object can contain:\n	 * * `avatar`: An `Avatar` component.\n	 * * `error`: Adds error styling\n	 * * `icon`: An `Icon` component.\n	 * * `id`: A unique identifier string.\n	 * * `label`: A primary string of text.\n	 * * `title`: Text that appears on mouse hover. Most helpful for long labels.\n	 * ```\n	 * {\n	 * 	id: '2',\n	 * 	label: 'Salesforce.com, Inc.',\n	 * 	title: 'Salesforce.com, Inc. - Want to work here?',\n	 * },\n	 * ```\n	 * `options` with array length of zero will remove this component from the DOM.\n	 */\n	options: PropTypes.arrayOf(\n		PropTypes.shape({\n			avatar: PropTypes.oneOfType([\n				PropTypes.node,\n				PropTypes.shape({\n					imgSrc: PropTypes.string,\n					title: PropTypes.string,\n					variant: PropTypes.string,\n				}),\n			]),\n			bare: PropTypes.bool,\n			error: PropTypes.bool,\n			icon: PropTypes.oneOfType([\n				PropTypes.node,\n				PropTypes.shape({\n					category: PropTypes.string,\n					name: PropTypes.string,\n				}),\n			]),\n			id: PropTypes.string,\n			label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n			title: PropTypes.string,\n		})\n	),\n	/**\n	 * Function called when a pill is clicked\n	 */\n	onClickPill: PropTypes.func,\n	/**\n	 * Function called when a pill is requested to be 'removed' via the delete key or 'X' icon click.\n	 */\n	onRequestRemovePill: PropTypes.func,\n	/**\n	 * Custom style object to be passed to the pill container\n	 */\n	style: PropTypes.object,\n	/**\n	 * Specifies the pill styling at the container level. `bare` removes border styling from all pills.\n	 */\n	variant: PropTypes.oneOf(['base', 'bare']),\n}
/Users/vu/forks/design-system-react/components/forms/input/inline.jsx:32:propTypes = {\n	/**\n	 * Class names to be added to the outer container of the input.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Name of the submitted form parameter.\n	 */\n	name: PropTypes.string,\n	/**\n	 * Disables the Inline Edit component and prevents editing the contents.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Every Inline Edit component must have a unique ID in order to support keyboard navigation and ARIA support.\n	 */\n	id: PropTypes.string.isRequired,\n	/**\n	 * This event fires when the input changes.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * Function will run when keyup during text edit\n	 */\n	onKeyUp: PropTypes.func,\n	/**\n	 * Function will run when we enter edit mode\n	 */\n	onEnterEditMode: PropTypes.func,\n	/**\n	 * Function will run when we leave edit mode\n	 */\n	onLeaveEditMode: PropTypes.func,\n	/**\n	 * Typically an Inline Edit component will be of the type text, but like the Input element it includes support for all HTML5 types.\n	 */\n	type: PropTypes.oneOf([\n		'text',\n		'password',\n		'datetime',\n		'datetime-local',\n		'date',\n		'month',\n		'time',\n		'week',\n		'number',\n		'email',\n		'url',\n		'search',\n		'tel',\n		'color',\n	]),\n	/**\n	 * Inline Edit is a controlled component, and will always display this value.\n	 */\n	value: PropTypes.string.isRequired,\n}
/Users/vu/forks/design-system-react/components/card/empty.jsx:30:propTypes = {\n	/**\n	 * Additional call to actions that will render under the heading. Often this is an "Add Item" button.\n	 */\n	children: PropTypes.node,\n	/**\n	 * Primary text for an Empty Card.\n	 */\n	heading: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/link.jsx:102:propTypes = {\n	/**\n	 * Whether the item is active or not.\n	 */\n	active: PropTypes.bool,\n	/**\n	 * Allows alignment of active item with active application background color. If application background is dark, text color may need to be `#fff`. This can be done with the style prop.\n	 */\n	activeBackgroundColor: PropTypes.string,\n	/**\n	 * **Assistive text for accessibility.**\n	 * * `activeDescriptor`: The text that appears alongside a link that is currently active.\n	 */\n	assistiveText: PropTypes.shape({\n		activeDescriptor: PropTypes.string,\n	}),\n	/**\n	 * Class names to be added to the anchor element\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Determines position of separating bar.\n	 */\n	dividerPosition: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * The `href` attribute of the link. Please pass in bookmarkable URLs from your routing library. Use `GlobalNavigationBarButton` if a "real URL" is not desired. If the `onClick` callback is specified this URL will still be prevented from changing the browser's location.\n	 */\n	href: PropTypes.string,\n	/**\n	 * The `id` attribute is applied to the `li` tag. _This was recently changed from being on the anchor tag._\n	 */\n	id: PropTypes.string,\n	/**\n	 * Text to show for link item.\n	 */\n	label: PropTypes.string,\n	/**\n	 * Triggered when focus is removed.\n	 */\n	onBlur: PropTypes.func,\n	/**\n	 * `function (event, href)` - fires when the link is clicked. If set, the browser location change to the `href` specified will be ignored, but the `href` will be included in an additional parameter passed to the callback.\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Triggered when component is focused.\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * Triggered when a key is pressed down\n	 */\n	onKeyDown: PropTypes.func,\n	/**\n	 * Triggered when a key is pressed and released\n	 */\n	onKeyPress: PropTypes.func,\n	/**\n	 * Triggered when a key is released\n	 */\n	onKeyUp: PropTypes.func,\n	/**\n	 * Triggered when a mouse arrow hovers\n	 */\n	onMouseEnter: PropTypes.func,\n	/**\n	 * Triggered when a mouse arrow no longer hovers\n	 */\n	onMouseLeave: PropTypes.func,\n	/**\n	 * Write "-1" if you don't want the user to tab to the button.\n	 */\n	tabIndex: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/pill/index.jsx:15:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `remove`: This is a visually hidden label for the close button.\n	 * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		remove: PropTypes.string,\n	}),\n	/**\n	 * SLDSAvatar component to show on the left of the pill.\n	 * _Tested with Mocha framework._\n	 */\n	avatar: PropTypes.element,\n	/**\n	 * Applies the bare style to the component.\n	 * _Tested with Mocha framework._\n	 */\n	bare: PropTypes.bool,\n	/**\n	 * This is a way to specify custom contents for the pill in the case a simple text label is not enough.\n	 * _Tested with Mocha framework._\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to tag with `.slds-pill`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 * _Tested with Mocha framework._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Applies the error style to the component.\n	 * _Tested with Mocha framework._\n	 */\n	hasError: PropTypes.bool,\n	/**\n	 * An href to use if the pill is shown as a link.\n	 * _Tested with Mocha framework._\n	 */\n	href: PropTypes.string,\n	/**\n	 * SLDSIcon component to show on the left of the pill.\n	 * _Tested with Mocha framework._\n	 */\n	icon: PropTypes.element,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: Pill's label.\n	 * * `title`: Pill's title.\n	 * * `removeTitle`: A title to use for the remove icon.\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		label: PropTypes.string,\n		title: PropTypes.string,\n		removeTitle: PropTypes.string,\n	}),\n	/**\n	 * `onBlur` callback executes when the component loses focus.\n	 * _Tested with Mocha framework._\n	 */\n	onBlur: PropTypes.func,\n	/**\n	 * `onClick` callback executes when a user clicks on the pill or presses the Enter key.\n	 * _Tested with Mocha framework._\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * `onFocus` callback executes when the component receives focus.\n	 * _Tested with Mocha framework._\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * `onKeyDown` callback executes when a user presses a key.\n	 * _Tested with Mocha framework._\n	 */\n	onKeyDown: PropTypes.func,\n	/**\n	 * `onRemove` callback executes when a user clicks on the pill's remove icon or presses the delete or the backspace keys.\n	 * _Tested with Mocha framework._\n	 */\n	onRemove: PropTypes.func,\n	/**\n	 * A variant of a pill\n	 * _Tested with Mocha framework._\n	 */\n	variant: PropTypes.oneOf(['link', 'option']),\n}
/Users/vu/forks/design-system-react/components/spinner/index.jsx:22:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: Assistive text that is read out loud to screen readers.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * Custom css classes applied to Spinner container\n	 */\n	containerClassName: PropTypes.string,\n	/**\n	 * Custom css properties applied to Spinner container\n	 */\n	containerStyle: PropTypes.object,\n	/**\n	 * Render the spinner inside of a container.\n	 */\n	hasContainer: PropTypes.bool,\n	/**\n	 * Unique html id placed on div with role="status".\n	 */\n	id: PropTypes.string,\n	/**\n	 * Adds delay of 300ms to the spinner\n	 */\n	isDelayed: PropTypes.bool,\n	/**\n	 * Add styling to support a spinner inside an input field.\n	 */\n	isInput: PropTypes.bool,\n	/**\n	 * Add styling to support an inline spinner inside of the document flow.\n	 */\n	isInline: PropTypes.bool,\n	/**\n	 * Determines the size of the spinner\n	 */\n	size: PropTypes.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n	/**\n	 * Determines the color of the spinner: `base` is gray, `brand` is blue, and `inverse` is white.\n	 */\n	variant: PropTypes.oneOf(['base', 'brand', 'inverse']),\n}
/Users/vu/forks/design-system-react/components/carousel/private/auto-play-button.jsx:31:propTypes = {\n	/**\n	 * Description of the start/pause autoplay button for screen-readers.\n	 */\n	assistiveText: PropTypes.string,\n	/**\n	 * Indicates whether autoplay is enabled\n	 */\n	isAutoplayOn: PropTypes.bool,\n	/**\n	 * Triggered when the autoplay button is clicked.\n	 */\n	onClick: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/index.jsx:65:propTypes = {\n	/**\n	 * The items to be displayed in the Global Navigation Bar.\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS class names to be added to the container element.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Typically the cloud name (e.g.- "sales" or "marketing"). This primarily changes the background color.\n	 */\n	cloud: PropTypes.string,\n	/**\n	 * Transforms text and interactions (such as hover) to be more visually accessible.\n	 */\n	theme: PropTypes.oneOf(['light', 'dark']),\n}
/Users/vu/forks/design-system-react/components/badge/index.jsx:80:propTypes = {\n	/**\n	 * CSS classes that are applied to the component\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n\n	/**\n	 * Id of component, if desired. If not provided an id is automatically generated\n	 */\n	id: PropTypes.string,\n\n	/**\n	 * Custom styles to be passed to the component\n	 */\n	style: PropTypes.object,\n\n	/**\n	 * Color variant for the badge component\n	 */\n	color: PropTypes.oneOf(['default', 'inverse', 'light']),\n\n	/**\n	 * Icon alignment for the badge component\n	 */\n	iconAlignment: PropTypes.oneOf(['left', 'right']),\n\n	/**\n	 *  Content to be placed inside the badge component\n	 */\n	content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n}
/Users/vu/forks/design-system-react/components/card/index.jsx:90:propTypes = {\n	/**\n	 * CSS classes to be added to the card body (wraps children).\n	 */\n	bodyClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * The main section of the card. It often contains a `DataTable` or `Tile`.\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to the card.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Replaces the body (that is the children) with the specified empty state, this will also remove header actions, the filter, and the icon. If the default empty state is wanted, set to `true`.\n	 */\n	empty: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n	/**\n	 * Adds a filter input to the card header.\n	 */\n	filter: PropTypes.node,\n	/**\n	 * Footer often contains pagination.\n	 */\n	footer: PropTypes.node,\n	/**\n	 * Allows card to have no header, and ignores header related props altogether.\n	 */\n	hasNoHeader: PropTypes.bool,\n	/**\n	 * Allows a custom header (the media object with the icon in the first column). `icon`, `heading` and other props are passed into the media object from Card if present. Use `design-system-react/components/media-object` to create your own custom header.\n	 */\n	header: PropTypes.node,\n	/**\n	 * The heading is the name of the related item group and should only contain inline elements.\n	 */\n	heading: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n	/**\n	 * Actions to perform on selected items or actions that are not specific to one item such as adding an item. If no group actions are needed, then the number of selected items is often present.\n	 */\n	headerActions: PropTypes.node,\n	/**\n	 * Icon associated with the items within the `body`.\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Set the HTML `id` of the card. This also sets the `id` of the filter and the header actions.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Custom styles to be added to the card.\n	 */\n	style: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/region.jsx:86:propTypes = {\n		/**\n		 * Contents of region. Expects `GlobalNavigationBarLink`, `GlobalNavigationBarDropdown`, `GlobalNavigationBarApplicationName`, `AppSwitcher`, but could be any component. This is the place to pass in an Object Switcher until that is supported.\n		 */\n		children: PropTypes.node,\n		/**\n		 * Determines position of separating bar.\n		 */\n		dividerPosition: PropTypes.oneOf(['left', 'right']),\n		/**\n		 * CSS classes to be added to the region\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Wraps the `secondary` region in a `nav` and adds a role attribute\n		 */\n		navigation: PropTypes.bool,\n		/**\n		 * Region wrap children in styling specific to that region. When `tertiary`\n		 * region is used, secondary region only supports four list items.\n		 */\n		region: PropTypes.oneOf(['primary', 'secondary', 'tertiary']).isRequired,\n	}
/Users/vu/forks/design-system-react/components/progress-ring/index.jsx:34:propTypes = {\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS classes to be added to tag with `.slds-progress-ring`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * The theme applied to the ring.\n	 */\n	theme: PropTypes.oneOf(['active', 'warning', 'expired', 'complete']),\n	/**\n	 * Overrides the icon to be displayed.\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Display the icon associated with the theme.\n	 */\n	hasIcon: PropTypes.bool,\n	/**\n	 * Percentage of progress completion, ranging [0, 100].\n	 */\n	value: PropTypes.number.isRequired,\n	/**\n	 * Direction that the progress ring "flows." Default is counter-clockwise, or `drain`. For clockwise flow, use `fill`\n	 */\n	flowDirection: PropTypes.oneOf(['drain', 'fill']),\n	/**\n	 * Size of the progress ring. Default is 'medium'\n	 */\n	size: PropTypes.oneOf(['medium', 'large']),\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/button.jsx:38:propTypes = {\n	/**\n	 * Whether the item is active or not.\n	 */\n	active: PropTypes.bool,\n	/**\n	 * Determines position of separating bar.\n	 */\n	dividerPosition: PropTypes.oneOf(['left', 'right']),\n}
/Users/vu/forks/design-system-react/components/card/private/body.jsx:23:propTypes = {\n	/**\n	 * Elements to place in the body.\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to the card.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Set the HTML `id` of the body.\n	 */\n	id: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/page-header/control.jsx:11:propTypes = {\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n}
/Users/vu/forks/design-system-react/components/card/filter.jsx:36:propTypes = {\n	/**\n	 * The HTML `id` from the card with a suffixe.\n	 */\n	id: PropTypes.string,\n	/**\n	 * This callback fires when the input changes.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * Text present in input until the user enters text. This text will also be used for a visually hidden label on the filter `input` element for accessibility.\n	 */\n	placeholder: PropTypes.string.isRequired,\n}
/Users/vu/forks/design-system-react/components/progress-ring/private/ring-shape.jsx:12:propTypes = {\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Decimal percentage drain of the ring [0.0 - 1.0]\n	 */\n	fillPercentDecimal: PropTypes.number,\n	/**\n	 * Direction that the progress ring "flows." Default is counter-clockwise, or `drain`. For clockwise flow, use `fill`\n	 */\n	flowDirection: PropTypes.oneOf(['drain', 'fill']),\n	/**\n	 * Size of the progress ring. Default is 'medium'\n	 */\n	size: PropTypes.oneOf(['medium', 'large']),\n}
/Users/vu/forks/design-system-react/components/pill-container/private/selected-listbox.jsx:15:propTypes = {\n	/*\n	 * The option object within the selection prop that should have focus.\n	 */\n	activeOption: PropTypes.object,\n	/*\n	 * The index of the option object within the selection prop that should have focus.\n	 */\n	activeOptionIndex: PropTypes.number,\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n	 * * `removePill`: Aids in keyboard interaction with Pills.\n	 * * `selectedListboxLabel`: Used to identify the listbox\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n		removePill: PropTypes.string,\n		selectedListboxLabel: PropTypes.string,\n	}),\n	/**\n	 * CSS classes to be added to the top-level `div` tag.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/*\n	 * Callbacks for various pill events such as click, focus, etc\n	 */\n	events: PropTypes.shape({\n		onClickPill: PropTypes.func.isRequired,\n		onPillFocus: PropTypes.func.isRequired,\n		onRequestFocus: PropTypes.func.isRequired,\n		onRequestFocusOnNextPill: PropTypes.func.isRequired,\n		onRequestFocusOnPreviousPill: PropTypes.func.isRequired,\n		onRequestRemove: PropTypes.func.isRequired,\n	}),\n	/**\n	 * HTML id for component main container\n	 */\n	id: PropTypes.string,\n	/**\n	 * Determines whether component renders as a bare pill container with associated styling for child pills\n	 */\n	isBare: PropTypes.bool,\n	/**\n	 * Adds inline (inside of input) styling\n	 */\n	isInline: PropTypes.bool,\n	/**\n	 * Determines whether component renders as a pill container with associated styling and behavior\n	 */\n	isPillContainer: PropTypes.bool,\n	/*\n	 * Pill Label\n	 */\n	labels: PropTypes.shape({\n		label: PropTypes.string,\n		remove: PropTypes.string,\n		title: PropTypes.string,\n	}),\n	/**\n	 * Changes styles of the input. Currently `entity` is not supported.\n	 */\n	renderAtSelectionLength: PropTypes.number,\n	/**\n	 * This callback exposes the selected listbox reference / DOM node to parent components.\n	 */\n	selectedListboxRef: PropTypes.func,\n	/**\n	 * Accepts an array of item objects.\n	 */\n	selection: PropTypes.array,\n	/**\n	 * Custom styles to be passed to the top-level `div` tag\n	 */\n	style: PropTypes.object,\n	/**\n	 * Requests that the active option set focus on render\n	 */\n	listboxHasFocus: PropTypes.bool,\n	/**\n	 * Changes styles of the input. Currently `entity` is not supported.\n	 */\n	variant: PropTypes.oneOf(['base', 'inline-listbox', 'readonly']),\n}
/Users/vu/forks/design-system-react/components/card/private/header.jsx:106:propTypes = {\n	/**\n	 * Adds a filter input to the card header\n	 */\n	filter: PropTypes.node,\n	/**\n	 * Set the HTML `id` of the card filter.\n	 */\n	filterId: PropTypes.string,\n	/**\n	 * Allows a custom header (the media object with the icon in the first column). `icon`, `heading` and other props are passed in the media object from Card. Use `design-system-react/components/media-object` to create your own.\n	 */\n	header: PropTypes.node,\n	/**\n	 * Actions performed on selected items or that relate to the entire group of items such as "Add Item.""\n	 */\n	headerActions: PropTypes.node,\n	/**\n	 * Set the HTML `id` of the card header actions.\n	 */\n	headerActionsId: PropTypes.string,\n	/**\n	 * The heading is the name of the related item group.\n	 */\n	heading: PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n		.isRequired,\n	/**\n	 * Set the HTML `id` of the card heading.\n	 */\n	headingId: PropTypes.string,\n	/**\n	 * Icon associated with grouped items\n	 */\n	icon: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/dropdown-trigger.jsx:38:propTypes = {\n		/**\n		 * Whether the item is active or not.\n		 */\n		active: PropTypes.bool,\n		/**\n		 * Allows alignment of active item with active application background color.\n		 */\n		activeBackgroundColor: PropTypes.string,\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n		 */\n		assistiveText: PropTypes.shape({\n			icon: PropTypes.string,\n		}),\n		/**\n		 * CSS classes to be added to the 'li'.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Determines position of separating bar.\n		 */\n		dividerPosition: PropTypes.oneOf(['left', 'right']),\n		/**\n		 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n		 */\n		id: PropTypes.string,\n		/**\n		 * Allows the dropdown menu to style itself accordingly when open since CSS hover rules cannot take effect if the menu is not inline.\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * Visible label on the dropdown menu trigger button.\n		 */\n		label: PropTypes.string,\n		/**\n		 * The dropdown menu.\n		 */\n		menu: PropTypes.node,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering li loses focus.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * This prop is passed onto the triggering `li`. Triggered when the trigger li is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering li gains focus.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Called when a key pressed.\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Called when mouse clicks down on the trigger `li`.\n		 */\n		onMouseDown: PropTypes.func,\n		/**\n		 * Called when mouse hovers over the trigger `li`.\n		 */\n		onMouseEnter: PropTypes.func,\n		/**\n		 * Called when mouse leaves trigger `li` or the menu.\n		 */\n		onMouseLeave: PropTypes.func,\n		/**\n		 * The ref of the actual triggering button.\n		 */\n		triggerRef: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/button-group/index.jsx:20:propTypes = {\n	/**\n	 * Children are expected to be components. If last button triggers a dropdown menu, use Dropdown instead of Button. _Tested with snapshot testing._\n	 */\n	children: PropTypes.node.isRequired,\n	/**\n	 * CSS classes added to `slds-button-group` or `slds-checkbox_button-group` tag\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * If the `labels.label` prop is set, a `.slds-form-element` classed fieldset element is added as a container. This prop applies classes to that element\n	 */\n	classNameContainer: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `error`: Message to display when any of Checkboxes are in an error state. _Tested with snapshot testing._\n	 * * `label`: This label appears above the button group. _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		error: PropTypes.string,\n		label: PropTypes.string,\n	}),\n	/**\n	 * Use checkbox variant for "Checkbox Button Group" styling and add Checkbox components as children _Tested with snapshot testing._\n	 */\n	variant: PropTypes.oneOf(['checkbox', 'list']),\n}
/Users/vu/forks/design-system-react/components/global-navigation-bar/dropdown.jsx:63:propTypes = {\n	/**\n	 * Whether the item is active or not.\n	 */\n	active: PropTypes.bool,\n	/**\n	 * Allows alignment of active item with active application background color.\n	 */\n	activeBackgroundColor: PropTypes.string,\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n	 */\n	assistiveText: PropTypes.shape({\n		icon: PropTypes.string,\n	}),\n	/**\n	 * Aligns the right or left side of the menu with the respective side of the trigger. This is not intended for use with `nubbinPosition`.\n	 */\n	align: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * Extra classnames to apply to the dropdown menu.\n	 */\n	className: PropTypes.string,\n	/**\n	 * Determines position of separating bar.\n	 */\n	dividerPosition: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * CSS classes to be added to `li` element.\n	 */\n	buttonClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Provided to List to indicate number of items visible in the List. Pass `null` to display all items, or a string containing one of the numeric option values listed under [Dropdown Height](https://www.lightningdesignsystem.com/components/menus/#flavor-dropdown-height) at the right (eg. '5').\n	 */\n	length: PropTypes.oneOf([null, '5', '7', '10']),\n	/**\n	 *  Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px).\n	 */\n	offset: PropTypes.string,\n	/**\n	 * Triggered when an item in the menu is clicked.\n	 */\n	onSelect: PropTypes.func,\n	/**\n	 * An array of menu item.\n	 */\n	options: PropTypes.array.isRequired,\n}
/Users/vu/forks/design-system-react/components/carousel/index.jsx:59:propTypes = {\n		/**\n		 * Description of the carousel items for screen-readers.\n		 */\n		assistiveText: PropTypes.object,\n		/**\n		 * Interval for the autoplay iteration\n		 */\n		autoplayInterval: PropTypes.number,\n		/**\n		 * CSS classes that are applied to the main 'slds-carousel' classed component container\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Dictates the currently active/visible carousel panel. Use with `onRequestPanelChange` for a controlled carousel component. If not provided, the carousel will manage this itself via state.\n		 */\n		currentPanel: PropTypes.number,\n		/**\n		 * Boolean showing whether the autoplay button is available or not\n		 */\n		hasAutoplay: PropTypes.bool,\n		/**\n		 * Boolean for displaying the navigation indicators (left/right arrows) of the carousel\n		 */\n		hasPreviousNextPanelNavigation: PropTypes.bool,\n		/**\n		 * Id of component, if desired. If not provided an id is automatically generated\n		 */\n		id: PropTypes.string,\n		/**\n		 * Boolean that dictates whether autoplay is active or not. Use with `onRequestAutoplayToggle` for a controlled carousel component.\n		 */\n		isAutoplayOn: PropTypes.bool,\n		/**\n		 * Boolean for infinite loop navigation. Note: if not true autoplay will stop automatically at the last panel.\n		 */\n		isInfinite: PropTypes.bool,\n		/**\n		 * * **Array of item objects used by the default carousel item renderer.**\n		 * Each object can contain:\n		 * * `id`: The id of the carousel item. [REQUIRED]\n		 * * `heading`: Primary string that will be used as the heading\n		 * * `description`: Secondary string that is used to describe the item\n		 * * `buttonLabel`: If assigned a call to button action will be rendered with this text, if unassigned no button is rendered\n		 * * `imageAssistiveText`: Image alt text, if not present heading will be used instead\n		 * * `href`: Used for item link, if not provided 'javascript:void(0);' is used instead\n		 * * `src`: Item image src value\n		 */\n		items: PropTypes.array.isRequired,\n		/**\n		 * Number of items to be displayed at a time in the carousel\n		 */\n		itemsPerPanel: PropTypes.number,\n		/**\n		 * Accepts a custom carousel item rendering function\n		 */\n		onRenderItem: PropTypes.func,\n		/**\n		 * Called whenever `isAutoplayOn` is requested to be toggled on or off. Use with `isAutoplayOn` prop for a controlled carousel component. Passes an event object and a data object with the current `isAutoplayOn` value as an attribute.\n		 */\n		onRequestAutoplayToggle: PropTypes.func,\n		/**\n		 * Called whenever the panel is requested to change due to user interaction or auto-play. Use with `currentPanel` for a controlled carousel component. Passes an event object and a data object with `currentPanel` and `requestedPanel` attributes.\n		 */\n		onRequestPanelChange: PropTypes.func,\n		/**\n		 * Handler for clicking on a carousel item\n		 */\n		onItemClick: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/split-view/index.jsx:13:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `toggleButtonOpen`: The button used to open the split view.\n	 * * `toggleButtonClose`: The button used to close the split view.\n	 */\n	assistiveText: PropTypes.shape({\n		toggleButtonOpen: PropTypes.string,\n		toggleButtonClose: PropTypes.string,\n	}),\n	/**\n	 * HTML Id for the component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS classes to be added to the root `div` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Sets the split view to be open or closed.\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * Event Callbacks\n	 * * `onClose`: Triggered when the split view has closed.\n	 * * `onOpen`: Triggered when the split view has opened.\n	 */\n	events: PropTypes.shape({\n		onClose: PropTypes.func,\n		onOpen: PropTypes.func,\n	}),\n	/**\n	 * The React component that is rendered in the master section.\n	 * You need to pass in an array of elements in order for the scrolling to in the SplitViewList to work correctly.\n	 * React requires that you also supply a unique `key` for each element [React Lists and Keys](https://reactjs.org/docs/lists-and-keys.html#keys).\n	 */\n	master: PropTypes.oneOfType([\n		PropTypes.arrayOf(PropTypes.element),\n		PropTypes.element,\n	]).isRequired,\n	/**\n	 * The width of the master section.\n	 */\n	masterWidth: PropTypes.string,\n	/**\n	 * The React component that is rendered in the detail section.\n	 */\n	detail: PropTypes.oneOfType([\n		PropTypes.arrayOf(PropTypes.element),\n		PropTypes.element,\n	]).isRequired,\n}
/Users/vu/forks/design-system-react/components/page-header/index.jsx:34:propTypes = {\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * An array of detail blocks (used in "recordHome" variant)\n	 */\n	details: PropTypes.array,\n	/**\n	 * The label property can be a string or a React element\n	 */\n	label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n	/**\n	 * The page header icon. Expects an Icon component\n	 */\n	icon: PropTypes.element,\n	/**\n	 * The info property can be a string or a React element\n	 */\n	info: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n	/**\n	 * Makes PageHeader joinable with DataTable by adding appropriate classes/styling\n	 */\n	joined: PropTypes.bool,\n	/**\n	 * Used with the `object-home` variant. Accepts a node, typically a Dropdown component\n	 */\n	nameSwitcherDropdown: PropTypes.node,\n	/**\n	 * Actions content to appear on the upper right side of the page header.\n	 * Returned content must be either a SLDSPageHeaderControl component or an element/fragment with children that are all SLDSPageHeaderControl components.\n	 * Prop 'contentRight' will be deprecated soon, use 'onRenderActions' instead.\n	 */\n	onRenderActions: PropTypes.func,\n	/**\n	 * Controls content to appear on the lower right side of the page header.\n	 * Returned content must be either a SLDSPageHeaderControl component or an element/fragment with children that are all SLDSPageHeaderControl components.\n	 * Prop 'navRight' will be deprecated soon, use 'onRenderControls' instead.\n	 */\n	onRenderControls: PropTypes.func,\n	/**\n	 * The title property can be a string or a React element\n	 */\n	title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n	/**\n	 * An array of react elements presumably anchor <a> elements.\n	 */\n	trail: PropTypes.array,\n	/**\n	 * The type of component\n	 * Note: Extra options are added to make the version backward compatible\n	 */\n	variant: PropTypes.oneOf([\n		'base',\n		'object-home',\n		'record-home',\n		'related-list',\n	]),\n}
/Users/vu/forks/design-system-react/components/tooltip/index.jsx:31:propTypes = {\n	/**\n	 * Alignment of the Tooltip relative to the element that triggers it.\n	 */\n	align: PropTypes.oneOf([\n		'top',\n		'top left',\n		'top right',\n		'right',\n		'right top',\n		'right bottom',\n		'bottom',\n		'bottom left',\n		'bottom right',\n		'left',\n		'left top',\n		'left bottom',\n	]).isRequired,\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `tooltipTipLearnMoreIcon`: This text is inside the info icon within the tooltip content and exists to "complete the sentence" for assistive tech users.\n	 * * `triggerLearnMoreIcon`: This text is inside the info icon that triggers the tooltip in order to have text within the link.\n	 */\n	assistiveText: PropTypes.shape({\n		tooltipTipLearnMoreIcon: PropTypes.string,\n		triggerLearnMoreIcon: PropTypes.string,\n	}),\n	/**\n	 * Pass the one element that triggers the Tooltip as a child. It must be an element with `tabIndex` or an element that already has a `tabIndex` set such as an anchor or a button, so that keyboard users can tab to it.\n	 */\n	children: PropTypes.node,\n	/**\n	 * Content inside Tooltip.\n	 */\n	content: PropTypes.node.isRequired,\n	/**\n	 * CSS classes to be added to the popover dialog. That is the element with `.slds-popover` on it.\n	 */\n	dialogClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Enabling this hides the default nubbin, replacing it with one attached directly to the tooltip trigger. Note: `hasStaticAlignment` should be set to `true` if using this feature as auto-flipping anchored nubbins are not currently supported.\n	 */\n	hasAnchoredNubbin: PropTypes.bool,\n	/**\n	 * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n	 */\n	hasStaticAlignment: PropTypes.bool,\n	/**\n	 * Delay on Tooltip closing in milliseconds. Defaults to 50\n	 */\n	hoverCloseDelay: PropTypes.number,\n	/**\n	 * Delay on Tooltip opening in milliseconds. Defaults to 0\n	 */\n	hoverOpenDelay: PropTypes.number,\n	/**\n	 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the popover to the triggering element.\n	 */\n	id: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `learnMoreAfter`: This label appears in the tooltip after the info icon.\n	 * * `learnMoreBefore`: This label appears in the tooltip before the info icon.\n	 */\n	labels: PropTypes.shape({\n		learnMoreAfter: PropTypes.string,\n		learnMoreBefore: PropTypes.string,\n	}),\n	/**\n	 * Forces tooltip to be open. A value of `false` will disable any interaction with the tooltip.\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * Callback that returns an element or React `ref` to align the Tooltip with.\n	 */\n	onRequestTargetElement: PropTypes.func,\n	/**\n	 * CSS classes to be added to tag with `slds-tooltip-trigger`.\n	 */\n	triggerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	position: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n	/**\n	 * Custom styles to be added to wrapping triggering `div`.\n	 */\n	triggerStyle: PropTypes.object,\n	/**\n	 * Determines the theme of tooltip: for informative purpose (blue background) or warning purpose (red background). This used to be `variant`.\n	 */\n	theme: PropTypes.oneOf(['info', 'error']),\n	/**\n	 * Determines the type of the tooltip.\n	 */\n	variant: PropTypes.oneOf(['base', 'learnMore', 'list-item']),\n}
/Users/vu/forks/design-system-react/components/vertical-navigation/index.jsx:35:propTypes = {\n		/**\n		 * HTML id for component. _Tested with snapshot testing._\n		 */\n		id: PropTypes.string,\n		/**\n		 * CSS class names to be added to the container element. _Tested with snapshot testing._\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Array of categories. The required shape is: `{id: string, label: string, items: array}`. The required shape of an item is `{id: string, label: string, url: string}`. All item ids are expected to be unique. _Tested with snapshot testing._\n		 */\n		categories: PropTypes.array,\n		/**\n		 * The ID of the item that is currently selected. Defaults to the ID of the first item. _Tested with Mocha framework._\n		 */\n		selectedId: PropTypes.string,\n		/**\n		 * Triggered when the selection changes. It receives an event and an item object in the shape: `event, {item: [object] }`. _Tested with Mocha framework._\n		 */\n		onSelect: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/page-header/private/base/index.jsx:15:propTypes = {\n	/**\n	 * The page header icon\n	 */\n	icon: PropTypes.node,\n	/**\n	 * The info property can be a string or a React element\n	 */\n	info: PropTypes.node,\n	/**\n	 * Nav content which appears in the upper right hand corner.\n	 * prop 'navRight' will be deprecated soon, use 'onRenderControls' instead\n	 */\n	onRenderControls: PropTypes.func,\n	/**\n	 * The title property can be a string or a React element\n	 */\n	title: PropTypes.node,\n	/**\n	 * The type of component\n	 */\n	variant: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/carousel/private/carousel-indicators.jsx:124:propTypes = {\n	/**\n	 * Carousel HTML ID\n	 */\n	carouselId: PropTypes.string,\n	/**\n	 * CSS classes that are applied to the component\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Selected indicator\n	 */\n	currentIndex: PropTypes.number,\n	/**\n	 * Passed from carousel parent state, dictates if indicator currently has focus\n	 */\n	hasFocus: PropTypes.bool,\n	/**\n	 * Array of objects with shape, needed for building a carousel items\n	 */\n	items: PropTypes.array,\n	/**\n	 * Number of items to be displayed at a time in the carousel\n	 */\n	itemsPerPanel: PropTypes.number,\n	/**\n	 * Number of indicators to be displayed (corresponds to the number of panels in the carousel)\n	 */\n	noOfIndicators: PropTypes.number.isRequired,\n	/**\n	 * Fires on indicator blur, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n	 */\n	onBlur: PropTypes.func,\n	/**\n	 * Triggered when the indicator is clicked.\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Fires on indicator focus, allows parent carousel to adjust indicatorsHaveFocus state accordingly\n	 */\n	onFocus: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/tooltip/private/field-level-help-tooltip.jsx:10:propTypes = {\n	/*\n	 * Assistive Text object from parent component such as Input, Combobox, etc.\n	 */\n	assistiveText: PropTypes.shape({\n		triggerLearnMoreIcon: PropTypes.string,\n	}),\n	/*\n	 * Tooltip from external prop\n	 */\n	fieldLevelHelpTooltip: PropTypes.node.isRequired,\n}
/Users/vu/forks/design-system-react/components/vertical-navigation/private/item.jsx:51:propTypes = {\n	/**\n	 * Item to be rendered.\n	 */\n	item: PropTypes.shape({\n		id: PropTypes.string.isRequired,\n		label: PropTypes.string.isRequired,\n		url: PropTypes.string,\n	}),\n	/**\n	 * Whether item is selected or not.\n	 */\n	isSelected: PropTypes.bool,\n	/**\n	 * ID of the category this item belongs to.\n	 */\n	categoryId: PropTypes.string.isRequired,\n	/**\n	 * Function that will run whenever an item is selected.\n	 */\n	onSelect: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/carousel/private/previous-next-carousel-navigator.jsx:36:propTypes = {\n	/**\n	 * Description of the previous/next navigation icons for screen-readers.\n	 */\n	assistiveText: PropTypes.string,\n	/**\n	 * Name of icon displayed within the navigation button\n	 */\n	iconName: PropTypes.oneOf(['chevronleft', 'chevronright']),\n	/**\n	 * Determines where the navigator indicator has been disabled\n	 */\n	isDisabled: PropTypes.bool,\n	/**\n	 * Additional styles to be applied to the container\n	 */\n	inlineStyle: PropTypes.object,\n	/**\n	 * Triggered when the indicator is clicked.\n	 */\n	onClick: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/split-view/header.jsx:10:propTypes = {}
/Users/vu/forks/design-system-react/components/carousel/private/carousel-item.jsx:74:propTypes = {\n	/**\n	 * Label of the button to be displayed. If not provided, no button will be rendered.\n	 */\n	buttonLabel: PropTypes.string,\n	/**\n	 * Carousel HTML ID\n	 */\n	carouselId: PropTypes.string,\n	/**\n	 * CSS classes that are applied to the component\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Visible paragraph text to be displayed on the carousel item\n	 */\n	description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * Carousel Item's visible heading\n	 */\n	heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n	href: PropTypes.string,\n	/**\n	 * Id of the item component.\n	 */\n	id: PropTypes.number.isRequired,\n	/**\n	 * Image alt text\n	 */\n	imageAssistiveText: PropTypes.string,\n	/**\n	 * Boolean indicating whether this item is currently visible in the active parent carousel panel\n	 */\n	isInCurrentPanel: PropTypes.bool,\n	/**\n	 * Width of the carousel item\n	 */\n	itemWidth: PropTypes.number,\n	/**\n	 * Accepts a callback to handle when the a tag is focused on\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * Accepts a custom carousel item rendering function\n	 */\n	onRenderItem: PropTypes.func,\n	/**\n	 * Index of the panel this item belongs to, to be used when associating it to an indicator\n	 */\n	panelIndex: PropTypes.number,\n	/**\n	 * Path of the image to be used\n	 */\n	src: PropTypes.string.isRequired,\n}
/Users/vu/forks/design-system-react/components/tree/index.jsx:22:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: For users of assistive technology, if set the heading will be hidden. One of `heading` or `assistiveText.label` must be set in order to label the tree.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * Class names to be added to the container element which has the heading and the `ul.slds-tree` element as children.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Class names to be added to the top-level `ul` element of the tree.\n	 */\n	listClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * A function that will be called by every branch to receive its child nodes. The parent `node` object with the branch data is passed into this function: `getNodes(node)`. If your state engine is Flux or Redux, then your tree data structure will probably be flattened or normalized within the store. This will allow you to build out your tree without transversing an actual tree of data and may be more performant.\n	 */\n	getNodes: PropTypes.func,\n	/**\n	 * This is the tree's heading and describes its contents. It can be hidden, see `assistiveText`.\n	 * */\n	heading: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * HTML `id` of primary element that has `.slds-tree` on it. This component has a wrapping container element outside of `.slds-tree`.\n	 */\n	id: PropTypes.string.isRequired,\n	/**\n	 * Array of items starting at the top of the tree. The shape each node in the array is:\n	 * ```\n	 * {\n	 *   expanded: boolean,\n	 *   id: string,\n	 *   label: string or node,\n	 *   selected: boolean,\n	 *   type: string,\n	 *   nodes: array\n	 * }\n	 * ```\n	 * `assistiveText: string` is optional and helpful if the label is not a string. Only `id` and `label` are required. Use `type: 'branch'` for folder and categories.\n	 */\n	nodes: PropTypes.arrayOf(\n		PropTypes.oneOfType([\n			PropTypes.number,\n			PropTypes.string,\n			PropTypes.shape({\n				id: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n					.isRequired,\n				label: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\n					.isRequired,\n				type: PropTypes.string.isRequired,\n			}),\n		])\n	).isRequired,\n	/**\n	 * Function that will run whenever an item or branch is selected due to click or keyboard navigation.\n	 */\n	onClick: PropTypes.func.isRequired,\n	/**\n	 * This function triggers when the expand or collapse icon is clicked or due to keyboard navigation.\n	 */\n	onExpandClick: PropTypes.func.isRequired,\n	/**\n	 * This function triggers when the top-level `ul` element scrolls. This can be used to implement an "infinite scroll" pattern and update the `nodes` prop accordingly.\n	 */\n	onScroll: PropTypes.func,\n	/**\n	 * Highlights term if found in node label. This does not auto-expand branches.\n	 */\n	searchTerm: PropTypes.string,\n	/**\n	 * Styles to be added to the top-level `ul` element. Useful for `overflow:hidden`.\n	 */\n	listStyle: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/card/private/footer.jsx:16:propTypes = {\n	/**\n	 * Elements to place in the footer.\n	 */\n	children: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/visual-picker/index.jsx:15:propTypes = {\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Visual Picker accepts `Checkbox`, `Radio` and `VisualPickerLink` components as children. Please see `Checkbox`, `Radio` and `VisualPickerLink` for props.\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to tag with `.slds-form-element`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 *  Label for the visual picker\n	 */\n	label: PropTypes.string,\n	/**\n	 *  Whether the visual picker is coverable on selection\n	 */\n	coverable: PropTypes.bool,\n	/**\n	 *  Whether the visual picker has a vertical layout\n	 */\n	vertical: PropTypes.bool,\n	/**\n	 * Whether the visual picker has links as children\n	 */\n	links: PropTypes.bool,\n	/**\n	 *  Size for visual picker\n	 */\n	size: PropTypes.oneOf(['medium', 'large']),\n}
/Users/vu/forks/design-system-react/components/split-view/listbox.jsx:22:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `list`: aria label for the list\n	 * * `sort`\n	 *    * `sortedBy`: Clickable sort header for the list.\n	 *    * `descending`: Descending sorting.\n	 *    * `ascending`: Ascending sorting.\n	 */\n	assistiveText: PropTypes.shape({\n		list: PropTypes.string,\n		sort: PropTypes.shape({\n			sortedBy: PropTypes.string,\n			descending: PropTypes.string,\n			ascending: PropTypes.string,\n		}),\n		unreadItem: PropTypes.string,\n	}),\n	/**\n	 * CSS classes to be added to the parent `div` tag.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Event Callbacks\n	 * * `onSelect`: Called when a list item is selected. Previously, this event was called when an item was focused. The UX pattern has changed and this event is now called on pressing enter or mouse click.\n	 *    * event {object} List item click event\n	 *    * Meta {object}\n	 *       * selectedItems {array} List of selected items.\n	 *       * item {object} Last selected item.\n	 * * `onSort`: Called when the list is sorted.\n	 *    * event {object} Sort click event\n	 */\n	events: PropTypes.shape({\n		onSelect: PropTypes.func.isRequired,\n		onSort: PropTypes.func,\n	}),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * * `header`: This is the header of the list.\n	 */\n	labels: PropTypes.shape({\n		header: PropTypes.string,\n	}),\n	/**\n	 * The direction of the sort arrow. Option are:\n	 * * SORT_OPTIONS.UP: `up`\n	 * * SORT_OPTIONS.DOWN: `down`\n	 */\n	sortDirection: PropTypes.oneOf([SORT_OPTIONS.UP, SORT_OPTIONS.DOWN]),\n	/**\n	 * Allows multiple item to be selection\n	 */\n	multiple: PropTypes.bool,\n	/**\n	 * The list of items.\n	 * It is recommended that you have a unique `id` for each item.\n	 */\n	options: PropTypes.array.isRequired,\n	/**\n	 * Accepts an array of item objects. For single selection, pass in an array of one object.\n	 */\n	selection: PropTypes.array,\n	/**\n	 * Accepts an array of item objects. For single unread, pass in an array of one object.\n	 */\n	unread: PropTypes.array,\n	/**\n	 * Custom list item template for the list item content. The select and unread functionality wraps the custom list item.\n	 * This should be a React component that accepts props.\n	 */\n	listItem: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/split-view/private/list-item-content.jsx:9:propTypes = {\n	/**\n	 * **Item to be displayed**\n	 * * `label`: The main label displayed on the top left.\n	 * * `topRightText`: The text displayed on the top right.\n	 * * `bottomLeftText`: The text displayed on the bottom left.\n	 * * `bottomRightText`: The text displayed on the bottom right.\n	 */\n	item: PropTypes.shape({\n		label: PropTypes.string,\n		topRightText: PropTypes.string,\n		bottomLeftText: PropTypes.string,\n		bottomRightText: PropTypes.string,\n	}),\n}
/Users/vu/forks/design-system-react/components/date-picker/date-picker.jsx:37:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `nextMonth`: Label for button to go to the next month _Tested with snapshot testing._\n	 * * `openCalendar`: Call to action label for calendar dialog trigger _Tested with snapshot testing._\n	 * * `previousMonth`: Label for button to go to the previous month _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		nextMonth: PropTypes.string,\n		openCalendar: PropTypes.string,\n		previousMonth: PropTypes.string,\n		year: PropTypes.string,\n	}),\n	/**\n	 * Aligns the right or left side of the menu with the respective side of the trigger. _Tested with snapshot testing._\n	 */\n	align: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * CSS classes to be added to tag with `slds-datepicker`. If you are looking for the outer DOM node (slds-dropdown-trigger), please review `triggerClassName`. _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Disable input and calendar. _Tested with Mocha framework._\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * This function callback receives a data object with a key of `date`. Write your own validation and return `true` if the date should be disabled, otherwise please return `false`. The value of `date` is the day rendered in the calendar with the current local time and timezone.\n	 */\n	dateDisabled: PropTypes.func,\n	/**\n	 * Date formatting function that formats the `value` prop (`value` is an ECMAScript `Date()` object) and returns a string to be rendered as the `input` value. Please use an external library such as [MomentJS](https://github.com/moment/moment/) for date formatting and internationalization. _Tested with snapshot testing._\n	 * The default `formatter` function is:\n	 * ```\n	 * formatter(date) {\n	 *   return date\n	 *    ? `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\n	 *    : '';\n	 * }\n	 * ```\n	 */\n	formatter: PropTypes.func,\n	/**\n	 * Value of input that gets passed to `parser` prop on initial render. This prop is only present for uncontrolled use of Datepicker which is _highly discouraged_. A better name for this prop would be `defaultFormatedValue`. Please use the `value` prop instead. _Not tested._\n	 */\n	formattedValue: PropTypes.string,\n	/**\n	 * Prevents the dropdown from changing position based on the viewport/window. If set to true your dropdowns can extend outside the viewport _and_ overflow outside of a scrolling parent. If this happens, you might want to consider making the dropdowns contents scrollable to fit the menu on the screen. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n	 */\n	hasStaticAlignment: PropTypes.bool,\n	/**\n	 * HTML id for component _Tested with snapshot testing._\n	 */\n	id: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `abbreviatedWeekDays`: Three letter abbreviations of the days of the week, starting on Sunday. _Tested with snapshot testing._\n	 * * `months`: Names of the months. _Tested with snapshot testing._\n	 * * `label`: This label appears above the input.\n	 * * `placeholder`: Placeholder text for input. _Tested with snapshot testing._\n	 * * `today`: Label of shortcut to jump to today within the calendar. This is also used for assistive text on today's date. _Tested with snapshot testing._\n	 * * `weekDays`: Full names of the seven days of the week, starting on Sunday. _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		abbreviatedWeekDays: PropTypes.array,\n		label: PropTypes.string,\n		months: PropTypes.array,\n		placeholder: PropTypes.string,\n		today: PropTypes.string,\n		weekDays: PropTypes.array,\n	}),\n	/**\n	 * An [Input](http://react.lightningdesignsystem.com/components/inputs/) component. The props from this `Input` component will be merged and override any default props. See [Component composition with prop spread](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#component-composition-with-prop-spread) for more information on this methodology.\n	 */\n	input: PropTypes.node,\n	/**\n	 * Forces the dropdown to be open or closed. See controlled/uncontrolled callback/prop pattern for more on suggested use view [Concepts and Best Practices](https://github.com/salesforce-ux/design-system-react/blob/master/CONTRIBUTING.md#concepts-and-best-practices)\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * Makes Monday the first day of the week. _Tested with snapshot testing._\n	 */\n	isIsoWeekday: PropTypes.bool,\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	menuPosition: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n	/**\n	 * Triggered when the user wants to focus on a new day with the keyboard. If the target node is a day it will return the keyboard event a data object with the shape: `{date: [Date object]}`. Event will be `null` when new month is re-rendered.  _Tested with Mocha framework._\n	 */\n	onCalendarFocus: PropTypes.func,\n	/**\n	 * Triggered when the date changes. `onChange` can be used for form validation if needed. It receives an event and a data object in the shape: `{date: [Date object], formattedDate: [string], timezoneOffset: [number]}`. `data.date` is Coordinated Universal Time (UTC), but the days of the calendar are in local time of the user. The `timezoneOffset` is the difference, in minutes, between UTC and the local time. Please note that this means that the offset is positive if the local timezone is behind UTC and negative if it is ahead. `timezoneOffset` is in minutes, for hours divide by `60`. _Tested with Mocha framework._\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * Triggered when the calendar is closed. _Tested with Mocha framework._\n	 */\n	onClose: PropTypes.func,\n	/**\n	 * Triggered when the calendar has opened. _Tested with Mocha framework._\n	 */\n	onOpen: PropTypes.func,\n	/**\n	 * Function called when the calendar dialog would like hide. This will turn the calendar dialog into into a controlled component. Please use with `isOpen`. _Tested with Mocha framework._\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 * Function called when the calendar dialog would like show. This will turn the calendar dialog into into a controlled component. Please use with `isOpen`. _Tested with Mocha framework._\n	 */\n	onRequestOpen: PropTypes.func,\n	/**\n	 * Custom function to parse date string from the `input` value, which must return an ECMAScript `Date()` object.  Please use an external library such as [MomentJS](https://github.com/moment/moment/) for date parsing and internationalization. The default `parser` passes the input value to ECMAScript `Date()` and _prays_ for a miracle. **Do not use the default parsing function in production.** _Tested with snapshot testing._\n	 * The default `parser function is:\n	 * ```\n	 * parser(str) {\n	 *   return new Date(str);\n	 * }\n	 * ```\n	 */\n	parser: PropTypes.func,\n	/**\n	 * Offset of year from current year that can be selected in the year selection dropdown. (2017 - 5 = 2012). _Tested with snapshot testing._\n	 */\n	relativeYearFrom: PropTypes.number,\n	/**\n	 * Offset of year from current year that can be selected in the year selection dropdown. (2017 + 5 = 2012). _Tested with snapshot testing._\n	 */\n	relativeYearTo: PropTypes.number,\n	/**\n	 * CSS classes to be added to tag with `slds-datepicker-trigger`. This is typically a wrapping `div` around the input. _Tested with snapshot testing._\n	 */\n	triggerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Sets date with a `Date` ECMAScript object. _Tested with snapshot testing._\n	 */\n	value: PropTypes.instanceOf(Date),\n}
/Users/vu/forks/design-system-react/components/builder-header/nav.jsx:10:propTypes = {\n	/**\n	 * Provide children of the types `<BuilderHeaderNavLink />` or `<BuilderHeaderNavDropdown />` to define the structure of the navigation section.\n	 * ```\n	 * <BuilderHeader>\n	 *   <BuilderHeaderNav>\n	 *     <BuilderHeaderNavLink />\n	 *     <BuilderHeaderNavDropdown />\n	 *   </BuilderHeaderNav>\n	 * </BuilderHeader>\n	 * ```\n	 */\n	children: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/slider/index.jsx:27:propTypes = {\n	/**\n	 * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.\n	 */\n	'aria-describedby': PropTypes.string,\n	/**\n	 * Assistive text for accessibility**\n	 * `disabled`: Read by screen readers to indicate a disabled slider\n	 * `label`: Visually hidden label but read out loud by screen readers.\n	 */\n	assistiveText: PropTypes.shape({\n		disabled: PropTypes.string,\n		label: PropTypes.string,\n	}),\n	/**\n	 * Class names to be added to the outer container of the Slider.\n	 */\n	classNameContainer: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * This is the initial value of an uncontrolled form element and is present\n	 * only to provide compatibility with hybrid framework applications that\n	 * are not entirely React. It should only be used in an application without\n	 * centralized state (Redux, Flux). "Controlled components" with centralized\n	 * state is highly recommended. See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n	 */\n	defaultValue: PropTypes.number,\n	/**\n	 * Disables the Slider and prevents clicking it. Only available on the horizontal view.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Message to display when the Slider is in an error state. When this is present, also visually highlights the component as in error.\n	 */\n	errorText: PropTypes.string,\n	/**\n	 * Set the HTML `id` of the slider.\n	 */\n	id: PropTypes.string,\n	/**\n	 * This label appears above the Slider.\n	 */\n	label: PropTypes.string,\n	/**\n	 * Maximum value of a specified range. Defaults to 100.\n	 */\n	max: PropTypes.number,\n	/**\n	 * Minimum value of a specified range. Defaults to 0.\n	 */\n	min: PropTypes.number,\n	/**\n	 * Name of the submitted form parameter.\n	 */\n	name: PropTypes.string,\n	/**\n	 * This event fires whenever the user has modified the data of the control. This callback recieves the following parameters `event, { value: [string] }`.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * This event fires when the value is committed. This callback recieves the following parameters `event, { value: [string] }`.\n	 */\n	onInput: PropTypes.func,\n	/**\n	 * Size of the slider.\n	 */\n	size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n	/**\n	 * By default, the granularity is 1 and the value is always an integer. For example, If you need a value between 5 and 10, accurate to two decimal places, you should set the value of step to 0.01\n	 */\n	step: PropTypes.number,\n	/**\n	 * The Slider should be a controlled component, and will always display this value. This should always be used if you are using a Flux/Redux framework.\n	 */\n	value: PropTypes.number,\n	/**\n	 * Modifier that makes the slider vertical\n	 */\n	vertical: PropTypes.bool,\n}
/Users/vu/forks/design-system-react/components/tree/private/render-branch.jsx:24:propTypes = {\n	/**\n	 * HTML `id` of primary element that has `.slds-tree` on it. This component has a wrapping container element outside of `.slds-tree`.\n	 */\n	htmlId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n	/**\n	 * The text of the tree item.\n	 */\n	label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * The number of nestings. Determines the ARIA level and style alignment.\n	 */\n	level: PropTypes.number.isRequired,\n	/**\n	 * The current node that is being rendered.\n	 */\n	node: PropTypes.object.isRequired,\n	/**\n	 * This function triggers when the expand or collapse icon is clicked or due to keyboard navigation.\n	 */\n	onExpand: PropTypes.func.isRequired,\n	/**\n	 * Function that will run whenever an item or branch is clicked.\n	 */\n	onSelect: PropTypes.func,\n	/**\n	 * Highlights term if found in node label\n	 */\n	searchTerm: PropTypes.string,\n	/**\n	 * Location of node (zero index). First node is `0`. It's first child is `0-0`. This can be used to modify your nodes without searching for the node. This index is only valid if the `nodes` prop is the same as at the time of the event.\n	 */\n	treeIndex: PropTypes.string,\n	/**\n	 * Flattened tree structure.\n	 */\n	flattenedNodes: PropTypes.arrayOf(PropTypes.object),\n	/**\n	 * Tree indexes of nodes that are currently selected.\n	 */\n	selectedNodeIndexes: PropTypes.arrayOf(PropTypes.string),\n	/**\n	 * Tree index of the node that is currently focused.\n	 */\n	focusedNodeIndex: PropTypes.string,\n	/**\n	 * Callback for when a node is blurred.\n	 */\n	onNodeBlur: PropTypes.func,\n	/**\n	 * Sets focus on render.\n	 */\n	treeHasFocus: PropTypes.bool,\n	/**\n	 * This node's parent.\n	 */\n	parent: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/builder-header/toolbar.jsx:9:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `actions`: Used for the aria-label for the actions section of the toolbar.\n	 * * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		actions: PropTypes.string,\n	}),\n	/**\n	 * Provide children of the type `<ButtonGroup />` to define the structure of the toolbar section.\n	 * ```\n	 * <BuilderHeader>\n	 *   <BuilderHeaderToolbar>\n	 *     <ButtonGroup />\n	 *     <ButtonGroup />\n	 *   </BuilderHeaderToolbar>\n	 * </BuilderHeader>\n	 * ```\n	 */\n	children: PropTypes.node,\n	/**\n	 * Renders the actions section of the header.\n	 */\n	onRenderActions: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/visual-picker/link.jsx:12:propTypes = {\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS classes to be added to tag with `.slds-form-element`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * URL for the Link\n	 */\n	href: PropTypes.string,\n	/**\n	 * Icon node for the Link\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Title for the Link\n	 */\n	title: PropTypes.string,\n	/**\n	 * Description for the Link\n	 */\n	description: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/tree/private/render-initial-branch.jsx:11:propTypes = {\n	/**\n	 * HTML `id` of the wrapping container element.\n	 */\n	htmlId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n	/*\n	 * Class names to be added to the top-level `ul` element.\n	 */\n	initalClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/*\n	 * Styles to be added to the top-level `ul` element. Useful for `overflow:hidden`.\n	 */\n	initialStyle: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/builder-header/nav-link.jsx:8:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `icon`: Used for the icon next to the link text.\n	 * * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		icon: PropTypes.string,\n	}),\n	/**\n	 * Name of the icon category. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon categories.\n	 */\n	iconCategory: PropTypes.oneOf([\n		'action',\n		'custom',\n		'doctype',\n		'standard',\n		'utility',\n	]),\n	/**\n	 * Name of the icon. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon names.\n	 */\n	iconName: PropTypes.string,\n	/**\n	 * Path to the icon. This will override any global icon settings.\n	 */\n	iconPath: PropTypes.string,\n	/**\n	 * Text for the link.\n	 */\n	label: PropTypes.string,\n	/**\n	 * Triggered when the link is clicked.\n	 */\n	onClick: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/date-picker/private/calendar-wrapper.jsx:22:propTypes = {\n		/**\n		 * Label for button to go to the next month\n		 */\n		assistiveTextNextMonth: PropTypes.string.isRequired,\n		/**\n		 * Label for button to go to the previous month\n		 */\n		assistiveTextPreviousMonth: PropTypes.string.isRequired,\n		/**\n		 * Label for year picklist/combobox\n		 */\n		assistiveTextYear: PropTypes.string.isRequired,\n		/**\n		 * One letter abbreviations of the days of the week, starting on Sunday.\n		 */ abbreviatedWeekDayLabels: PropTypes.array.isRequired,\n		/**\n		 * Whether or not the `CalendarWrapper` can steal focus from the main `Input`\n		 */\n		canFocusCalendar: PropTypes.bool.isRequired,\n		/**\n		 * CSS classes to be added to tag with `slds-datepicker`.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * dateDisabled() takes a date as input argument, returns true if given date should be disabled, otherwise returns false.\n		 */\n		dateDisabled: PropTypes.func,\n		/**\n		 * HTML id for component\n		 */\n		id: PropTypes.string,\n		/**\n		 * Makes Monday the first day of the week\n		 */\n		isIsoWeekday: PropTypes.bool,\n		/**\n		 * For use of datepicker outside of dropdown.\n		 */\n		isolated: PropTypes.bool,\n		/**\n		 * Names of the months\n		 */\n		monthLabels: PropTypes.array.isRequired,\n		/**\n		 * Triggered when the keyboard moves focus on the calendar. {date: [Date object], formattedDate: [string]}  _Tested with Mocha framework._\n		 */\n		onCalendarFocus: PropTypes.func,\n		/**\n		 * Triggered when the calendar is supposed to close.\n		 */\n		onRequestClose: PropTypes.func.isRequired,\n		/**\n		 * Triggered when a date on the calendar is clicked.\n		 */\n		onSelectDate: PropTypes.func.isRequired,\n		/**\n		 * The earliest year that can be selected in the year selection dropdown.\n		 */\n		relativeYearFrom: PropTypes.number.isRequired,\n		/**\n		 * The maximum year that can be selected in the year selection dropdown.\n		 */\n		relativeYearTo: PropTypes.number.isRequired,\n		/**\n		 * Currently selected date\n		 */\n		selectedDate: PropTypes.instanceOf(Date),\n		/**\n		 * Component reference / DOM node for selected day.\n		 */\n		selectedDateRef: PropTypes.func,\n		/**\n		 * Label of shortcut to jump to today within the calendar. Also used for assistive text for the current day.\n		 */\n		todayLabel: PropTypes.string.isRequired,\n		/**\n		 * Names of the seven days of the week, starting on Sunday.\n		 */\n		weekDayLabels: PropTypes.array.isRequired,\n	}
/Users/vu/forks/design-system-react/components/date-picker/private/year-picklist.jsx:12:propTypes = {\n		/**\n		 * Label for year picklist/combobox\n		 */\n		assistiveTextYear: PropTypes.string.isRequired,\n		/**\n		 * HTML id for component\n		 */\n		id: PropTypes.string,\n		/**\n		 * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n		 */\n		initialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n		/**\n		 * Displayed calendar has changed or re-rendered\n		 */\n		onChangeMonth: PropTypes.func.isRequired,\n		/**\n		 * Offset of year from current year that can be selected in the year selection dropdown. (2017 - 5 = 2012).\n		 */\n		relativeYearFrom: PropTypes.number,\n		/**\n		 * Offset of year from current year that can be selected in the year selection dropdown. (2017 + 5 = 2012).\n		 */\n		relativeYearTo: PropTypes.number,\n	}
/Users/vu/forks/design-system-react/components/tree/private/item.jsx:198:propTypes = {\n	/**\n	 * HTML `id` of the wrapping container element joined with the `id` of the node. This will recursively increase as the tree depth increases.\n	 */\n	htmlId: PropTypes.string.isRequired,\n	/**\n	 * The text of the tree item.\n	 */\n	label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,\n	/**\n	 * The number of nestings. Determines the ARIA level and style alignment.\n	 */\n	level: PropTypes.number.isRequired,\n	/**\n	 * The current node that is being rendered.\n	 */\n	node: PropTypes.object.isRequired,\n	/**\n	 * This function triggers when the expand or collapse icon is clicked or due to keyboard navigation.\n	 */\n	onExpand: PropTypes.func.isRequired,\n	/**\n	 * Function that will run whenever an item or branch is selected (click or keyboard).\n	 */\n	onSelect: PropTypes.func,\n	/**\n	 * Highlights term if found in node label\n	 */\n	searchTerm: PropTypes.string,\n	/**\n	 * Unique id used for a prefix of all tree nodes\n	 */\n	treeId: PropTypes.string,\n	/**\n	 * Location of node (zero index). First node is `0`. It's first child is `0-0`. This can be used to modify your nodes without searching for the node. This index is only valid if the `nodes` prop is the same as at the time of the event.\n	 */\n	treeIndex: PropTypes.string,\n	/**\n	 * Flattened tree structure.\n	 */\n	flattenedNodes: PropTypes.arrayOf(PropTypes.object),\n	/**\n	 * Tree indexes of nodes that are currently selected.\n	 */\n	selectedNodeIndexes: PropTypes.arrayOf(PropTypes.string),\n	/**\n	 * Tree index of the node that is currently focused.\n	 */\n	focusedNodeIndex: PropTypes.string,\n	/**\n	 * Callback for when a node is blurred.\n	 */\n	onNodeBlur: PropTypes.func,\n	/**\n	 * Sets focus on render.\n	 */\n	treeHasFocus: PropTypes.bool,\n	/**\n	 * This node's parent.\n	 */\n	parent: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/scoped-notification/index.jsx:17:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * * `icon`: The assistive text for the icon. Is overridden by `label` assistive text passed directly to an `Icon` component via the `icon` prop\n	 */\n	assistiveText: PropTypes.shape({\n		icon: PropTypes.string,\n	}),\n	/**\n	 * CSS classes to be added to tag with `.slds-scoped-notification`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 *  The icon to be displayed in the scoped notification. Accepts an `Icon` component\n	 */\n	icon: PropTypes.node,\n	/**\n	 *  Theme for the scoped notification\n	 */\n	theme: PropTypes.oneOf(['dark', 'light']),\n}
/Users/vu/forks/design-system-react/components/builder-header/index.jsx:14:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `backIcon`: Used for the back icon.\n	 * * `helpIcon`: Used for the help icon.\n	 * * `icon`: Used for the main icon next to the header title.\n	 * * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		backIcon: PropTypes.string,\n		helpIcon: PropTypes.string,\n		icon: PropTypes.string,\n	}),\n	/**\n	 * Provide children of the types `<BuilderHeaderNav />`, `<BuilderHeaderToolbar />`, or `<BuilderHeaderMisc />` to define the structure of the header.\n	 * ```\n	 * <BuilderHeader>\n	 *   <BuilderHeaderNav />\n	 *   <BuilderHeaderToolbar />\n	 *   <BuilderHeaderMisc />\n	 * </BuilderHeader>\n	 * ```\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to tag with `.slds-builder-header_container`. Uses `classNames` [API](https://github.com/JedWatson/classnames). _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Event Callbacks\n	 * * `onClickBack`: Called when the Back link is clicked.\n	 * * `onClickHelp`: Called when the Help link is clicked.\n	 * _Tested with Mocha testing._\n	 */\n	events: PropTypes.shape({\n		onClickBack: PropTypes.func,\n		onClickHelp: PropTypes.func,\n	}),\n	/**\n	 * Category of the title icon from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n	 */\n	iconCategory: PropTypes.string,\n	/**\n	 * CSS classes that are applied to the title icon.\n	 */\n	iconClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Name of the title icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n	 */\n	iconName: PropTypes.string,\n	/**\n	 * Path to the title icon. This will override any global icon settings.\n	 */\n	iconPath: PropTypes.string,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `back`: The label for the Back link.\n	 * * `help`: The label for the Help link.\n	 * * `pageType`: The label that describes the page type.\n	 * * `title`: The label for the page title.\n	 * _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		back: PropTypes.string,\n		help: PropTypes.string,\n		pageType: PropTypes.string,\n		title: PropTypes.string,\n	}),\n	/**\n	 * Custom styles applied to the `.slds-builder-header_container` element.\n	 */\n	style: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/builder-header/misc.jsx:6:propTypes = {\n	/**\n	 * Provide custom content in place of Page Type label\n	 * ```\n	 * <BuilderHeader>\n	 *   <BuilderHeaderMisc>\n	 *     Custom content\n	 *   </BuilderHeaderMisc>\n	 * </BuilderHeader>\n	 * ```\n	 */\n	children: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/date-picker/private/week.jsx:50:propTypes = {\n	/**\n	 * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n	 */\n	initialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * Is true if calendar day has focus.\n	 */\n	calendarHasFocus: PropTypes.bool.isRequired,\n	/**\n	 * dateDisabled() takes a date as input argument, returns true if given date should be disabled, otherwise returns false.\n	 */\n	dateDisabled: PropTypes.func,\n	/**\n	 * First day of week.\n	 */\n	firstDayOfWeek: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * Date that has focus.\n	 */\n	focusedDate: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * Triggered when the keyboard moves focus off the calendar.\n	 */\n	onCalendarBlur: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the next day on the calendar. Triggered when right arrow button is pressed.\n	 */\n	onKeyboardNavigateToNextDay: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the same day in the next week on the calendar. Triggered when down arrow button is pressed.\n	 */\n	onKeyboardNavigateToNextWeek: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the previous day on the calendar. Triggered when left arrow button is pressed.\n	 */\n	onKeyboardNavigateToPreviousDay: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the same day in the previous week on the calendar. Triggered when up arrow button is pressed.\n	 */\n	onKeyboardNavigateToPreviousWeek: PropTypes.func.isRequired,\n	/**\n	 * Triggered when the user wants to focus on a new day witht he keyboard. It returns the keyboard event a data object with the shape: `{date: [Date object]}`. Keyboard event is ommited if a new month is rendered.  _Tested with Mocha framework._\n	 */\n	onRequestInternalFocusDate: PropTypes.func.isRequired,\n	/**\n	 * Triggered when a date on the calendar is clicked.\n	 */\n	onSelectDate: PropTypes.func.isRequired,\n	/**\n	 * Currently selected date. This should be present in the input field.\n	 */\n	selectedDate: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * Component reference / DOM node for selected day.\n	 */\n	selectedDateRef: PropTypes.func.isRequired,\n	/**\n	 * Label of shortcut to jump to today within the calendar. Also used for assistive text for the current day.\n	 */\n	todayLabel: PropTypes.string.isRequired,\n}
/Users/vu/forks/design-system-react/components/lookup/lookup.jsx:68:propTypes = {\n		/**\n		 * If present, the label associated with this `input` is overwritten\n		 * by this text and is visually not shown.\n		 */\n		assistiveText: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n		/**\n		 * Class names to be added to the tag classed with `slds-lookup`.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * If true, constrains the menu to the scroll parent. Has no effect if `isInline` is `true`.\n		 */\n		constrainToScrollParent: PropTypes.bool,\n		/**\n		 * ID for aria-describedby (e.g. for an error message or a description)\n		 */\n		describedById: PropTypes.string,\n		/**\n		 * Please select one of the following:\n		 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n		 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n		 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n		 */\n		menuPosition: PropTypes.string,\n		/**\n		 * This prop is passed onto the `input`. Prevents dropdown menu from opening. Also applies disabled styling to input.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * Custom message that renders when no matches found. The default empty state is just text that says, 'No matches found.'.\n		 */\n		emptyMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n		/**\n		 * Custom function to filter the Lookup items when typing into input field. The default function is case-insensitive and uses the searchTerm to filter Lookup items on their labels.\n		 */\n		filterWith: PropTypes.func,\n		/**\n		 * If true, the menu is constrained to the window and may be flipped up. Has no effect if `isInline` is `true`. In other components, its opposite is used `hasStaticAlignment`.\n		 */\n		flippable: PropTypes.bool,\n		/**\n		 * Custom component for Lookup footer. The default footer allows user to add new item - see <a href='http://www.lightningdesignsystem.com/components/lookups/#base'>Lightning Design System Lookup > Base</a>. To use the default footer, pass in <code>Lookup.DefaultFooter</code>.\n		 */\n		footerRenderer: PropTypes.func,\n		/**\n		 * Custom component for Lookup header. The default header has a search icon and shows the search term - see <a href='http://www.lightningdesignsystem.com/components/lookups/#base'>Lightning Design System Lookup > Base</a>. To use the default header, pass in <code>Lookup.DefaultHeader</code>.\n		 */\n		headerRenderer: PropTypes.func,\n		/**\n		 * Please refer to <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to view categories.\n		 */\n		iconCategory: PropTypes.string,\n		/**\n		 * If true, icon color is white. If false, icon color is the default text color.\n		 */\n		iconInverse: PropTypes.bool,\n		/**\n		 * Name of icon. Please refer to <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to view icon names.\n		 */\n		iconName: PropTypes.string,\n		/**\n		 * Determines whether the input's icon will display that icon on the left or the right.\n		 */\n		iconPosition: PropTypes.oneOf(['left', 'right']),\n		/**\n		 * Renders menu within the wrapping trigger as a sibling of the button. By default, you will have an absolutely positioned container at an elevated z-index.\n		 */\n		isInline: PropTypes.bool,\n		/**\n		 * Whether or not the dropdown menu is open. This overrides the default behavior.\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * Form label for input.\n		 */\n		label: PropTypes.string,\n		/**\n		 * Custom component that overrides the default Lookup Item component.\n		 */\n		listItemLabelRenderer: PropTypes.func,\n		/**\n		 * Triggered when input focus is removed.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * Triggered when the contents of the input changes.\n		 */\n		onChange: PropTypes.func,\n		/**\n		 * Triggered when input is focused.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Function called when the lookup dropdown would like hide. This will turn the Lookup into into a controlled component. Please use with `isOpen`.\n		 */\n		onRequestClose: PropTypes.func,\n		/**\n		 * Function called when the lookup dropdown would like show. This will turn the Lookup into into a controlled component. Please use with `isOpen`.\n		 */\n		onRequestOpen: PropTypes.func,\n		/**\n		 * Triggered when the user scrolls in the dropdown menu.\n		 */\n		onScroll: PropTypes.func,\n		/**\n		 * Triggered when an item is selected from the dropdown menu.\n		 */\n		onSelect: PropTypes.func,\n		/**\n		 * Triggered when an item is an item is removed from the input.\n		 */\n		onUnselect: PropTypes.func,\n		/**\n		 * Item added to the dropdown menu.\n		 */\n		options: PropTypes.array.isRequired,\n		/**\n		 * Text that will appear in an empty input.\n		 */\n		placeholder: PropTypes.string,\n		/**\n		 * If true, adds asterisk next to input label to indicate it is a required field.\n		 */\n		required: PropTypes.bool,\n		/**\n		 * Text passed on to header search input of dropdown menu.\n		 */\n		searchTerm: PropTypes.string,\n		/**\n		 * Custom component that overrides the default section divider\n		 */\n		sectionDividerRenderer: PropTypes.func,\n		/**\n		 * Index of current selected item. To clear the selection, pass in -1.\n		 */\n		selectedItem: PropTypes.number,\n	}
/Users/vu/forks/design-system-react/components/lookup/section-divider.jsx:8:propTypes = {\n	data: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/tree/private/branch.jsx:94:propTypes = {\n	/**\n	 * A function that will be called by every branch to receive its child nodes. The parent `node` object with the branch data is passed into this function: `getNodes(node)`. If your state engine is Flux or Redux, then your tree data structure will probably be flattened or normalized within the store. This will allow you to build out your tree without transversing an actual tree of data and may be more performant.\n	 */\n	getNodes: PropTypes.func,\n	/**\n	 * HTML `id` of the wrapping container element joined with the `id` of the node. This will recursively increase as the tree depth increases.\n	 */\n	htmlId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n	/**\n	 * All tree nodes must have a unique HTML `id` for users of assistive technology. If no `id` key is present in the  is provided, one will be generated.\n	 */\n	index: PropTypes.number,\n	/**\n	 * Determines if nodes in the top-level of the tree.\n	 */\n	initial: PropTypes.bool,\n	/*\n	 * Class names to be added to the top-level `ul` element.\n	 */\n	initalClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	initialStyle: PropTypes.object,\n	/**\n	 * The text of the tree item.\n	 */\n	label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n	/**\n	 * The number of nestings. Determines the ARIA level and style alignment.\n	 */\n	level: PropTypes.number.isRequired,\n	/**\n	 * The current node that is being rendered.\n	 */\n	node: PropTypes.object.isRequired,\n	/**\n	 * Function that will run whenever an item or branch is selected (click or keyboard).\n	 */\n	onSelect: PropTypes.func,\n	/**\n	 * This function triggers when the expand or collapse icon is clicked.\n	 */\n	onExpand: PropTypes.func.isRequired,\n	/**\n	 * Highlights term if found in node label\n	 */\n	searchTerm: PropTypes.string,\n	/**\n	 * Unique id used for a prefix of all tree nodes. This is the prefix for subsequent `htmlId` props.\n	 */\n	treeId: PropTypes.string,\n	/**\n	 * Location of node (zero index). First node is `0`. It's first child is `0-0`. This can be used to modify your nodes without searching for the node. This index is only valid if the `nodes` prop is the same as at the time of the event.\n	 */\n	treeIndex: PropTypes.string,\n	/**\n	 * Flattened tree structure.\n	 */\n	flattenedNodes: PropTypes.arrayOf(PropTypes.object),\n	/**\n	 * Tree indexes of nodes that are currently selected.\n	 */\n	selectedNodeIndexes: PropTypes.arrayOf(PropTypes.string),\n	/**\n	 * Tree index of the node that is currently focused.\n	 */\n	focusedNodeIndex: PropTypes.string,\n	/**\n	 * Callback for when a node is blurred.\n	 */\n	onNodeBlur: PropTypes.func,\n	/**\n	 * Sets focus on render.\n	 */\n	treeHasFocus: PropTypes.bool,\n	/**\n	 * This node's parent.\n	 */\n	parent: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/date-picker/private/navigation.jsx:15:propTypes = {\n		/**\n		 * Label for button to go to the next month\n		 */\n		assistiveTextNextMonth: PropTypes.string.isRequired,\n		/**\n		 * Label for button to go to the previous month\n		 */\n		assistiveTextPreviousMonth: PropTypes.string.isRequired,\n		/**\n		 * Label for year picklist/combobox\n		 */\n		assistiveTextYear: PropTypes.string.isRequired,\n		/**\n		 * HTML id for component\n		 */\n		id: PropTypes.string,\n		/**\n		 * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n		 */\n		initialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n		/**\n		 * Displayed calendar has changed or re-rendered\n		 */\n		onChangeMonth: PropTypes.func.isRequired,\n		/**\n		 * Names of the months\n		 */\n		monthLabels: PropTypes.array.isRequired,\n		/**\n		 * For keyboard navigation. In order to trap focus within the dialog, the first DOM node with a tab index should be listened to.\n		 */\n		onPreviousMonthKeyDown: PropTypes.func,\n		/**\n		 * Callback that passes in the DOM reference of the `<button>` DOM node within this component. Primary use is to allow `focus` to be called. You should still test if the node exists, since rendering is asynchronous.\n		 */\n		previousMonthRef: PropTypes.func.isRequired,\n		/**\n		 * Offset of year from current year that can be selected in the year selection dropdown. (2017 - 5 = 2012).\n		 */\n		relativeYearFrom: PropTypes.number,\n		/**\n		 * Offset of year from current year that can be selected in the year selection dropdown. (2017 + 5 = 2012).\n		 */\n		relativeYearTo: PropTypes.number,\n	}
/Users/vu/forks/design-system-react/components/lookup/private/item.jsx:14:propTypes = {\n	data: PropTypes.object,\n	handleItemFocus: PropTypes.func,\n	href: PropTypes.string,\n	iconCategory: PropTypes.string,\n	id: PropTypes.string,\n	index: PropTypes.number,\n	isActive: PropTypes.bool,\n	isDisabled: PropTypes.bool,\n	listItemLabelRenderer: PropTypes.func,\n	onSelect: PropTypes.func,\n	searchTerm: PropTypes.string,\n	setFocus: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/lookup/footer.jsx:12:propTypes = {}
/Users/vu/forks/design-system-react/components/modal/index.jsx:34:propTypes = {\n	/**\n	 * Vertical alignment of Modal.\n	 */\n	align: PropTypes.oneOf(['top', 'center']),\n	/**\n	 * Boolean indicating if the appElement should be hidden.\n	 */\n	ariaHideApp: PropTypes.bool,\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `dialogLabel`: This is a visually hidden label for the dialog. If not provided, `heading` is used.\n	 * * `dialogLabelledBy`: This describes which node labels the dialog. If not provided and dialogLabel is unavailable, `id` is used.\n	 * * `closeButton`: This is a visually hidden label for the close button.\n	 */\n	assistiveText: PropTypes.shape({\n		dialogLabel: PropTypes.string,\n		dialogLabelledBy: PropTypes.string,\n		closeButton: PropTypes.string,\n	}),\n	/**\n	 * Modal content.\n	 */\n	children: PropTypes.node.isRequired,\n	/**\n	 * Custom CSS classes for the modal `section` node classed `.slds-modal` and the parent of `.slds-modal__container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Custom CSS classes for the modal's container. This is the child element of `.slds-modal` with class `.slds-modal__container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	containerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Custom CSS classes for the modal's body. This is the element that has overflow rules and should be used to set a static height if desired. Use `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	contentClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Custom styles for the modal's body. This is the element that has overflow rules and should be used to set a static height if desired.\n	 */\n	contentStyle: PropTypes.object,\n	/**\n	 * If true, modal footer buttons render left and right. An example use case would be for "back" and "next" buttons.\n	 */\n	directional: PropTypes.bool,\n	/**\n	 * If true, Modals cannot be dismissed by clicking on the close icon or pressing esc key.\n	 */\n	disableClose: PropTypes.bool,\n	/**\n	 * If true, Modals can be dismissed by clicking outside of modal. If unspecified, defaults to disableClose.\n	 */\n	dismissOnClickOutside: PropTypes.bool,\n	/**\n	 * Callback to fire with Modal is dismissed\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 * Accepts a node or array of nodes that are typically a `Button` or `ProgressIndicator`. If an array, the nodes render on the right side first but are then floated left and right if <code>directional</code> prop is `true`.\n	 */\n	footer: PropTypes.oneOfType([PropTypes.array, PropTypes.node]),\n	/**\n	 * Allows for a custom modal header that does not scroll with modal content. If this is defined, `heading` and `tagline` will be ignored. The close button will still be present.\n	 */\n	header: PropTypes.node,\n	/**\n	 * Adds CSS classes to the container surrounding the modal header and the close button. Use `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	headerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Unique identifier for the modal. The id is automatically generated if not provided\n	 */\n	id: PropTypes.string,\n	/**\n	 * Forces the modal to be open or closed.\n	 */\n	isOpen: PropTypes.bool.isRequired,\n	/**\n	 * Function whose return value is the mount node to insert the Modal element into. The default is `() => document.body`.\n	 */\n	parentSelector: PropTypes.func,\n	/**\n	 * Custom CSS classes for the portal DOM node. This node is a direct descendant of the `body` and is the parent of `ReactModal__Overlay`. Use `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	portalClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Styles the modal as a prompt.\n	 */\n	prompt: PropTypes.oneOf([\n		'success',\n		'warning',\n		'error',\n		'wrench',\n		'offline',\n		'info',\n	]),\n	/**\n	 * Specifies the modal's width. May be deprecated in favor of `width` in the future.\n	 */\n	size: PropTypes.oneOf(['small', 'medium', 'large']),\n	/**\n	 * Content underneath the heading in the modal header.\n	 */\n	tagline: PropTypes.node,\n	/**\n	 * Content underneath the title in the modal header.\n	 */\n	title: PropTypes.node,\n	/**\n	 * Text heading at the top of a modal.\n	 */\n	heading: PropTypes.node,\n	/**\n	 * Allows adding additional notifications within the modal.\n	 */\n	toast: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/tabs/index.jsx:61:propTypes = {\n	/**\n	 * HTML `id` attribute of primary element that has `.slds-tabs_default` on it. Optional: If one is not supplied, a `shortid` will be created.\n	 */\n	id: PropTypes.string,\n\n	/**\n	 * The `children` are the actual tabs and panels to be displayed.\n	 *\n	 * Note that the structure of the `<Tabs />` component **does not** correspond to the DOM structure that is rendered. The `<Tabs />` component requires one or more children of type `<TabsPanel />`, which themselves require a `label` property which will be what shows in the `<Tab />` and has `children`, which end up being the _contents of the tab's corresponding panel_.\n	 *\n	 * The component iterates through each `<TabsPanel />` and rendering one `<Tab />` and one `<TabPanel />` for each of them. The tab(s) end up being children of the `<TabsList />`.\n	 *\n	 * ```\n	 * <Tabs>\n	 * 	<TabsPanel label="Tab 1">\n	 * 		<div>\n	 * 			<h2 className="slds-text-heading_medium">This is my tab 1 contents!</h2>\n	 * 			<p>They show when you click the first tab.</p>\n	 * 		</div>\n	 * 	</TabsPanel>\n	 * 	<TabsPanel label="Tab 2">\n	 * 		<div>\n	 * 			<h2 className="slds-text-heading_medium">This is my tab 2 contents!</h2>\n	 * 			<p>They show when you click the second tab.</p>\n	 * 		</div>\n	 * 	</TabsPanel>\n	 * </Tabs>\n	 * ```\n	 */\n	children: PropTypes.oneOfType([\n		PropTypes.arrayOf(PropTypes.node),\n		PropTypes.node,\n		PropTypes.element,\n	]).isRequired,\n\n	/**\n	 * Class names to be added to the container element and is passed along to its children.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n\n	/**\n	 * The Tab (and corresponding TabPanel) that is selected when the component first renders. Defaults to `0`.\n	 */\n	defaultSelectedIndex: PropTypes.number,\n\n	/**\n	 * This function triggers when a tab is selected.\n	 */\n	onSelect: PropTypes.func,\n\n	/**\n	 * If the Tabs should be scopped, defaults to false\n	 */\n	variant: PropTypes.oneOf(['default', 'scoped']),\n\n	/**\n	 * The Tab (and corresponding TabPanel) that is currently selected.\n	 */\n	selectedIndex: PropTypes.number,\n}
/Users/vu/forks/design-system-react/components/date-picker/private/day.jsx:151:propTypes = {\n	/**\n	 * If elements within the calendar have focus. This is helpful for keyboard event trapping.\n	 */\n	calendarHasFocus: PropTypes.bool.isRequired,\n	/**\n	 * Date of day\n	 */\n	date: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * If date is disabled\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n	 */\n	initialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * Triggered when the keyboard moves focus off the calendar.\n	 */\n	onCalendarBlur: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the next day on the calendar. Triggered when right arrow button is pressed.\n	 */\n	onKeyboardNavigateToNextDay: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the same day in the next week on the calendar. Triggered when down arrow button is pressed.\n	 */\n	onKeyboardNavigateToNextWeek: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the previous day on the calendar. Triggered when left arrow button is pressed.\n	 */\n	onKeyboardNavigateToPreviousDay: PropTypes.func.isRequired,\n	/**\n	 * For keyboard navigation. Changes the focus to the same day in the previous week on the calendar. Triggered when up arrow button is pressed.\n	 */\n	onKeyboardNavigateToPreviousWeek: PropTypes.func.isRequired,\n	/**\n	 * Triggered when a date on the calendar is clicked.\n	 */\n	onSelectDate: PropTypes.func.isRequired,\n	/**\n	 * Currently selected date. This should be present in the input field.\n	 */\n	selectedDate: PropTypes.instanceOf(Date).isRequired,\n	/**\n	 * Component reference / DOM node for selected day.\n	 */\n	selectedDateRef: PropTypes.func.isRequired,\n	/**\n	 * Label of shortcut to jump to today within the calendar. Also used for assistive text for the current day.\n	 */\n	todayLabel: PropTypes.string.isRequired,\n	focusedDate: PropTypes.instanceOf(Date),\n	onRequestInternalFocusDate: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/lookup/private/menu.jsx:13:propTypes = {\n	boldRegex: PropTypes.instanceOf(RegExp),\n	emptyMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n	filterWith: PropTypes.func,\n	focusIndex: PropTypes.number,\n	getListLength: PropTypes.func,\n	iconCategory: PropTypes.string,\n	items: PropTypes.array,\n	label: PropTypes.string,\n	listLength: PropTypes.number,\n	searchTerm: PropTypes.string,\n	setFocus: PropTypes.func,\n}
/Users/vu/forks/design-system-react/components/trial-bar/index.jsx:14:propTypes = {\n	/**\n	 * Provide children of the types `<TrialBarButton />` or `<TrialBarDropdown />` to define the structure of the trial bar.\n	 * ```\n	 * <TrialBar>\n	 *   <TrialBarButton />\n	 *   <TrialBarDropdown />\n	 * </TrialBar>\n	 * ```\n	 */\n	children: PropTypes.node,\n\n	/**\n	 * CSS classes to be added to the component. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `learnMoreAfter`: Amount of time left in trial, e.g. `30`\n	 * * `learnMoreBefore`: Unit of the amount of time left, e.g. `days`\n	 * * `timeLeftUnitAfter`: String after `timeLeftUnit`\n	 */\n	labels: PropTypes.shape({\n		timeLeft: PropTypes.string,\n		timeLeftUnit: PropTypes.string,\n		timeLeftUnitAfter: PropTypes.string,\n	}),\n	/**\n	 * Renders the actions section of the trial bar.\n	 */\n	onRenderActions: PropTypes.func,\n	/**\n	 * Customs styles to be applied to the component.\n	 */\n	style: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/lookup/header.jsx:12:propTypes = {}
/Users/vu/forks/design-system-react/components/tabs/private/tab-panel.jsx:47:propTypes = {\n	/**\n	 * The `children` are the contents of the tab panel.\n	 *\n	 * Note that the structure of the `<Tabs />` component **does not** correspond to the DOM structure that is rendered. The `<Tabs />` component requires one or more children of type `<TabsPanel />`, which themselves require a `label` property which will be what shows in the `<Tab />` and has `children`, which end up being the _contents of the tab's corresponding panel_.\n	 *\n	 * The component iterates through each `<TabsPanel />` and rendering one `<Tab />` and one `<TabPanel />` for each of them. The tab(s) end up being children of the `<TabsList />`.\n	 *\n	 * The tab panel component actually returns the _children_ of the _children_ which were provided by the `<TabsPanel />` component.\n	 *\n	 * Due to React's nature, the `<TabsPanel />` component wraps its children in a `div` element which we don't need nor want in our rendered DOM structure, so we just bypass it and get its kids via `{children.props.children}` in the render method below.\n	 * ```\n	 * <Tabs>\n	 * 	<TabsPanel label="Tab 1">\n	 * 		<h2 className="slds-text-heading_medium">This is my tab 1 contents!</h2>\n	 * 		<p>They show when you click the first tab.</p>\n	 * 	</TabsPanel>\n	 * 	<TabsPanel label="Tab 2">\n	 * 		<h2 className="slds-text-heading_medium">This is my tab 2 contents!</h2>\n	 * 		<p>They show when you click the second tab.</p>\n	 * 	</TabsPanel>\n	 * </Tabs>\n	 * ```\n	 */\n	children: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n\n	/**\n	 * CSS classes to be added to the tab panel.\n	 */\n	className: PropTypes.string,\n\n	/**\n	 * The HTML ID of this tab panel. Also used by the `<Tab />`that controls it as `panelId`.\n	 */\n	id: PropTypes.string,\n\n	/**\n	 * Whether this panel is hidden or shown. Uses the `.slds-show` and `.slds-hide` classes.\n	 */\n	selected: PropTypes.bool,\n\n	/**\n	 * If the Tabs should be scopped, defaults to false\n	 */\n	variant: PropTypes.oneOf(['default', 'scoped']),\n\n	/**\n	 * The HTML ID of the `<Tab />` that controls this panel.\n	 */\n	tabId: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/tabs/private/tab.jsx:29:propTypes = {\n		/**\n		 * CSS classes to be added to the tab.\n		 */\n		className: PropTypes.string,\n\n		/**\n		 * The HTML ID of this tab. Also used by the `<TabPanel />` it controls as `tabId`.\n		 */\n		id: PropTypes.string,\n\n		/**\n		 * Whether to apply focus to this tab.\n		 */\n		focus: PropTypes.bool,\n\n		/**\n		 * When `true`, the class `.slds-active` is applied.\n		 */\n		selected: PropTypes.bool,\n\n		/**\n		 * When `true`, the HTML attribute `aria-disabled` will be applied. Disabled Tab CSS has been removed. If you'd like to use the styling, please import it in your module bundler. `import 'css-loader!/node_modules/design-system-react/styles/tabs/tab.css';` This feature may be removed in the future due to disabled tabs being inaccessible.\n		 */\n		disabled: PropTypes.bool,\n\n		/**\n		 * The CSS class to be applied when this tab is selected. Defaults to `.slds-active`. If another class is desired, it should be passed in _along with_ `.slds-active`, not _instead_ of it.\n		 */\n		activeTabClassName: PropTypes.string,\n\n		/**\n		 * The CSS class to be applied when this tab is disabled. Defaults to `.slds-disabled`. If another class is desired, it should be passed in _along with_ `.slds-disabled`, not _instead_ of it.\n		 */\n		disabledTabClassName: PropTypes.string,\n\n		/**\n		 * The HTML ID of `<TabPanel />` this tab controls.\n		 */\n		panelId: PropTypes.string,\n\n		/**\n		 * The string or element that is shown as both the title and the label for this tab.\n		 */\n		children: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n		/**\n		 * If the Tabs should be scopped, defaults to false\n		 */\n		variant: PropTypes.oneOf(['default', 'scoped']),\n	}
/Users/vu/forks/design-system-react/components/date-picker/private/calendar.jsx:13:propTypes = {\n		/**\n		 * Three letter abbreviations of the days of the week, starting on Sunday.\n		 */\n		abbreviatedWeekDayLabels: PropTypes.array.isRequired,\n		/**\n		 * dateDisabled() takes a date as input argument, returns true if given date should be disabled, otherwise returns false.\n		 */\n		dateDisabled: PropTypes.func,\n		/**\n		 * HTML id for component\n		 */\n		id: PropTypes.string.isRequired,\n		/**\n		 * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n		 */\n		initialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n		/**\n		 * Makes Monday the first day of the week\n		 */\n		isIsoWeekday: PropTypes.bool,\n		/**\n		 * Triggered when the keyboard moves focus off the calendar.\n		 */\n		onCalendarBlur: PropTypes.func.isRequired,\n		/**\n		 * Displayed calendar has changed or re-rendered\n		 */\n		onChangeMonth: PropTypes.func.isRequired,\n		/**\n		 * Internal callback that will eventually trigger when the keyboard moves focus on the calendar. `{date: [Date object], formattedDate: [string]}`.\n		 */\n		onRequestInternalFocusDate: PropTypes.func,\n		/**\n		 * Triggered when the calendar is cancelled.\n		 */\n		onRequestClose: PropTypes.func.isRequired,\n		/**\n		 * Triggered when a date on the calendar is clicked.\n		 */\n		onSelectDate: PropTypes.func.isRequired,\n		/**\n		 * Currently selected date. This should be present in the input field.\n		 */\n		selectedDate: PropTypes.instanceOf(Date),\n		/**\n		 * Component reference / DOM node for selected day.\n		 */\n		selectedDateRef: PropTypes.func,\n		/**\n		 * Label of shortcut to jump to today within the calendar. This is also used for assistive text on today's date.\n		 */\n		todayLabel: PropTypes.string.isRequired,\n		/**\n		 * For keyboard navigation. Listens for key presses on the last focusable DOM Node, the "Today" link, so that dialog focus can be trapped.\n		 */\n		onLastFocusableNodeKeyDown: PropTypes.func,\n		/**\n		 * Callback that passes in the DOM reference of the Today `a` DOM node within this component. Primary use is to allow `focus` to be called. You should still test if the node exists, since rendering is asynchronous. `buttonRef={(component) => { if(component) console.log(component); }}`\n		 */\n		todayRef: PropTypes.func,\n		/**\n		 * Names of the seven days of the week, starting on Sunday.\n		 */\n		weekDayLabels: PropTypes.array.isRequired,\n	}
/Users/vu/forks/design-system-react/components/page-header/private/label.jsx:10:propTypes = {\n	/**\n	 * Contents of label section\n	 */\n	content: PropTypes.node,\n	/**\n	 * An array of react elements, presumably anchor <a> elements.\n	 */\n	trail: PropTypes.array,\n}
/Users/vu/forks/design-system-react/components/tabs/panel.jsx:29:propTypes = {\n	/**\n	 * The string or element that is handed off to the `<Tab />` component, ends up being the title and the label for the tab associated with its tab panel.\n	 */\n	label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n\n	/**\n	 * The `children` are the actual tab panels to be rendered. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabPanels` function.\n	 *\n	 * Note that the `<TabsPanel />` component inserts a `div` element around the children, because React requires exactly one "parent" element returned. The `<TabPanel />` component simply dips down into `children` to get the children of this wrapping `div` so that it does not get rendered in the DOM.\n	 */\n	children: PropTypes.oneOfType([\n		PropTypes.arrayOf(PropTypes.node),\n		PropTypes.node,\n		PropTypes.element,\n	]).isRequired,\n}
/Users/vu/forks/design-system-react/components/tabs/private/tabs-list.jsx:33:propTypes = {\n	/**\n	 * Inherits the `id` from the parent `<Tabs />` component and appends `-tabs__nav`. Becomes the HTML `id` attribute of UL element that has the class `.slds-tabs_default__nav` on it.\n	 */\n	id: PropTypes.string,\n\n	/**\n	 * Class names to be added to the tabs list element.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n\n	/**\n	 * The `children` are the actual tabs to be rendered as `li` elements. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabsList` function.\n	 */\n	children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n	/**\n	 * If the Tabs should be scopped, defaults to false\n	 */\n	variant: PropTypes.oneOf(['default', 'scoped']),\n}
/Users/vu/forks/design-system-react/components/page-header/private/detail-block.jsx:12:propTypes = {\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * The content property can be a string or a React element\n	 */\n	content: PropTypes.node,\n	/**\n	 * Sets the 'flavor' of a block, which adds the following sizing class: `slds-size_${flavor}`\n	 */\n	flavor: PropTypes.string,\n	/**\n	 * Sets the label of a detail block\n	 */\n	label: PropTypes.node,\n	/**\n	 * Sets whether the fields truncate\n	 */\n	truncate: PropTypes.bool,\n}
/Users/vu/forks/design-system-react/components/color-picker/index.jsx:27:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `label`: Visually hidden label but read out loud by screen readers.\n	 * * `hueSlider`: Instructions for hue selection input\n	 * * `saturationValueGrid`: Instructions for using the grid for saturation\n	 * and value selection\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n		hueSlider: PropTypes.string,\n		saturationValueGrid: PropTypes.string,\n	}),\n	/**\n	 * CSS classes to be added to tag with `.slds-color-picker`. Uses `classNames` [API](https://github.com/JedWatson/classnames). _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes to be added to tag with `.slds-popover`. Uses `classNames` [API](https://github.com/JedWatson/classnames). _Tested with snapshot testing._\n	 */\n	classNameMenu: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Unique ID for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Disables the input and button.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Message to display when the outer input is in an error state. When this is present, also visually highlights the component as in error.\n	 */\n	errorText: PropTypes.string,\n	/**\n	 * Message to display when the custom tab input is in an error state. When this is present, also visually highlights the component as in error.\n	 */\n	errorTextWorkingColor: PropTypes.string,\n	/**\n	 * Event Callbacks\n	 * * `onChange`: This function is triggered when done is clicked. This function returns `{event, { color: [string] }}`, which is a hex representation of the color.\n	 * * `onClose`: This function is triggered when the menu is closed. This function returns `{event, { trigger, componentWillUnmount }}`. Trigger can have the values `cancel`, `clickOutside`, or `newPopover`.\n	 * * `onOpen`: This function is triggered when the color-picker menu is mounted and added to the DOM. The parameters are `event, { portal: }`. `portal` can be used as a React tree root node.\n	 * * `onRequestClose`:  This function is triggered when the user clicks outside the menu or clicks the close button. You will want to define this if color-picker is to be a controlled component. Most of the time you will want to set `isOpen` to `false` when this is triggered unless you need to validate something.\n	 * 						This function returns `{event, {trigger: [string]}}` where `trigger` is either `cancel` or `clickOutside`.\n	 * * `onRequestOpen`: Function called when the color-picker menu would like show.\n	 * * `onValidateColor`: Function that overwrites default color validator and called when validating HEX color on outer input change. If callback returns false, errorText is shown if set.\n	 * * `onValidateWorkingColor`: Function that overwrites default color validator and called when validating HEX color on custom tab inner input change. If callback returns false, errorTextWorkingColor is shown if set.\n	 * * `onWorkingColorChange`: This function is triggered when working color changes (color inside the custom tab). This function returns `{event, { color: [string] }}`, which is a hex representation of the color.\n	 * _Tested with Mocha framework._\n	 */\n	events: PropTypes.shape({\n		onChange: PropTypes.func,\n		onClose: PropTypes.func,\n		onOpen: PropTypes.func,\n		onRequestClose: PropTypes.func,\n		onRequestOpen: PropTypes.func,\n		onValidateColor: PropTypes.func,\n		onValidateWorkingColor: PropTypes.func,\n		onWorkingColorChange: PropTypes.func,\n	}),\n	/**\n	 * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n	 */\n	hasStaticAlignment: PropTypes.bool,\n	/**\n	 * Hides the text input\n	 */\n	hideInput: PropTypes.bool,\n	/**\n	 * Popover open state\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * **Text labels for internationalization**\n	 * * `blueAbbreviated`: One letter abbreviation of blue color component\n	 * * `cancelButton`: Text for cancel button on popover\n	 * * `customTab`: Text for custom tab of popover\n	 * * `customTabActiveWorkingColorSwatch`: Label for custom tab active working color swatch\n	 * * `customTabTransparentSwatch`: Label for custom tab active transparent swatch\n	 * * `greenAbbreviated`: One letter abbreviation of green color component\n	 * * `hexLabel`: Label for input of hexadecimal color\n	 * * `invalidColor`: Error message when hex color input is invalid\n	 * * `invalidComponent`: Error message when a component input is invalid\n	 * * `label`: An `input` label as for a `form`\n	 * * `redAbbreviated`: One letter abbreviation of red color component\n	 * * `swatchTab`: Label for swatch tab of popover\n	 * * `submitButton`: Text for submit/done button of popover\n	 */\n	labels: PropTypes.shape({\n		blueAbbreviated: PropTypes.string,\n		cancelButton: PropTypes.string,\n		customTab: PropTypes.string,\n		customTabActiveWorkingColorSwatch: PropTypes.string,\n		customTabTransparentSwatch: PropTypes.string,\n		greenAbbreviated: PropTypes.string,\n		hexLabel: PropTypes.string,\n		invalidColor: PropTypes.string,\n		invalidComponent: PropTypes.string,\n		label: PropTypes.string,\n		redAbbreviated: PropTypes.string,\n		swatchTab: PropTypes.string,\n		swatchTabTransparentSwatch: PropTypes.string,\n		submitButton: PropTypes.string,\n	}),\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	menuPosition: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n	/**\n	 * An array of hex color values which is used to set the options of the\n	 * swatch tab of the colorpicker popover.\n	 * To specify transparent, use empty string as a value.\n	 */\n	swatchColors: PropTypes.arrayOf(PropTypes.string),\n	/**\n	 * Determines which tab is visible when dialog opens. Use this prop with `base` variant only.\n	 * Defaults to `swatch` tab.\n	 */\n	defaultSelectedTab: PropTypes.oneOf(['swatches', 'custom']),\n	/**\n	 * Selects which tabs are present for the colorpicker.\n	 * * `base`: both swatches and custom tabs are present\n	 * * `swatches`: only swatch tab is present\n	 * * `custom`: only custom tab is present\n	 * _Tested with snapshot testing._\n	 */\n	variant: PropTypes.oneOf(['base', 'swatches', 'custom']),\n	/**\n	 * Current color in hexadecimal string, including # sign (eg: "#000000")\n	 */\n	value: PropTypes.string,\n	/**\n	 * Current working color in hexadecimal string, including # sign (eg: "#000000")\n	 */\n	valueWorking: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/checkbox/index.jsx:32:propTypes = {\n	/**\n	 * An HTML ID that is shared with ARIA-supported devices with the\n	 * `aria-controls` attribute in order to relate the input with\n	 * another region of the page. An example would be a select box\n	 * that shows or hides a panel.\n	 */\n	'aria-controls': PropTypes.string,\n	/**\n	 * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.\n	 */\n	'aria-describedby': PropTypes.string,\n	/**\n	 * The aria-labelledby attribute establishes relationships between objects and their label(s), and its value should be one or more element IDs, which refer to elements that have the text needed for labeling. List multiple element IDs in a space delimited fashion.\n	 */\n	'aria-labelledby': PropTypes.string,\n	/**\n	 * `aria-owns` indicate that an element depends on the current one when the relation can't be determined by the hierarchy structure.\n	 */\n	'aria-owns': PropTypes.string,\n	/**\n	 * The `aria-required` attribute is used to indicate that user input is required on an element before a form can be submitted.\n	 */\n	'aria-required': PropTypes.bool,\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `heading`: This is used as a visually hidden label if, no `labels.heading` is provided.\n	 * * `label`: This is used as a visually hidden label if, no `labels.label` is provided.\n	 */\n	assistiveText: PropTypes.shape({\n		heading: PropTypes.string,\n		label: PropTypes.string,\n	}),\n	/**\n	 * The Checkbox should be a controlled component, and will always be in the state specified. If checked is not defined, the state of the uncontrolled native `input` component will be used.\n	 */\n	checked: PropTypes.bool,\n	/**\n	 * This is the initial value of an uncontrolled form element and is present only\n	 * to provide compatibility with hybrid framework applications that are not\n	 * entirely React. It should only be used in an application without centralized\n	 * state (Redux, Flux). "Controlled components" with centralized state is highly recommended. See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n	 */\n	defaultChecked: PropTypes.bool,\n	/**\n	 * Class names to be added to the outer container of the Checkbox.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Disables the Checkbox and prevents clicking it.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Message to display when the Checkbox is in an error state. When this is present, also visually highlights the component as in error.\n	 */\n	errorText: PropTypes.string,\n	/**\n	 * A unique ID is needed in order to support keyboard navigation and ARIA support. This ID is added to the `input` element\n	 */\n	id: PropTypes.string,\n	/**\n	 * The Checkbox will be indeterminate if its state can not be figured out or is partially checked. Once a checkbox is indeterminate, a click should cause it to be checked. Since a user cannot put a checkbox into an indeterminate state, it is assumed you are controlling the value of `checked` with the parent, also, and that this is a controlled component. **Note:** `indeterminate` proptype does nothing in the `toggle` variant, as [SLDS does not support it](https://lightningdesignsystem.com/components/forms/#flavor-checkbox-toggle-checkbox-toggle).\n	 */\n	indeterminate: PropTypes.bool,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `heading`: Heading for the visual picker variant\n	 * * `label`: Label for the _enabled_ state of the Toggle variant. Defaults to "Enabled".\n	 * * `toggleDisabled`: Label for the _disabled_ state of the Toggle variant. Defaults to "Disabled". Note that this uses SLDS language, and meaning, of "Enabled" and "Disabled"; referring to the state of whatever the checkbox is _toggling_, not whether the checkbox itself is enabled or disabled.\n	 * * `toggleEnabled`: Label for the _enabled_ state of the Toggle variant. Defaults to "Enabled".\n	 */\n	labels: PropTypes.shape({\n		heading: PropTypes.string,\n		label: PropTypes.string,\n		toggleDisabled: PropTypes.string,\n		toggleEnabled: PropTypes.string,\n	}),\n	/**\n	 * Name of the submitted form parameter.\n	 */\n	name: PropTypes.string,\n	/**\n	 * This event fires when the Checkbox looses focus. It passes in `{ event }`.\n	 */\n	onBlur: PropTypes.func,\n	/**\n	 * This event fires when the Checkbox changes. Passes in `event, { checked }`. This used to be `checked, event, { checked }`.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * This event fires when the Checkbox is focused. It passes in `{ event }`.\n	 */\n	onFocus: PropTypes.func,\n	/**\n	 * This event fires when a key is pressed down. It passes in `{ event }`.\n	 */\n	onKeyDown: PropTypes.func,\n	/**\n	 * This event fires when a character is typed. See [this article](http://www.bloggingdeveloper.com/post/KeyPress-KeyDown-KeyUp-The-Difference-Between-Javascript-Key-Events.aspx) for more information. It passes in `{ event }`.\n	 */\n	onKeyPress: PropTypes.func,\n	/**\n	 * This event fires when a pressed key is released. It passes in `{ event }`.\n	 */\n	onKeyUp: PropTypes.func,\n	/**\n	 * Displays the value of the input, but does not allow changes.\n	 */\n	readOnly: PropTypes.bool,\n	/**\n	 * Highlights the Checkbox as a required field (does not perform any validation).\n	 */\n	required: PropTypes.bool,\n	/**\n	 * The aria-role of the checkbox.\n	 */\n	role: PropTypes.string,\n	/**\n	 * Which UX pattern of checkbox? The default is `base` while other option is `toggle`. (**Note:** `toggle` variant does not support the `indeterminate` feature, because [SLDS does not support it](https://lightningdesignsystem.com/components/forms/#flavor-checkbox-toggle-checkbox-toggle).)\n	 */\n	variant: PropTypes.oneOf(['base', 'toggle', 'button-group', 'visual-picker']),\n	/**\n	 * Determines whether visual picker is coverable when selected (only for visual picker variant)\n	 */\n	coverable: PropTypes.bool,\n	/**\n	 * Determines whether the visual picker should be vertical or horizontal (only for visual picker variant)\n	 */\n	vertical: PropTypes.bool,\n	/**\n	 * Allows icon to shown with checkbox (only for non-coverable visual picker variant)\n	 */\n	onRenderVisualPicker: PropTypes.func,\n	/**\n	 * Allows icon to shown if checkbox is not selected (only for visual picker variant)\n	 */\n	onRenderVisualPickerSelected: PropTypes.func,\n	/**\n	 * Allows icon to shown if checkbox is not selected (only for visual picker variant)\n	 */\n	onRenderVisualPickerNotSelected: PropTypes.func,\n	/**\n	 * Size of checkbox in case of visual composer variant\n	 */\n	size: PropTypes.oneOf(['medium', 'large']),\n}
/Users/vu/forks/design-system-react/components/page-header/private/title.jsx:11:propTypes = {\n	/**\n	 * Sets the vertical alignment on the title\n	 */\n	align: PropTypes.oneOf(['top', 'middle', 'bottom']),\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * The title content\n	 */\n	content: PropTypes.node,\n	/**\n	 * Label node, for variants that require a label within the title\n	 */\n	label: PropTypes.node,\n	/**\n	 * Sets whether the title will truncate its content responsively.\n	 */\n	truncate: PropTypes.bool,\n}
/Users/vu/forks/design-system-react/components/color-picker/private/swatch.jsx:27:propTypes = {\n	color: PropTypes.string.isRequired,\n}
/Users/vu/forks/design-system-react/components/page-header/private/record-home/index.jsx:15:propTypes = {\n	/**\n	 * An array of detail blocks (used in "recordHome" variant)\n	 */\n	details: PropTypes.array,\n	/**\n	 * The label property can be a string or a React element\n	 */\n	label: PropTypes.node,\n	/**\n	 * The page header icon\n	 */\n	icon: PropTypes.element,\n	/**\n	 * Content to appear on the right hand side of the page header\n	 * prop 'contentRight' will be deprecated soon, use 'onRenderActions' instead\n	 */\n	onRenderActions: PropTypes.func,\n	/**\n	 * The title property can be a string or a React element\n	 */\n	title: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/page-header/private/controls.jsx:12:propTypes = {\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Type of this controls component ('actions' or 'controls')\n	 */\n	type: PropTypes.oneOf(['actions', 'controls']),\n}
/Users/vu/forks/design-system-react/components/progress-bar/index.jsx:17:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `progress`: This is a visually hidden label for the percent of progress.\n	 * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({ progress: PropTypes.string }),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS classes to be added to tag with `.slds-progress-bar`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Label for the progress bar\n	 */\n	labels: PropTypes.shape({\n		label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		complete: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	}),\n	/**\n	 *  Set radius of progress bar\n	 */\n	radius: PropTypes.oneOf(['circular']),\n	/**\n	 *  Set fill of progress bar\n	 */\n	color: PropTypes.oneOf(['success']),\n	/**\n	 *  Set progress bar thickness\n	 */\n	thickness: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n	/**\n	 * Percentage of progress completion, ranging [0, 100].\n	 */\n	value: PropTypes.number.isRequired,\n	/**\n	 * Orientation of the progress bar to be used\n	 */\n	orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n	/**\n	 * Custom styles to be passed to the component\n	 */\n	style: PropTypes.object,\n}
/Users/vu/forks/design-system-react/components/page-header/private/info.jsx:9:propTypes = {\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Contents of info section\n	 */\n	content: PropTypes.node,\n	/**\n	 * Variant passed down from page header\n	 */\n	variant: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/toast/container.jsx:11:propTypes = {\n	/**\n	 * CSS classes to be added to tag with `.slds-notify-container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Toast components\n	 */\n	children: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/icon/index.jsx:118:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. Naked icons must have assistive text, however, if you also have visible descriptive text with the icon, declare this prop as <code>assistiveText=''</code>.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n	 */\n	category: PropTypes.oneOf([\n		'action',\n		'custom',\n		'doctype',\n		'standard',\n		'utility',\n	]).isRequired,\n	/**\n	 * CSS classes that are applied to the SVG.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * CSS classes that are applied to the span.\n	 */\n	containerClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Styles that are applied to the span.\n	 */\n	containerStyle: PropTypes.object,\n	/**\n	 * Icon color variants\n	 */\n	colorVariant: PropTypes.oneOf([\n		'base',\n		'default',\n		'error',\n		'light',\n		'warning',\n	]),\n	/**\n	 * A custom SVG object to use instead of the supplied SLDS icons, look in `design-system-react/icons` for examples and syntax.\n	 */\n	icon: PropTypes.object,\n	/**\n	 * Setting `inverse` to true will switch the color of the icon: light to dark, dark to light.\n	 */\n	inverse: PropTypes.bool,\n	/**\n	 * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n	 */\n	name: PropTypes.string,\n	/**\n	 * Path to the icon. This will override any global icon settings\n	 */\n	path: PropTypes.string,\n	/**\n	 * Background theme color for the icon. **Only compatible with icon category `standard`**\n	 */\n	productTheme: PropTypes.oneOf([\n		'global-setup',\n		'service-cloud',\n		'industry-cloud',\n		'sales-cloud',\n		'commerce-cloud',\n		'community-cloud',\n		'marketing-cloud',\n		'quip',\n	]),\n	/**\n	 * Size of the icon. Visit [lightningdesignsystem.com/components/icons/#flavor-sizes](https://www.lightningdesignsystem.com/components/icons/#flavor-sizes)\n	 */\n	size: PropTypes.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),\n	/**\n	 * Custom styles to be passed to the SVG. Could be used to change icon or background color.\n	 */\n	style: PropTypes.object,\n	/**\n	 * Title attribute for the icon container\n	 */\n	title: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/page-header/private/related-list/index.jsx:14:propTypes = {\n	/**\n	 * The label property can be a string or a React element\n	 */\n	label: PropTypes.node,\n	/**\n	 * The info property can be a string or a React element\n	 */\n	info: PropTypes.node,\n	/**\n	 * Content to appear on the right hand side of the page header\n	 * prop 'contentRight' will be deprecated soon, use 'onRenderActions' instead\n	 */\n	onRenderActions: PropTypes.func,\n	/**\n	 * Nav content which appears in the upper right hand corner.\n	 * prop 'navRight' will be deprecated soon, use 'onRenderControls' instead\n	 */\n	onRenderControls: PropTypes.func,\n	/**\n	 * The title property can be a string or a React element\n	 */\n	title: PropTypes.node,\n	/**\n	 * An array of react elements presumably anchor <a> elements.\n	 */\n	trail: PropTypes.array,\n	/**\n	 * The type of component\n	 * Note: Extra options are added to make the version backward compatible\n	 */\n	variant: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/page-header/private/detail-row.jsx:10:propTypes = {\n	children: PropTypes.node,\n	/**\n	 * Optional class name\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * An array of detail blocks\n	 */\n	details: PropTypes.array,\n}
/Users/vu/forks/design-system-react/components/icon/button-icon/index.jsx:50:propTypes = {\n	/**\n	 * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n	 */\n	category: PropTypes.oneOf([\n		'action',\n		'custom',\n		'doctype',\n		'standard',\n		'utility',\n	]).isRequired,\n	/**\n	 * Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#hint">Lightning Design System Buttons > Hint</a>.\n	 */\n	hint: PropTypes.bool,\n	/**\n	 * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples\n	 */\n	icon: PropTypes.object,\n	/**\n	 * Class names to be added to the SVG.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Setting `inverse` to true will switch the color of the icon: light to dark, dark to light.\n	 */\n	inverse: PropTypes.bool,\n	/**\n	 * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n	 */\n	name: PropTypes.string,\n	/**\n	 * Path to the icon. This will override any global icon settings.\n	 */\n	path: PropTypes.string,\n	/**\n	 * Adds additional spacing on the opposite side specified between button icon and the button label\n	 */\n	position: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * Size of the icon. Visit [lightningdesignsystem.com/components/icons/#flavor-sizes](https://www.lightningdesignsystem.com/components/icons/#flavor-sizes)\n	 */\n	size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n}
/Users/vu/forks/design-system-react/components/toast/index.jsx:21:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `closeButton`: This is a visually hidden label for the close button.\n	 * * `error`: This is a visually hidden label to mark the toast as an error variant\n	 * * `info`: This is a visually hidden label to mark the toast as an info variant\n	 * * `success`: This is a visually hidden label to mark the toast as an success variant\n	 * * `warning`: This is a visually hidden label to mark the toast as an warning variant\n	 * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		closeButton: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	}),\n	/**\n	 * CSS classes to be added to tag with `.slds-notify_toast`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 * _Tested with snapshot testing._\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * If duration exists, the Toast will disappear after that amount of time. Time in milliseconds. _Tested with Mocha testing._\n	 */\n	duration: PropTypes.number,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `details`: Secondary text below heading\n	 * * `heading`: text within heading tag\n	 * * `headingLink`: Text of link that triggers `onClickHeadingLink`. Inline links should pass a keyed array of React components into `labels.heading`.\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	labels: PropTypes.shape({\n		details: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		heading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		headingLink: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	}),\n	/**\n	 * Triggered by link. _Tested with Mocha testing._\n	 */\n	onClickHeadingLink: PropTypes.func,\n	/**\n	 * Icon of type `~/components/icon`. This icon will be cloned and additional props appended. The default icons are:\n	 * * info variant: `utility:info`\n	 * * error variant: `utility:error`\n	 * * success variant: `utility:success`\n	 * * warning variant: `utility:warning`\n	 *\n	 * _Tested with snapshot testing._\n	 */\n	icon: PropTypes.node,\n	/**\n	 * Triggered by close button. _Tested with Mocha testing._\n	 */\n	onRequestClose: PropTypes.func,\n	/**\n	 * Custom styles to be passed to the component. _Tested with Mocha testing._\n	 */\n	style: PropTypes.object,\n	/**\n	 * The type of Toast. _Tested with snapshot testing._\n	 */\n	variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n}
/Users/vu/forks/design-system-react/components/page-header/private/object-home/index.jsx:16:propTypes = {\n	/**\n	 * The label property can be a string or a React element\n	 */\n	label: PropTypes.node,\n	/**\n	 * The page header icon\n	 */\n	icon: PropTypes.element,\n	/**\n	 * The info property can be a string or a React element\n	 */\n	info: PropTypes.node,\n	/**\n	 * Used with the `object-home` variant. Accepts a node, typically a Dropdown component\n	 */\n	nameSwitcherDropdown: PropTypes.node,\n	/**\n	 * Content to appear on the right hand side of the page header\n	 * prop 'contentRight' will be deprecated soon, use 'onRenderActions' instead\n	 */\n	onRenderActions: PropTypes.func,\n	/**\n	 * Nav content which appears in the upper right hand corner.\n	 * prop 'navRight' will be deprecated soon, use 'onRenderControls' instead\n	 */\n	onRenderControls: PropTypes.func,\n	/**\n	 * The title property can be a string or a React element\n	 */\n	title: PropTypes.node,\n	/**\n	 * An array of react elements presumably anchor <a> elements.\n	 */\n	trail: PropTypes.array,\n	/**\n	 * The type of component\n	 * Note: Extra options are added to make the version backward compatible\n	 */\n	variant: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/accordion/panel.jsx:16:propTypes = {\n	/**\n	 * The panel content for the Accordion component. Accordion panels should be added as <AccordionPanel />. Event handler for the accordion panels should be added to `<AccordionPanel />`. Optional `panelContentActions` component may be passed as prop. _Tested with Mocha framework and snapshot testing._\n	 */\n	children: PropTypes.node,\n	/**\n	 * Indicates whether item is expanded or not, which should be handled by `onTogglePanel`. _Tested with Mocha framework and snapshot testing._\n	 */\n	expanded: PropTypes.bool.isRequired,\n	/**\n	 * Id of the item belonging to this panel. _Tested with snapshot testing._\n	 */\n	id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n	/**\n	 * Component that can be passed as prop to `<Panel />`. As an example, a menu dropdown could be used here to handle additional actions for each accordion panel. _Tested with Mocha framework._\n	 */\n	panelContentActions: PropTypes.node,\n	/**\n	 * Callback that will run whenever there is a keydown on the panel button. Function doesn't change the state of the component.\n	 */\n	onKeyDownSummary: PropTypes.func,\n	/**\n	 * Callback that will run whenever a panel is toggled. Function should handle state to toggle `expanded` prop. _Tested with Mocha framework._\n	 */\n	onTogglePanel: PropTypes.func.isRequired,\n	/**\n	 * Ref callback that will pass in panel's `input` tag\n	 */\n	refs: PropTypes.shape({\n		summaryButton: PropTypes.func,\n	}),\n	/**\n	 * Summary in the span element in the header of this panel. The summary is truncated and so the title element should contain the full text so that it is accessible on hover. _Tested with snapshot testing._\n	 */\n	summary: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n	/**\n	 * HTML title attribute. _Tested with snapshot testing._\n	 */\n	title: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/filter/index.jsx:41:propTypes = {\n		/**\n		 * Aligns the popover with the respective side of the trigger. That is `left` will place the `Popover` to the left of the Filter.\n		 */\n		align: PropTypes.oneOf(['left', 'right']),\n		/**\n		 * **Assistive text for accessibility**\n		 * * `removeFilter`: Assistive text for removing a filter. The default is `Remove Filter: this.props.property this.props.predicate`.\n		 * * `editFilter`: Assistive text for changing a filter.\n		 * * `editFilterHeading`: Assistive text for Popover heading.\n		 */\n		assistiveText: PropTypes.shape({\n			editFilter: PropTypes.string,\n			editFilterHeading: PropTypes.string,\n			removeFilter: PropTypes.string,\n		}),\n		/**\n		 * Contents of popover. That is the dropdowns and inputs that set the filter criteria.\n		 */\n		children: PropTypes.node,\n		/**\n		 * Custom CSS classes for `slds-filters__item` node. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Applies error state styling. Per filter error messages are outside this components.\n		 */\n		isError: PropTypes.bool,\n		/**\n		 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button. An `id` will be generated if none is supplied.\n		 */\n		id: PropTypes.string,\n		/**\n		 * If true, the filter will not display an editing popover when clicked.\n		 */\n		isLocked: PropTypes.bool,\n		/**\n		 * Applies new filter styling.\n		 */\n		isNew: PropTypes.bool,\n		/**\n		 * If true, the filter will not include a remove button.\n		 */\n		isPermanent: PropTypes.bool,\n		/**\n		 * Will be triggered when Done within the Popover is clicked. This is the place to update the filter props displayed. Callback will recieve parameters: `clickEvent, { id }`. An index into your store may be a good setting for `id`, so that it will be passed back here.\n		 */\n		onChange: PropTypes.func,\n		/**\n		 * Will be triggered when "Remove Filter" button is clicked. Callback will recieve parameters: `clickEvent, { id }`. An index into your store may be a good setting for `id`, so that it will be passed back here.\n		 */\n		onRemove: PropTypes.func,\n		/**\n		 * Will be triggered when Filter is clicked. This is the place to close/open popover if a custom popover is passed in\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * A `Popover` component. The props from this popover will be merged and override any default props. This also allows a Filter's Popover dialog to be a controlled component. _Tested with Mocha framework._\n		 */\n		popover: PropTypes.node,\n		/**\n		 * The criteria you are filtering for. For instance, if "Hair Color is PURPLE" is your filter, "is PURPLE" is your filter predicate.\n		 */\n		predicate: PropTypes.node,\n		/**\n		 * The property you are filtering. For instance, if "Hair Color is PURPLE" is your filter, "Hair Color" is your filter property.\n		 */\n		property: PropTypes.node,\n	}
/Users/vu/forks/design-system-react/components/expandable-section/index.jsx:22:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * * `toggleSection`: Label for the icon that expands / collapses the section\n	 */\n	assistiveText: PropTypes.shape({\n		toggleSection: PropTypes.string,\n	}),\n	/**\n	 * Contents of the section\n	 */\n	children: PropTypes.node,\n	/**\n	 * Class names to be added to the `slds-section` classed node\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Unique identifier for the expandable section. The id is automatically generated if not provided\n	 */\n	id: PropTypes.string,\n	/**\n	 * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * Specifies whether the section can be expanded or collapsed. Defaults to `false`\n	 */\n	nonCollapsible: PropTypes.bool,\n	/**\n	 * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.\n	 */\n	onToggleOpen: PropTypes.func,\n	/**\n	 * The title for the section\n	 */\n	title: PropTypes.string.isRequired,\n}
/Users/vu/forks/design-system-react/components/global-header/search.jsx:26:propTypes = {\n	/**\n	 * A required `Combobox` component. The props from this combobox will be merged and override any default props.\n	 */\n	combobox: PropTypes.node.isRequired,\n}
/Users/vu/forks/design-system-react/components/icon/input-icon/index.jsx:91:propTypes = {\n	/**\n	 * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n	 */\n	category: PropTypes.string,\n	/**\n	 * This is only needed if an input contains two icons, the Input component handles this prop for you.\n	 */\n	iconPosition: PropTypes.oneOf(['left', 'right']),\n	/**\n	 * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n	 */\n	name: PropTypes.string,\n	/**\n	 * Path to the icon. This will override any global icon settings.\n	 */\n	path: PropTypes.string,\n	/**\n	 * This event fires when the icon is clicked.\n	 */\n	onClick: PropTypes.func,\n	/**\n	 * Changes styles of the InputIcon.\n	 */\n	variant: PropTypes.oneOf(['base', 'combobox']),\n}
/Users/vu/forks/design-system-react/components/global-header/task.jsx:16:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `triggerButton`: Assistive text for the GlobalHeaderTask trigger button. The default is `Global Actions`.\n	 */\n	assistiveText: PropTypes.shape({\n		triggerButton: PropTypes.string,\n	}),\n	/**\n	 * A `Dropdown` component. The props from this dropdown will be merged and override any default props. This also allows custom content to be passed as children and rendered in the dropdown.\n	 */\n	dropdown: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/breadcrumb/index.jsx:25:propTypes = {\n	/**\n	 * **Assistive text for accessibility.**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: The assistive text for the breadcrumb trail.\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n	}),\n	/**\n	 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Overflow menu of the type [Dropdown](/components/menu-dropdowns)\n	 */\n	overflowDropdownMenu: PropTypes.node,\n	/**\n	 * Custom styles to be passed to the containing `nav` tag\n	 */\n	styleContainer: PropTypes.object,\n	/**\n	 * An array of anchor elements that define the path to the current record.\n	 */\n	trail: PropTypes.array.isRequired,\n}
/Users/vu/forks/design-system-react/components/global-header/index.jsx:60:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `skipToNav`: The localized text that will be read back for the "Skip to Navigation" accessibility link.\n		 * * `skipToContent`: The localized text that will be read back for the "Skip to Main Content" accessibility link.\n		 */\n		assistiveText: PropTypes.shape({\n			skipToNav: PropTypes.string,\n			skipToContent: PropTypes.string,\n		}),\n		/**\n		 * See the component description, this accepts some combination of `SLDSGlobalHeaderSearch`, `SLDSGlobalHeaderButton`, `SLDSGlobalHeaderDropdown`, and `SLDSGlobalHeaderProfile` components.\n		 */\n		children: PropTypes.node,\n		/**\n		 * The Salesforce logo to display in the header.\n		 */\n		logoSrc: PropTypes.string,\n		/**\n		 * Pass in the Global Navigation Bar component\n		 */\n		navigation: PropTypes.node,\n		/**\n		 * Required for accessibility. Should jump the user to the primary content area.\n		 */\n		onSkipToContent: PropTypes.func,\n		/**\n		 * Required for accessibility. Should jump the user to the primary navigation.\n		 */\n		onSkipToNav: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/global-header/private/dropdown-trigger.jsx:39:propTypes = {\n		/**\n		 * An image URL or avatar node to display for the user profile.\n		 */\n		avatar: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		/**\n		 * CSS classes to be added to `li` element.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the dropdown to the triggering button.\n		 */\n		id: PropTypes.string,\n		/**\n		 * Informs the trigger on the open/close state of the dropdown menu\n		 */\n		isOpen: PropTypes.bool,\n		/**\n		 * Adds custom styling such as inverse fill and special sizing/spacing\n		 */\n		globalAction: PropTypes.bool,\n		/**\n		 * The dropdown menu.\n		 */\n		menu: PropTypes.node,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering li loses focus.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * This prop is passed onto the triggering `li`. Triggered when the trigger li is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Is only called when `openOn` is set to `hover` and when the triggering li gains focus.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Called when a key pressed.\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Called when mouse clicks down on the trigger li.\n		 */\n		onMouseDown: PropTypes.func,\n		/**\n		 * Called when mouse hovers over the trigger `li`.\n		 */\n		onMouseEnter: PropTypes.func,\n		/**\n		 * Called when mouse leaves trigger `li` or the menu.\n		 */\n		onMouseLeave: PropTypes.func,\n		/**\n		 * Determines if mouse hover or click opens the dropdown menu. The default of `click` is highly recommended to comply with accessibility standards. If you are planning on using hover, please pause a moment and reconsider.\n		 */\n		openOn: PropTypes.oneOf(['hover', 'click', 'hybrid']),\n		/**\n		 * Set to true if menu is inline and relatively positioned with CSS. This is the typical use case for menus with nubbins.\n		 */\n		positioned: PropTypes.bool,\n		/**\n		 * The ref of the actual triggering button.\n		 */\n		triggerRef: PropTypes.func,\n	}
/Users/vu/forks/design-system-react/components/button/index.jsx:40:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * This object is merged with the default props object on every render.\n		 * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.\n		 */\n		assistiveText: PropTypes.shape({\n			icon: PropTypes.string,\n		}),\n\n		/**\n		 * Callback that passes in the DOM reference of the `<button>` DOM node within this component. Primary use is to allow `focus` to be called. You should still test if the node exists, since rendering is asynchronous. `buttonRef={(component) => { if(component) console.log(component); }}`\n		 */\n		buttonRef: PropTypes.func,\n		/**\n		 * CSS classes to be added to button.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Disables the button and adds disabled styling.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#hint">Lightning Design System Buttons > Hint</a>.\n		 */\n		hint: PropTypes.bool,\n		/**\n		 * Name of the icon category. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon categories.\n		 */\n		iconCategory: requiredIf(\n			PropTypes.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']),\n			(props) => !!props.iconName\n		),\n		/**\n		 * CSS classes to be added to icon.\n		 */\n		iconClassName: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Name of the icon. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon names.\n		 */\n		iconName: PropTypes.string,\n		/**\n		 * Path to the icon. This will override any global icon settings.\n		 */\n		iconPath: PropTypes.string,\n		/**\n		 * If omitted, icon position is centered.\n		 */\n		iconPosition: PropTypes.oneOf(['left', 'right']),\n		/**\n		 * Determines the size of the icon.\n		 */\n		iconSize: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),\n		/**\n		 * For icon variants, please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#icon">Lightning Design System Icons</a>.\n		 */\n		iconVariant: PropTypes.oneOf([\n			'bare',\n			'container',\n			'border',\n			'border-filled',\n			'brand',\n			'more',\n			'global-header',\n		]),\n		/**\n		 * Id string applied to button node.\n		 */\n		id: PropTypes.string,\n		/**\n		 * If true, button/icon is white. Meant for buttons or utility icons on dark backgrounds.\n		 */\n		inverse: PropTypes.bool,\n		/**\n		 * Visible label on the button. If the button is an icon button with no label, you must use the <code>assistiveText.icon</code> prop.\n		 */\n		label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n		/**\n		 * Triggered when focus is removed.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * Triggered when the button is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Triggered when component is focused.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Triggered when a key is pressed down\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Triggered when a key is pressed and released\n		 */\n		onKeyPress: PropTypes.func,\n		/**\n		 * Triggered when a key is released\n		 */\n		onKeyUp: PropTypes.func,\n		/**\n		 * Triggered when a mouse button is pressed down\n		 */\n		onMouseDown: PropTypes.func,\n		/**\n		 * Triggered when a mouse arrow hovers\n		 */\n		onMouseEnter: PropTypes.func,\n		/**\n		 * Triggered when a mouse arrow no longer hovers\n		 */\n		onMouseLeave: PropTypes.func,\n		/**\n		 * Triggered when a mouse button is released\n		 */\n		onMouseUp: PropTypes.func,\n		/**\n		 * If true, button scales to 100% width on small form factors.\n		 */\n		responsive: PropTypes.bool,\n		/**\n		 * Write <code>"-1"</code> if you don't want the user to tab to the button.\n		 */\n		tabIndex: PropTypes.string,\n		/**\n		 * Button type\n		 */\n		type: PropTypes.oneOf(['reset', 'submit', 'button']),\n		/**\n		 * HTML title attribute\n		 */\n		title: PropTypes.string,\n		/**\n		 * [Deprecated] Tooltip on button. Button should be a child of `Tooltip` instead.\n		 */\n		tooltip: PropTypes.node,\n		/**\n		 * Different types of buttons\n		 */\n		variant: PropTypes.oneOf([\n			'base',\n			'link',\n			'neutral',\n			'brand',\n			'outline-brand',\n			'destructive',\n			'success',\n			'text-destructive',\n			'icon',\n		]),\n		/**\n		 * Custom styles to be passed to the component\n		 */\n		style: PropTypes.object,\n	}
/Users/vu/forks/design-system-react/components/setup-assistant/step.jsx:24:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `expandStep`: Button that examples a step\n	 * _Tested with snapshot testing._\n	 */\n	assistiveText: PropTypes.shape({\n		expandStep: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Detailed description of the step\n	 */\n	description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * Estimated time for completing the step\n	 */\n	estimatedTime: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * Heading for the step\n	 */\n	heading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Index of the step within the step array\n	 */\n	index: PropTypes.number,\n	/**\n	 * Dictates whether the step can be expanded / collapsed\n	 */\n	isExpandable: PropTypes.bool,\n	/**\n	 * If `isExpandable` is true, this prop can be used to control the expanded state. If not provided state will be used instead\n	 */\n	isOpen: PropTypes.bool,\n	/**\n	 * Function that is called to render a step's available action(s). Typically returns a Button, Button of variant "link," or Checkbox of variant "toggle"\n	 */\n	onRenderAction: PropTypes.func,\n	/**\n	 * Function that is called to render step content. Typically returns a ProgressIndicator and/or ScopedNotification component\n	 */\n	onRenderContent: PropTypes.func,\n	/**\n	 * Function that is called to render content within the media figure. Expects to be returned an Icon or ProgressRing component\n	 */\n	onRenderFigure: PropTypes.func,\n	/**\n	 * Function to handle requests to expand / collapse the step\n	 */\n	onToggleIsOpen: PropTypes.func,\n	/**\n	 * Percentage of step completed. No progress indicator will be shown for the step unless this is provided\n	 */\n	progress: PropTypes.number,\n	/**\n	 * Display number for the step. Only appears if progress indicator is enabled. Determined automatically by parent if not provided.\n	 */\n	stepNumber: PropTypes.number,\n}
/Users/vu/forks/design-system-react/components/global-header/setup.jsx:16:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `triggerButton`: Assistive text for the GlobalHeaderSetup trigger button. The default is `Setup`.\n	 */\n	assistiveText: PropTypes.shape({\n		triggerButton: PropTypes.string,\n	}),\n	/**\n	 * A `Dropdown` component. The props from this dropdown will be merged and override any default props. This also allows custom content to be passed as children and rendered in the dropdown.\n	 */\n	dropdown: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/setup-assistant/index.jsx:25:propTypes = {\n	/**\n	 * Accepts SetupAssistantStep components only as children.\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS classes to be added to tag with `.slds-progress-bar`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Dictates whether this setup assistant has card wrappings and styling\n	 */\n	isCard: PropTypes.bool,\n	/**\n	 * Function to handle opening / closing of steps when the step is expandable. Passes event object and step `index`, `isOpen`, and `step` props as data.\n	 */\n	onStepToggleIsOpen: PropTypes.func,\n	/**\n	 * Accepts a progress bar component, which will only be visible if `isCard` is enabled\n	 */\n	progressBar: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/global-header/notifications.jsx:15:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `newNotificationsAfter`: Assistive text for when there are new notifications, after the notificationCount. The default is ' new notifications'.\n	 * * `newNotificationsBefore`: Assistive text for when there are new notifications, before the notificationCount. The default is ''.\n	 * * `noNotifications`: Assistive text for when there are no new notifications.\n	 */\n	assistiveText: PropTypes.shape({\n		newNotificationsAfter: PropTypes.string,\n		newNotificationsBefore: PropTypes.string,\n		noNotifications: PropTypes.string,\n	}),\n	/**\n	 * Dictates the number of notifications shown in the new notifications badge.\n	 */\n	notificationCount: PropTypes.number,\n	/**\n	 * A `Popover` component. The props from this popover will be merged and override any default props. The `children` prop will be ignored.\n	 */\n	popover: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/global-header/profile.jsx:86:propTypes = {\n	/**\n	 * Extra classnames to apply to the popover.\n	 */\n	className: PropTypes.string,\n	/**\n	 * An image URL or avatar node to display for the user profile. Defaults to a base64 encoded generic user avatar image string\n	 */\n	avatar: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n	/**\n	 * CSS classes to be added to the `button` element.\n	 */\n	buttonClassName: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the popover to the triggering button. If an id is not provided, it will be automatically generated.\n	 */\n	id: PropTypes.string,\n	/**\n	 * A `Popover` component. The props from this popover will be merged and override any default props.\n	 */\n	popover: PropTypes.node,\n	/**\n	 * The user name of the profile. Defaults to "User Name"\n	 */\n	userName: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/expression/formula.jsx:20:propTypes = {\n	/**\n	 *  **Assistive text for accessibility.**\n	 * * `help`: Assistive text for help icon\n	 */\n	assistiveText: PropTypes.shape({\n		help: PropTypes.string,\n	}),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS classes to be added to the element with class `.slds-form-element`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Callbacks for various expression formula events such as text editor change, check syntax etc\n	 */\n	events: PropTypes.shape({\n		onChangeTextEditor: PropTypes.func,\n		onClickHelp: PropTypes.func,\n		onClickCheckSyntax: PropTypes.func,\n	}),\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `label`: Label for the Expression Formula group.Defaults to "Formula"\n	 * * `checkSyntax`: Label for the Check Syntax Button. Defaults to "Check Syntax"\n	 * * `textArea`: Label for the `triggerType` selector. Defaults to "Take Action When"\n	 */\n	labels: PropTypes.shape({\n		label: PropTypes.string,\n		checkSyntax: PropTypes.string,\n		textArea: PropTypes.string,\n	}),\n	/**\n	 *  Accepts a single combobox component, to select resource in the expression formula editor\n	 */\n	resourceCombobox: PropTypes.node,\n	/**\n	 *  Accepts a single combobox component, to select function in the expression formula editor\n	 */\n	functionCombobox: PropTypes.node,\n	/**\n	 *  Accepts a single input component, to enter operator in the expression formula editor\n	 */\n	operatorInput: PropTypes.node,\n	/**\n	 *  Value for the text editor in expression formula editor\n	 */\n	textEditorValue: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/textarea/index.jsx:44:propTypes = {\n		/**\n		 * **Assistive text for accessibility.**\n		 * * `label`: If present, the label associated with this `textarea` is overwritten by this text and is visually not shown.\n		 */\n		assistiveText: PropTypes.shape({\n			label: PropTypes.string,\n		}),\n		/**\n		 * The aria-activedescendant attribute contains the ID of the currently active child object that is part of a composite widget within the Document Object Model. It makes do with the overhead of having all or more than one child focusable. As the name specifies, it helps in managing the current active child of the composite widget.\n		 */\n		'aria-activedescendant': PropTypes.string,\n		/**\n		 * Indicates if the suggestions in a composite widget are values that complete the current textbox input.\n		 */\n		'aria-autocomplete': PropTypes.string,\n		/**\n		 * An HTML ID that is shared with ARIA-supported devices with the\n		 * `aria-controls` attribute in order to relate the input with\n		 * another region of the page. An example would be a select box\n		 * that shows or hides a panel.\n		 */\n		'aria-controls': PropTypes.string,\n		/**\n		 * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.\n		 */\n		'aria-describedby': PropTypes.string,\n		/**\n		 * Use the `aria-expanded` state to indicate whether regions of the content are collapsible, and to expose whether a region is currently expanded or collapsed.\n		 */\n		'aria-expanded': PropTypes.bool,\n		/**\n		 * Indicates that the element has a popup context menu or sub-level menu.\n		 */\n		'aria-haspopup': PropTypes.bool,\n		/**\n		 * The aria-labelledby attribute contains the element IDs of labels in objects such as input elements, widgets, and groups. The attribute establishes relationships between objects and their labels. Assistive technology, such as screen readers, use this attribute to catalog the objects in a document so that users can navigate between them. Without an element ID, the assistive technology cannot catalog the object.\n		 */\n		'aria-labelledby': PropTypes.string,\n		/**\n		 * An HTML ID that is shared with ARIA-supported devices with the\n		 * `aria-controls` attribute in order to relate the input with\n		 * another region of the page. An example would be a search field\n		 * that shows search results.\n		 */\n		'aria-owns': PropTypes.string,\n		/**\n		 * The `aria-required` attribute is used to indicate that user input is required on an element before a form can be submitted.\n		 */\n		'aria-required': PropTypes.bool,\n		/**\n		 * Specifies is the textarea should automatically get focus when the page loads. This is typically a poor user experience.\n		 */\n		autoFocus: PropTypes.bool,\n		/**\n		 * Elements are added after the `textarea`.\n		 */\n		children: PropTypes.node,\n		/**\n		 * Class names to be added to the textarea component.\n		 */\n		className: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/** Allows for ability to apply classNames to outer textarea div.\n		 */\n		classNameContainer: PropTypes.oneOfType([\n			PropTypes.array,\n			PropTypes.object,\n			PropTypes.string,\n		]),\n		/**\n		 * Disables the textarea and prevents editing the contents.\n		 */\n		disabled: PropTypes.bool,\n		/**\n		 * Message to display when the textarea is in an error state. When this is present, also visually highlights the component as in error.\n		 */\n		errorText: PropTypes.string,\n		/**\n		 * Every textarea must have a unique ID in order to support keyboard navigation and ARIA support.\n		 */\n		id: PropTypes.string,\n		/**\n		 * This callback exposes the textarea reference / DOM node to parent components. `<Parent textareaRef={(textareaComponent) => this.textarea = textareaComponent} />\n		 */\n		textareaRef: PropTypes.func,\n		/**\n		 * This label appears above the textarea.\n		 */\n		label: PropTypes.string,\n		/**\n		 * Triggered when focus is removed.\n		 */\n		onBlur: PropTypes.func,\n		/**\n		 * This callback fires when the textarea changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.\n		 */\n		onChange: PropTypes.func,\n		/**\n		 * This event fires when the textarea is clicked.\n		 */\n		onClick: PropTypes.func,\n		/**\n		 * Triggered when component is focused.\n		 */\n		onFocus: PropTypes.func,\n		/**\n		 * Similar to `onchange`. Triggered when an element gets user input.\n		 */\n		onInput: PropTypes.func,\n		/**\n		 * Triggered when a submittable <input> element is invalid.\n		 */\n		onInvalid: PropTypes.func,\n		/**\n		 * Triggered when a key is pressed down\n		 */\n		onKeyDown: PropTypes.func,\n		/**\n		 * Triggered when a key is pressed and released\n		 */\n		onKeyPress: PropTypes.func,\n		/**\n		 * Triggered when a key is released\n		 */\n		onKeyUp: PropTypes.func,\n		/**\n		 * Triggered after some text has been selected in an element.\n		 */\n		onSelect: PropTypes.func,\n		/**\n		 * Fires when a form is submitted.\n		 */\n		onSubmit: PropTypes.func,\n		/**\n		 * Maximum number of characters allowed.\n		 */\n		maxLength: PropTypes.string,\n		/**\n		 * Name of the submitted form parameter.\n		 */\n		name: PropTypes.string,\n		/**\n		 * Text that will appear in an empty textarea.\n		 */\n		placeholder: PropTypes.string,\n		/**\n		 * Highlights the textarea as a required field (does not perform any validation).\n		 */\n		required: PropTypes.bool,\n		/**\n		 * The textarea is a controlled component, and will always display this value.\n		 */\n		value: PropTypes.string,\n		/**\n		 * The textarea is a uncontrolled component, and this will be the initial value.\n		 */\n		defaultValue: PropTypes.string,\n		/**\n		 * Specifies how the text in a text area is to be wrapped when submitted in a form.\n		 */\n		wrap: PropTypes.oneOf(['soft', 'hard']),\n	}
/Users/vu/forks/design-system-react/components/global-header/favorites.jsx:19:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `action`: Description of star button. Default is "Toggle Favorite."\n	 * * `more`: Description of dropdown menu. Default is "View Favorites."\n	 */\n	assistiveText: PropTypes.shape({\n		action: PropTypes.string,\n		more: PropTypes.string,\n	}),\n	/**\n	 * Disables the favorites action (star) button and not the related Popover."\n	 */\n	actionDisabled: PropTypes.bool,\n	/**\n	 * Controls whether the favorites action (star) button is selected or not\n	 */\n	actionSelected: PropTypes.bool,\n	/**\n	 * This event fires when the favorites action (star) button is toggled. Passes in `event, { actionSelected }`.\n	 */\n	onToggleActionSelected: PropTypes.func,\n	/**\n	 * A `Popover` component applied to the favorites more button. The props from this popover will be merged and override any default props. The `children` prop will be ignored.\n	 */\n	popover: PropTypes.node,\n}
/Users/vu/forks/design-system-react/components/expression/condition.jsx:21:propTypes = {\n	/**\n	 *  **Assistive text for accessibility.**\n	 * * `title`: For users of assistive technology, title for the condition fieldset. Defaults to 'Condition'\n	 * * `deleteIcon`: For users of assistive technology, assistive text for the Delete Condition button's icon. Defaults to 'Delete Condition'\n	 */\n	assistiveText: PropTypes.shape({\n		title: PropTypes.string,\n		deleteIcon: PropTypes.string,\n	}),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * CSS classes to be added to the element with class `.slds-expression__row`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Callbacks for various expression condition events such as value change, delete etc\n	 */\n	events: PropTypes.shape({\n		onChangeResource: PropTypes.func,\n		onChangeOperator: PropTypes.func,\n		onChangeValue: PropTypes.func,\n		onDelete: PropTypes.func,\n	}).isRequired,\n	/**\n	 * If set to true, the component will focus on the first focusable input upon mounting. This is useful for accessibility when adding new conditions.\n	 */\n	focusOnMount: PropTypes.bool,\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every\n	 * * `deleteCondition`: Title for the delete condition button. Defaults to "Delete Condition".\n	 * * `label`: Label for the condition, shown left-most in the row. Left empty on default.\n	 * * `operator`: Label for the operator selection dropdown. Defaults to "Operator"\n	 * * `resource`: Label for the resource selection dropdown. Defaults to "Resource"\n	 * * `value`: Label for the value input box. Defaults to "Value"\n	 */\n	labels: PropTypes.shape({\n		deleteCondition: PropTypes.string,\n		label: PropTypes.string,\n		operator: PropTypes.string,\n		resource: PropTypes.string,\n		value: PropTypes.string,\n	}),\n	/**\n	 * Controls whether the condition is a sub-condition inside a ExpressionGroup\n	 */\n	isSubCondition: PropTypes.bool,\n	/**\n	 * **Array of item objects that are options in the resource selection dropdown menu.**\n	 * Each object can contain:\n	 * * `id`: A unique identifier string.\n	 * * `label`: A primary string of text for a menu item.\n	 * ```\n	 * {\n	 * 	id: '1',\n	 * 	label: 'Resource 1',\n	 * },\n	 * ```\n	 * Note: The dropdown uses the Combobox Component, and `resourcesList` is\n	 * passed as `options` props to it, and hence shall also support more\n	 * custom objects. Please refer to the Combobox documentation.\n	 */\n	resourcesList: PropTypes.arrayOf(PropTypes.object),\n	/**\n	 *  Accepts an object from the `resourcesList` which needs to be selected\n	 *  for the resource dropdown menu,\n	 */\n	resourceSelected: PropTypes.object,\n	/**\n	 * **Array of item objects that are options in the operator selection dropdown menu.**\n	 * Each object can contain:\n	 * * `id`: A unique identifier string.\n	 * * `label`: A primary string of text for a menu item.\n	 * ```\n	 * {\n	 * 	id: '1',\n	 * 	label: 'Operator 1',\n	 * },\n	 * ```\n	 * Note: The dropdown uses the Combobox Component, and `operatorList` is\n	 * passed as `options` props to it, and hence shall also support more\n	 * custom objects. Please refer to the Combobox documentation.\n	 */\n	operatorsList: PropTypes.arrayOf(PropTypes.object),\n	/**\n	 *  Accepts an object from the `operatorSelected` which needs to be selected\n	 *  for the operator dropdown menu,\n	 */\n	operatorSelected: PropTypes.object,\n	/**\n	 *  Sets the input value for the Value input field.\n	 */\n	value: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/radio-group/index.jsx:17:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * * `label`: This label appears in the legend.\n	 * * `required`: Text to help identify the group as required\n	 */\n	assistiveText: PropTypes.shape({\n		label: PropTypes.string,\n		required: PropTypes.string,\n	}),\n	/**\n	 * Children are expected to be Radio components.\n	 */\n	children: PropTypes.node.isRequired,\n	/**\n	 * Custom CSS classes added to the node.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * **Text labels for internationalization**\n	 * This object is merged with the default props object on every render.\n	 * * `error`: Message to display when any of Checkboxes are in an error state.\n	 * * `label`: This label appears above the radio group.\n	 */\n	labels: PropTypes.shape({\n		error: PropTypes.string,\n		label: PropTypes.string,\n	}),\n	/**\n	 * This event fires when the radio selection changes.\n	 */\n	onChange: PropTypes.func,\n	/**\n	 * Disable all radio inputs.\n	 */\n	disabled: PropTypes.bool,\n	/**\n	 * Adds an indicator that this field is required.\n	 */\n	required: PropTypes.bool,\n	/**\n	 * The name of this radio group.\n	 */\n	name: PropTypes.string,\n	/**\n	 * The ID of the error message, for linking to radio inputs with aria-describedby.\n	 */\n	errorId: PropTypes.string,\n	/**\n	 * Variants of radio groups such as Radio Button Group\n	 */\n	variant: PropTypes.oneOf(['base', 'button-group']),\n}
/Users/vu/forks/design-system-react/components/progress-indicator/private/step-vertical.jsx:20:propTypes = {\n	/**\n	 * Index of step. Used for id's if no step ID exists\n	 */\n	index: PropTypes.number,\n	/**\n	 * Determines if the step has been completed\n	 */\n	isCompleted: PropTypes.bool,\n	/**\n	 * Determines if the step contains an error\n	 */\n	isError: PropTypes.bool,\n	/**\n	 * Determines if the step is currently selected (active)\n	 */\n	isSelected: PropTypes.bool,\n	/**\n	 * Step object. This is passed into event callbacks.\n	 */\n	step: PropTypes.object,\n	/**\n	 * The variant of the parent progress indicator\n	 */\n	variant: PropTypes.string,\n}
/Users/vu/forks/design-system-react/components/progress-indicator/private/progress.jsx:18:propTypes = {\n	/**\n	 * Assistive text for percentage\n	 */\n	assistiveText: PropTypes.shape({\n		percentage: PropTypes.string,\n	}),\n	/**\n	 * Steps in the component\n	 */\n	children: PropTypes.node,\n	/**\n	 * CSS class names to be added to the container element.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string.isRequired,\n	/**\n	 * Determines the orientation of the progress indicator\n	 */\n	orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n	/**\n	 * Percentage of progress completion, ranging [0, 100]\n	 */\n	value: PropTypes.string.isRequired,\n	/**\n	 * Determines component style\n	 */\n	variant: PropTypes.oneOf(['base', 'modal', 'setup-assistant']),\n}
/Users/vu/forks/design-system-react/components/progress-indicator/index.jsx:24:propTypes = {\n	/**\n	 * **Assistive text for accessibility**\n	 * This object is merged with the default props object on every render.\n	 * * `completedStep`: Label for a completed step. The default is `Completed Step`\n	 * * `disabledStep`: Label for disabled step. The default is `Disabled Step`\n	 * * `errorStep`: Label for a step with an error. The default is `Error Step`\n	 * * `percentage`: Label for Progress Bar. The default is `Progress: [this.props.value]%`. You will need to calculate the percentage yourself if changing this string.\n	 * * `step`: Label for a step. It will be typically followed by the number of the step such as "Step 1".\n	 */\n	assistiveText: PropTypes.shape({\n		completedStep: PropTypes.string,\n		disabledStep: PropTypes.string,\n		percentage: PropTypes.string,\n		step: PropTypes.string,\n	}),\n	/**\n	 * CSS class names to be added to the container element. `array`, `object`, or `string` are accepted.\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n	/**\n	 * Stores all completed steps. It is an array of step objects.\n	 */\n	completedSteps: PropTypes.array,\n	/**\n	 * Stores all disabled steps. It is an array of step objects. Steps are still clickable/focusable,\n	 * this only disables cursor change and removes onClick and onFocus event callbacks.\n	 */\n	disabledSteps: PropTypes.array,\n	/**\n	 * Stores all error steps. It is an array of step objects and usually there is only one error step, the current step. If an error occurs a second error icon should be placed to the left of related confirmation buttons (e.g. Cancel, Save) and an Error Popover should appear indicating there are errors. These additional items are NOT part of this component. This note was included for visibility purposes. Please refer to [SLDS website](https://www.lightningdesignsystem.com/components/progress-indicator/) for full details **\n	 */\n	errorSteps: PropTypes.array,\n	/**\n	 * HTML id for component.\n	 */\n	id: PropTypes.string,\n	/**\n	 * Determines the orientation of the progress indicator\n	 */\n	orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n	/**\n	 * Triggered when an individual step is clicked. By default, it receives an event and returns step state and the step object clicked: `{ isCompleted, isDisabled, isError, isSelected, step }`. Users are able to pass a callback handleClick function in forms of: <function name>(event, data) where data is the callback result.\n	 * ```\n	 * const handleStepClick = function(event, data) { console.log(data); };\n	 *   <ProgressIndicator onStepClick={handleStepClick} />\n	 * ```\n	 */\n	onStepClick: PropTypes.func,\n	/**\n	 * Triggered when an individual step is focused. By default, it receives an event and returns step state and the step object clicked: `{ isCompleted, isDisabled, isError, isSelected, step }`. Users are able to pass a callback handleClick function in forms of: <function name>(event, data) where data is the callback result.\n	 * ```\n	 * const handleStepFocus = function(event, data) { console.log(data); };\n	 *   <ProgressIndicator onStepFocus={handleStepFocus} />\n	 * ```\n	 */\n	onStepFocus: PropTypes.func,\n	/**\n	 * Represents the currently selected or active step. It is a step object.\n	 */\n	selectedStep: PropTypes.object.isRequired,\n	/**\n	 * It is an array of step objects in the following form:\n	 * ```\n	 *  [{\n	 *    id: <PropTypes.number> or <PropTypes.string>, has to be unique\n	 *    label: <PropTypes.string>, representing the tooltip content\n	 *    assistiveText: <PropTypes.string>, The default is `[Step props.index + 1]: [status]`. Status is if the step has been completed or in an error state.\n	 *  }],\n	 *  ```\n	 */\n	steps: PropTypes.array.isRequired,\n	/**\n	 * Stores all steps with opened tooltips. This property is mainly for development purposes. The tooltip should only show on hover for the user.\n	 */\n	tooltipIsOpenSteps: PropTypes.array,\n	/**\n	 * Determines component style.\n	 */\n	variant: PropTypes.oneOf(['base', 'modal', 'setup-assistant']),\n	/**\n	 * Please select one of the following:\n	 * * `absolute` - (default if `variant` is `modal`) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n	 * * `overflowBoundaryElement` - (default if `variant` is `base`) The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n	 * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n	 */\n	tooltipPosition: PropTypes.oneOf([\n		'absolute',\n		'overflowBoundaryElement',\n		'relative',\n	]),\n}
/Users/vu/forks/design-system-react/components/brand-band/index.jsx:106:propTypes = {\n	/**\n	 * Primary application grid layout or a white background component such as a `Card` should be passed into this component.\n	 */\n	children: PropTypes.node,\n\n	/**\n	 * CSS classes that are applied to the component\n	 */\n	className: PropTypes.oneOfType([\n		PropTypes.array,\n		PropTypes.object,\n		PropTypes.string,\n	]),\n\n	/**\n	 * Id of component, if desired. If not provided an id is automatically generated\n	 */\n	id: PropTypes.string,\n\n	/**\n	 * Image of the brand band\n	 */\n	image: PropTypes.oneOf(['default', 'none']),\n\n	/**\n	 * Background size of the brand band. Default is 'contain'\n	 */\n	backgroundSize: PropTypes.oneOf(['contain', 'cover']),\n	/**\n	 * Size of the brand band. Default is 'medium'\n	 */\n	size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n	/**\n	 * Custom styles to be passed to the component\n	 */\n	style: PropTypes.object,\n\n	/**\n	 * Custom styles to be passed to the component container\n	 */\n	styleContainer: PropTypes.object,\n\n	/**\n	 * Different brand band styling.\n	 * NOTE: using 'lightning-blue' may result in incorrect styling depending on server CSP settings. See opening component documentation above for details.\n	 */\n	theme: PropTypes.oneOf(['default', 'lightning-blue']),\n}
/Users/vu/forks/design-system-react/components/progress-indicator/private/progress-bar.jsx:8:propTypes = {\n	/**\n	 * Assistive text for percentage\n	 */\n	assistiveText: PropTypes.shape({\n		percentage: PropTypes.string,\n	}),\n	/**\n	 * Percentage of progress completion, with range of [0, 100]\n	 */\n	value: PropTypes.string.isRequired,\n}
