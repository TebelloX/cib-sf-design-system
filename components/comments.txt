/Users/vu/forks/design-system-react/components/visual-picker/index.jsx:58:\n\n/**\n * Visual Picker Component\n */\n
/Users/vu/forks/design-system-react/components/utilities/menu-list/index.jsx:20:\n\n/**\n * Component description.\n */\n
/Users/vu/forks/design-system-react/components/progress-indicator/private/step-vertical.jsx:45:\n\n/**\n * StepVertical renders a step icon and its step label if applied\n */\n
/Users/vu/forks/design-system-react/components/notification/index.jsx:53:\n\n/**\n * The Notification component is the Alert and Toast variants of the Lightning Design System Notification component. For prompt notifications, use the <a href='#/modal'>Modal</a> component with <code>prompt={true}</code>.\n * The Notification opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop).\n */\n
/Users/vu/forks/design-system-react/components/badge/index.jsx:19:\n\n/**\n * Badges are labels which hold small amounts of information.\n */\n
/Users/vu/forks/design-system-react/components/data-table/row-actions.jsx:20:\n\n/**\n * RowActions provide a mechanism for defining a menu to display alongside each row in the DataTable.\n */\n
/Users/vu/forks/design-system-react/components/progress-indicator/index.jsx:176:\n\n/**\n * Progress Indicator is a component that communicates to the user the progress of a particular process.\n */\n
/Users/vu/forks/design-system-react/components/visual-picker/link.jsx:41:\n\n/**\n * Visual Picker Link Component\n */\n
/Users/vu/forks/design-system-react/components/alert/container.jsx:24:\n\n/**\n * A fixed container for alert banners.\n */\n\n
/Users/vu/forks/design-system-react/components/location-map/index.jsx:97:\n\n/**\n * A location map component is used to find and show locations\n */\n
/Users/vu/forks/design-system-react/components/progress-indicator/private/progress-bar.jsx:19:\n/**\n * ProgressBar renders the blue/gray progress bar and dynamically updates its completion percentage\n */\n
/Users/vu/forks/design-system-react/components/global-header/favorites.jsx:45:\n\n/**\n * A GlobalHeaderFavorites component. The favorites action is used to "favorite" a commonly used page within a user's experience. When a user "favorites" a page by pressing the favorites action, the button icon changes color with a small animation to confirm your selection.\n */\n
/Users/vu/forks/design-system-react/components/utilities/dialog/index.jsx:32:\n\n/*\n * A Dialog is content that is separate from the typical flow of a page. It typically overlays other elements in the document flow. This is achieved with elevation (`z-index`) and one of the following: relative position, absolute position, or a new top-level React render tree (portal). A boundary element is a scrolling ancestor element or the edge of the browser (window/viewport). This element typically has an overflow (overflow-y/overflow-x) style that is scroll, hidden, or auto. Inverted placement is the flipping of the overlay element from top to bottom or left to right in order stay within a boundary element.\n *\n * * Dropdown menu (Combobox, DatePicker, et al.) placement is typically bottom-aligned and should be allowed to invert its placement when inside a boundary element this often happens within a modal. Dropdowns should not overflow boundary elements , since most boundary elements scroll vertically and have space for the menu.\n *\n * * If they are hidden, left and right placed overlay elements (such as Popover and Tooltip) should be placed within a portal element attached to the DOM <body>, but styled to align to its target/trigger. Since scrolling typically occurs on the vertical axis, this allows them to overflow boundary elements and still allow scrolling of content, yet still invert placement for the browser viewport. Portal elements are only necessary if an original ancestor boundary element exists. **No portals are created by default.**\n *\n * * Nubbins/arrows should be repositioned for any new placement/alignment.\n *\n * Allow Overflowing of Boundary Element: Allow applications to create a portal element attached to the DOM <body> to be outside of boundary elements if manual testing shows confusing alignment/poor usability/readability. This should be exception and not the default.\n *\n * Allow Inverted placement: Allow applications to prevent inverted placement if manual testing shows confusing alignment/poor usability/readability.\n *\n * ### How this new Dialog component works\n * * There is no longer an inline render within components. All overlays should go through `Dialog`. `position: relative` just passes on the markup with some additional event listeners. No positional library is used.\n * * The default `position: absolute` will run through three renders. It will first render the overlay at `0px/0px` offset of its parent. It will then store the target DOM node, once the DOM node is set, a state change will occur and tell a PopperJS instance to be created on update, once it is created, a third render is done to update the styles created by PopperJS.\n * * `position: overflowBoundaryElement` will do the same three renders as `absolute` except that the initial render will create a disconnected render tree (portal) on the `body`. Then, the position will change once the target is stored. The portal itself will be rendered multiple times. The first will result in `onOpen` executing. Each update will result in a re-render of the disconnected render-tree.\n *\n * This component is private.\n */\n
/Users/vu/forks/design-system-react/components/global-header/private/dropdown-trigger.jsx:25:\n\n/**\n *  The Dropdown Button Trigger renders the default trigger button for the dropdown menu. If this component has children, it does not render itself to the DOM. Instead, it renders its child element, `Button`, and all that child's properties. This component may be used as a template to create custom triggers that do not use `Button`.\n */\n
/Users/vu/forks/design-system-react/components/progress-indicator/private/step.jsx:97:\n\n/**\n * Step renders a button icon and its tooltip if applied.\n * The button is applied with different css classes under different conditions.\n * Button icons have 4 types of status: completed (success), active (in progress), error (warning) and uncompleted (not approached)\n */\n
/Users/vu/forks/design-system-react/components/global-header/setup.jsx:28:\n\n/**\n * A GlobalHeaderSetup component.\n */\n
/Users/vu/forks/design-system-react/components/utilities/menu-list/item.jsx:28:\n\n/**\n * Component description.\n */\n
/Users/vu/forks/design-system-react/components/data-table/index.jsx:60:\n\n/**\n * DataTables support the display of structured data in rows and columns with an HTML table. To sort, filter or paginate the table, simply update the data passed in the items to the table and it will re-render itself appropriately. The table will throw a sort event as needed, and helper components for paging and filtering are coming soon.\n *\n * NOTE: for horizontal scrolling with `fixedHeader`-enabled DataTables, see the `style` property description\n */\n
/Users/vu/forks/design-system-react/components/radio-group/index.jsx:79:\n\n/**\n * A styled select list that can have a single entry checked at any one time.\n * The RadioGroup component wraps [Radio](/components/radios) components, which should be used as children.\n */\n
/Users/vu/forks/design-system-react/components/global-header/profile.jsx:21:\n\n/**\n * This component is an `Avatar` component that opens a `Popover` component when clicked.\n */\n
/Users/vu/forks/design-system-react/components/progress-indicator/private/progress.jsx:53:\n\n/**\n * Progress renders all step buttons and a container wrapping these buttongs and a progress bar\n */\n
/Users/vu/forks/design-system-react/components/vertical-navigation/index.jsx:27:\n\n/**\n * Vertical Navigation represents a list of links that either take the user to another page or parts of the page the user is in.\n */\n
/Users/vu/forks/design-system-react/components/global-header/help.jsx:27:\n\n/**\n * A GlobalHeaderHelp component.\n */\n
/Users/vu/forks/design-system-react/components/app-launcher/section.jsx:38:\n\n/**\n * App Launcher Sections allow users to categorize App Tiles as well as toggle their display\n */\n\n
/Users/vu/forks/design-system-react/components/data-table/private/head.jsx:14:\n\n/**\n * Used internally, provides header row rendering to the DataTable.\n */\n
/Users/vu/forks/design-system-react/components/time-picker/index.jsx:54:\n\n/**\n *  Component description.\n */\n
/Users/vu/forks/design-system-react/components/textarea/index.jsx:36:\n\n/**\n * A multi-line plain-text editing control.\n */\n
/Users/vu/forks/design-system-react/components/data-table/private/row.jsx:23:\n\n/**\n * Used internally, provides row rendering to the DataTable.\n */\n
/Users/vu/forks/design-system-react/components/time-picker/private/dropdown-trigger.jsx:20:\n\n/**\n *  Component description.\n */\n
/Users/vu/forks/design-system-react/components/app-launcher/index.jsx:30:\n\n/**\n * The App Launcher allows the user to quickly access all the apps and functionality with their organization.\n * The App Launcher should generally only be used as a sub-component of the [Global Navigation Bar](/components/global-navigation-bar)\n *\n * USAGE EXAMPLE:\n * ```\n * <AppLauncher>\n * 	<AppLauncherExpandableSection>\n * 		<AppLauncherTile />\n * 		<AppLauncherTile />\n * 		<AppLauncherTile />\n * 	</AppLauncherExpandableSection>\n * 	<AppLauncherExpandableSection>\n * 		<AppLauncherTile />\n * 		<AppLauncherTile />\n * 	</AppLauncherExpandableSection>\n * </AppLauncher>\n * ```\n *\n * By default, `Modal`, a child component of App Launcher, will add `aria-hidden=true` to the `body` tag, but this disables some assistive technologies. To prevent this you can add the following to your application with `#mount` being the root node of your application that you would like to hide from assistive technologies when the `Modal` is open.\n * ```\n * import settings from 'design-system-react/components/settings';\n * settings.setAppElement('#mount');\n * ```\n */\n
/Users/vu/forks/design-system-react/components/app-launcher/link.jsx:21:\n\n/**\n * App Launcher Link component creates simple links to be used in "All Items" sections\n */\n
/Users/vu/forks/design-system-react/components/data-table/column.jsx:12:\n\n// extends is used below so that react-docgen can detect the component\n\n/**\n * Columns define the structure of the data displayed in the DataTable.\n */\n
/Users/vu/forks/design-system-react/components/media-object/index.jsx:22:\n\n/**\n * When you need text and a figure next to each other, use a media object.\n */\n
/Users/vu/forks/design-system-react/components/expandable-section/index.jsx:69:\n\n/**\n * Toggle visibility of section content with the Expandable Section\n */\n
/Users/vu/forks/design-system-react/components/app-launcher/expandable-section.jsx:28:\n\n/**\n * App Launcher Sections allow users to categorize App Tiles & Links as well as toggle their display. It is a superset of components/expandable-section with content formatting.\n * All Expandable Section props are compatible with props passed to this component.\n */\n
/Users/vu/forks/design-system-react/components/welcome-mat/tile.jsx:78:\n\n/**\n * Tile component item represents a tile in a Welcome Mat\n */\n
/Users/vu/forks/design-system-react/components/data-table/private/header-cell.jsx:26:\n\n/**\n * Used internally, renders each individual column heading.\n */\n
/Users/vu/forks/design-system-react/components/dynamic-icon/index.jsx:89:\n\n/**\n * A set of delightful animated icons.\n */\n
/Users/vu/forks/design-system-react/components/welcome-mat/info-badge.jsx:56:\n\n/**\n * InfoBadge component item represents a tile in a Welcome Mat\n */\n
/Users/vu/forks/design-system-react/components/app-launcher/tile.jsx:96:\n\n/**\n * App Launcher Tiles provide information and links to a user's apps\n */\n
/Users/vu/forks/design-system-react/components/panel/index.jsx:19:\n\n/**\n * A panel provides detailed contextual information or contextual filtering options. [Filter](/components/filters/) component should be used as children. Menus within a Filter Popover will need to not have "portal mounts" and be inline. */\n
/Users/vu/forks/design-system-react/components/progress-ring/index.jsx:76:\n\n/**\n * Customizable and configurable progress ring. Will display progress in a circular progress bar factor, and is capable of displaying iconography inside of the ring structure.\n */\n
/Users/vu/forks/design-system-react/components/button-group/index.jsx:61:\n\n/**\n * The ButtonGroup component wraps other components (ie. Button, MenuDropdown, PopoverTooltip, Checkboxes, etc).\n */\n
/Users/vu/forks/design-system-react/components/tooltip/index.jsx:163:\n\n/**\n * The PopoverTooltip component is variant of the Lightning Design System Popover component. This component wraps an element that triggers it to open. It must be a focusable child element (either a button or an anchor), so that keyboard users can navigate to it.\n */\n
/Users/vu/forks/design-system-react/components/radio/index.jsx:129:\n\n/**\n * A radio input that can have a single input checked at any one time. Radios should be wrapped with\n * a [RadioGroup](/components/radio-group) or [RadioButtonGroup](/components/radio-button-group)\n */\n
/Users/vu/forks/design-system-react/components/modal/index.jsx:180:\n\n/**\n * The Modal component is used for the Lightning Design System Modal and Notification > Prompt components. The Modal opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop). For more details on the Prompt markup, please review the <a href="http://www.lightningdesignsystem.com/components/notifications#prompt">Notifications > Prompt</a>.\n *\n * By default, `Modal` will add `aria-hidden=true` to the `body` tag, but this disables some assistive technologies. To prevent this you can add the following to your application with `#mount` being the root node of your application that you would like to hide from assistive technologies when the `Modal` is open.\n * ```\n * import settings from 'design-system-react/components/settings';\n * settings.setAppElement('#mount');\n * ```\n * This component uses a portalMount (a disconnected React subtree mount) to create a modal as a child of `body`.\n */\n
/Users/vu/forks/design-system-react/components/forms/input/inline.jsx:97:\n\n/**\n * An inline input is rendered as a label by default. When clicked (or tabbed in), it's rendered as an input. When the focus is lost, the current input value is saved and the input is rendered as a label again.\n */\n
/Users/vu/forks/design-system-react/components/split-view/index.jsx:77:\n\n/**\n * Split view is used to navigate between records in a list while staying on the same screen.\n */\n
/Users/vu/forks/design-system-react/components/split-view/listbox.jsx:116:\n\n/**\n * The menu with the ARIA role of a listbox.\n */\n
/Users/vu/forks/design-system-react/components/menu-dropdown/button-trigger.jsx:21:\n\n/**\n *  The Dropdown Button Trigger renders the default trigger button for the dropdown menu. If this component has children, it does not render itself to the DOM. Instead, it renders its child element, `Button`, and all that child's properties. This component may be used as a template to create custom triggers that do not use `Button`.\n */\n
/Users/vu/forks/design-system-react/components/split-view/private/list-item-with-content.jsx:70:\n	
/Users/vu/forks/design-system-react/components/global-navigation-bar/region.jsx:76:\n\n/* eslint-enable react/display-name */\n\n/**\n * Regions make up a GlobalNavigation Bar and typically contain links and dropdowns. The Primary region contains the AppSwitcher, Application Name, and Object Switcher. The secondary region typically has navigation betweens sections of the application. The tertiary region is aligned to the right side of the screen and contains shortcuts or actions.\n */\n
/Users/vu/forks/design-system-react/components/combobox/combobox.jsx:407:\n\n/**\n * A widget that provides a user with an input field that is either an autocomplete or readonly, accompanied with a listbox of pre-definfined options.\n */\n
/Users/vu/forks/design-system-react/components/scoped-notification/index.jsx:43:\n\n/**\n * A Scoped Notification Component serve advisory information for the user that is not important enough to justify an alert.\n */\n
/Users/vu/forks/design-system-react/components/global-navigation-bar/dropdown-trigger.jsx:26:\n\n/**\n *  The Dropdown Button Trigger renders the default trigger button for the dropdown menu. If this component has children, it does not render itself to the DOM. Instead, it renders its child element, `Button`, and all that child's properties. This component may be used as a template to create custom triggers that do not use `Button`.\n */\n
/Users/vu/forks/design-system-react/components/welcome-mat/index.jsx:85:\n\n/**\n * A Welcome Mat provides a series of unordered items a user can click to learn about a thematic topic.\n */\n
/Users/vu/forks/design-system-react/components/color-picker/index.jsx:235:\n\n/**\n * The Unified Color Picker component allows for a fully accessible and configurable color picker, allowing the user to pick from a set of predefined colors (swatches), or to pick a custom color using a HSB selection interface. It can be configured to show one or both of those color selection interfaces. View [component blueprint guidelines](https://lightningdesignsystem.com/components/color-picker/).\n */\n
/Users/vu/forks/design-system-react/components/popover/edit-dialog.jsx:21:\n
/Users/vu/forks/design-system-react/components/setup-assistant/index.jsx:58:\n\n/**\n * Setup Assistant provides Administrators with a centralized list of tasks for\n * onboarding organizations, clouds, or features within the Salesforce Platform.\n */\n
/Users/vu/forks/design-system-react/components/tree/index.jsx:139:\n\n/**\n * A tree is visualization of a structure hierarchy. A branch can be expanded or collapsed. This is a controlled component, since visual state is present in the `nodes` data.\n */\n
/Users/vu/forks/design-system-react/components/menu-dropdown/menu-dropdown.jsx:418:\n\n/**\n * The MenuDropdown component is a variant of the Lightning Design System Menu component. This component\n * may require a polyfill such as [classList](https://github.com/yola/classlist-polyfill) due to\n * [react-onclickoutside](https://github.com/Pomax/react-onclickoutside) if Internet Explorer 11\n * support is needed.\n *\n * This component is wrapped in a [higher order component to listen for clicks outside itself](https://github.com/kentor/react-click-outside) and thus requires use of `ReactDOM`.\n */\n
/Users/vu/forks/design-system-react/components/popover/popover.jsx:83:\n\n/**\n * The Popover component is a non-modal dialog. It should be paired with a clickable trigger such as a `Button`. It traps focus from the page and must be exited if focus needs to be outside the Popover. Use a `Tooltip` if there are no call to actions within the dialog. A `Tooltip` does not need to be clicked. Multiple popovers open at the same time, each with focus trap is not supported.\n */\n
/Users/vu/forks/design-system-react/components/filter/index.jsx:33:\n\n/**\n * A Filter is a popover with custom trigger. It can be used by [Panel Filtering](/components/panels/). Menus within a Filter Popover will need to not have "portal mounts" and be inline.\n */\n
/Users/vu/forks/design-system-react/components/date-picker/private/navigation.jsx:10:\n\n
/Users/vu/forks/design-system-react/components/pill-container/index.jsx:101:\n\n/**\n * A `PillContainer` is a container that holds one or more pills. Use it for a list of pills in a container that resembles an `input` form field. It is not intended for navigation.\n */\n
/Users/vu/forks/design-system-react/components/setup-assistant/step.jsx:98:\n\n/**\n * Setup Assistant Step component is used to specify individual items within the Setup Assistant\n * filled with learning and task links along with a recommended sequence that may have progress tracking\n */\n
/Users/vu/forks/design-system-react/components/date-picker/private/year-picklist.jsx:7:\n\n
/Users/vu/forks/design-system-react/components/date-picker/private/calendar-wrapper.jsx:17:\n\n
/Users/vu/forks/design-system-react/components/expression/condition.jsx:137:\n/**\n * Expression Condition Component\n */\n
/Users/vu/forks/design-system-react/components/date-picker/private/calendar.jsx:8:\n\n
/Users/vu/forks/design-system-react/components/expression/formula.jsx:87:\n/**\n * Expression Formula Component\n */\n
/Users/vu/forks/design-system-react/components/carousel/index.jsx:47:\n\n/**\n * A carousel allows multiple pieces of featured content to occupy an allocated amount of space.\n * Currently panel index and auto play cannot be controlled by the app.\n */\n
/Users/vu/forks/design-system-react/components/expression/index.jsx:83:\n\n/**\n * Expression builders help users declaratively construct logical expressions.\n * These expressions can be used when querying for a filtered set of records,\n * creating rules to control when something executes, or any other conditional logic.\n */\n
/Users/vu/forks/design-system-react/components/lookup/header.jsx:13:\n\n
/Users/vu/forks/design-system-react/components/brand-band/index.jsx:25:\n\n/**\n * The brand band provides theming capability that adds personality and improves information density and contrast.\n *\n * NOTE: you may find that themes other than 'default' fail to load the appropriate styling in your application.\n * If this occurs the cause is very likely to be CSP settings on the server hosting your application protecting against style injections.\n * Changing these settings is not recommended. Instead, add the following styles to any stylesheet provided by the server itself (such as an external stylesheet):\n *\n * When using 'lightning-theme':\n * .slds-brand-band.dsr-brand-band_lightning-blue:before {\n *     background-image: url(/assets/images/themes/oneSalesforce/banner-brand-default.png), linear-gradient(to top, rgba(175, 197, 222, 0) 0, #1B5F9E);\n * }\n * .slds-brand-band.dsr-brand-band_lightning-blue:after {\n *     background-image: linear-gradient(to bottom, rgba(175, 197, 222, 0) 60%, #AFC5DE);\n * }\n *\n * For more information on the problem, [see this Stack Overflow question](https://stackoverflow.com/questions/17766817/refused-to-apply-inline-style-because-it-violates-the-following-content-security)\n */\n
/Users/vu/forks/design-system-react/components/button-stateful/index.jsx:124:\n\n/**\n * The ButtonStateful component is a variant of the Lightning Design System Button component. It is used for buttons that have a state of unselected or selected.\n * For icon buttons, use <code>variant='icon'</code>. For buttons with labels or buttons with labels and icons, pass data to the state props (ie. <code>stateOne={{iconName: 'add', label: 'Join'}}</code>).\n * Although not listed in the prop table, all `aria-*` props will be added to the button element if passed in.\n * If no `aria-*` props are passed in, <code>aria-live='polite'</code> is used for `icon` and `icon-filled` variants,\n * and <code>aria-live='assertive'</code> is used for the remaining variants.\n */\n
/Users/vu/forks/design-system-react/components/files/file.jsx:109:\n/**\n * File is a component that represents content uploaded as an attachment.\n */\n
/Users/vu/forks/design-system-react/components/files/index.jsx:43:\n\n/**\n * Files is a component that wraps multiple file components that represent an attachment\n */\n
/Users/vu/forks/design-system-react/components/button/index.jsx:30:\n\n/**\n * The Button component is the Lightning Design System Button component. The Button should be used for label buttons, icon buttons, or buttons that have both labels and icons.\n * Either a <code>label</code> or <code>assistiveText.icon</code> is required; see the Prop Details table below. For buttons that maintain selected/unselected states, use the <a href="#/button-stateful">ButtonStateful</a> component.\n * Although not listed in the prop table, all `aria-*` and `form*` props will be added to the `button` element if passed in.\n */\n
/Users/vu/forks/design-system-react/components/expression/group.jsx:117:\n\n/**\n * Expression Group Component\n */\n
/Users/vu/forks/design-system-react/components/files/more-files.jsx:68:\n\n/**\n * MoreFiles is a component that represents a number of file contents uploaded as an attachment.\n */\n
/Users/vu/forks/design-system-react/components/avatar/index.jsx:79:\n\n/**\n * The avatar component represents an object or entity. An image is the preferred format for an avatar.\n If the `imgSrc` prop is undefined, and if a `label` or `initials` prop is available, the fallback avatar will render with initials. If initals are passed in directly in the `initials` prop, this will render in the fallback avatar. If `initals` prop is unavailable but a `label` prop is available, the fallback avatar will render with built initials of the user name or entity name.\n\n Intials built from the `label` prop will apply the following logic: If the label name contains two words, like first and last name, the first letter of each will be capitalized and returned. For labels that only have a single word name, the first two letters of that word, using one capital and one lower case letter, will be returned. For labels that contain three or more words, the first character of the first and last words will be capitalized and returned.\n\n If `initials` or `label` are not available, the fallback avatar will render a standard icon. If `variant='user'`, a user icon will\n render. If `variant='entity'`, an account icon will render.\n */\n\n
/Users/vu/forks/design-system-react/components/date-picker/date-picker.jsx:244:\n\n/**\n * A date picker is a non-text input form element. You can select a single date from a popup calendar. Please use an external library such as [MomentJS](https://github.com/moment/moment/) for date formatting and parsing and internationalization. You will want to use your date library within the `parser` and `formatter` callbacks.\n *\n * The calendar is rendered with time/dates based on local browser time of the client browser. All dates are in the local user's timezones and time. Another way to put it is if a user selects a date, they are actually selecting midnight in their current time on their current day and not mightnight in UTC. If `Datepicker` is paired with a time and timezone input, you may want to convert dates provided by this component to UTC and then combine the date with your time and timezone input.\n *\n * Pairing with any other component besides an `input` is untested.\n *\n * This component is wrapped in a [higher order component to listen for clicks outside itself](https://github.com/kentor/react-click-outside) and thus requires use of `ReactDOM`.\n */\n
/Users/vu/forks/design-system-react/components/lookup/private/menu.jsx:28:\n
/Users/vu/forks/design-system-react/components/utilities/truncate/index.jsx:26:\n\n
/Users/vu/forks/design-system-react/components/lookup/private/item.jsx:27:\n\n
/Users/vu/forks/design-system-react/components/lookup/footer.jsx:13:\n\n
/Users/vu/forks/design-system-react/components/slider/index.jsx:116:\n\n/**\n * The ability to style sliders with CSS varies across browsers. Using this component ensures sliders look the same everywhere.\n */\n
/Users/vu/forks/design-system-react/components/pill/index.jsx:108:\n\n/**\n * A pill displays a label that can contain links and can be removed from view. Use `PillContainer` for a list of pills in a container that resembles an `input` form field. A pill is useful for displaying read-only text that can be added and removed on demand.\n */\n
/Users/vu/forks/design-system-react/components/carousel/private/carousel-indicators.jsx:14:\n\n/**\n * CarouselIndicators is used to display the list of indicators associated to the number of panels\n * a carousel has\n */\n
/Users/vu/forks/design-system-react/components/toast/index.jsx:99:\n\n/**\n * Toast serves as a feedback & confirmation mechanism after the user takes an action. View [banner guidelines](https://www.lightningdesignsystem.com/guidelines/messaging/components/banners/).\n */\n\n
/Users/vu/forks/design-system-react/components/toast/container.jsx:24:\n\n/**\n * A fixed container for toast banners.\n */\n\n
/Users/vu/forks/design-system-react/components/icon-settings/index.jsx:7:\n\n/**\n * The Icon Settings component allows for the path to the icons to be specified in all child components and is recommended to be used at the root of the application. It's render function is `return this.props.children`, so it can only have one child node.\n *\n * **Individual sprites**\n * If you are using webpack it is advised to use the sprite properties\n * {actionSprite, standardSprite...} to specify the individual sprite paths so that webpack can\n * easily re-write the paths.\n * ```\n * import actionSprite from '......';\n *\n * <IconSettings actionSprite={actionSprite} ......>\n * ```\n * **Root icon path**\n * Otherwise use the iconPath to specify the root path to where the icon files will be located in you application\n * such as `/assets/icons`.\n */\n
/Users/vu/forks/design-system-react/components/progress-bar/index.jsx:81:\n\n/**\n * A progress bar component communicates to the user the progress of a particular process\n */\n
/Users/vu/forks/design-system-react/components/checkbox/index.jsx:192:\n\n/**\n * The ability to style checkboxes with CSS varies across browsers. Using this component ensures checkboxes look the same everywhere.\n */\n
/Users/vu/forks/design-system-react/components/global-header/index.jsx:41:\n\n/**\n * The global header is the anchor for the Salesforce platform and spans all other parts of the UI. It accepts children to define the items displayed within.\n *\n * Example:\n * ```\n * <SLDSGlobalHeader>\n *   <SLDSGlobalHeaderSearch />\n *   <SLDSGlobalHeaderButton />\n *   <SLDSGlobalHeaderDropdown />\n *   <SLDSGlobalHeaderDropdown />\n *   <SLDSGlobalHeaderProfile />\n * </SLDSGlobalHeader>\n * ```\n */\n
/Users/vu/forks/design-system-react/components/global-header/notifications.jsx:35:\n\n/**\n * A GlobalHeaderNotifications component. Notifications are a way to notify a user about a global change within the application.\n */\n
/Users/vu/forks/design-system-react/components/alert/index.jsx:89:\n\n/**\n * Alert banners communicate a state that affects the entire system, not just a feature or page. It persists over a session and appears without the user initiating the action. View [banner guidelines](https://www.lightningdesignsystem.com/guidelines/messaging/components/banners/).\n */\n\n
/Users/vu/forks/design-system-react/components/global-header/task.jsx:28:\n\n/**\n * A GlobalHeaderTask component.\n */\n
/Users/vu/forks/design-system-react/components/input/index.jsx:51:\n\n/**\n * The HTML `input` with a label and error messaging.\n */\n
/Users/vu/forks/design-system-react/components/tabs/index.jsx:129:\n\n/**\n * A tab keeps related content in a single container that is shown and hidden through navigation.\n */\n
/Users/vu/forks/design-system-react/components/tabs/private/tab.jsx:19:\n\n/*\n * Disabled Tab CSS has been removed. If you'd like to use the styling, please import it in your module bundler.\n */\n// import '!style-loader!css-loader!../../../styles/tabs/tab.css'; // eslint-disable-line import/no-unresolved\n\n
